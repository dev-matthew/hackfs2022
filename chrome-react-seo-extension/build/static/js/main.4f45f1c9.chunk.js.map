{"version":3,"sources":["App.js","index.js"],"names":["wallet","xmtp","activeMessages","myAddress","conversations","sites","App","activeLeft","setActiveLeft","useState","settings","setSettings","localStorage","getItem","passwordNeeded","setPasswordNeeded","includes","progressWidth","setProgressWidth","loadedPeople","setLoadedPeople","loadedSites","setLoadedSites","loadedMessages","setLoadedMessages","currentAddress","setCurrentAddress","currentWebsite","setCurrentWebsite","newConversationPopup","setNewConversationPopup","async","activateWallet","password","Wallet","fromEncryptedJson","e","alert","console","log","reset","activateXMTP","address","Client","create","allConversations","list","conversation","push","getAllConversations","sendMessage","message","website","newConversation","send","loadMessageByPerson","messages","getAllMessages","peerAddress","site","content","sender","contents","split","length","senderAddress","substring","slice","window","onload","className","onClick","id","style","width","type","autoComplete","placeholder","privateKey","encrypted","encrypt","chrome","storage","local","set","handlePrivateKey","document","getElementById","value","tabs","query","active","currentWindow","url","URL","host","title","color","map","index","Object","keys","displayMessages","onKeyPress","event","key","target","newMessage","createElement","classList","add","innerHTML","getElementsByClassName","appendChild","ReactDOM","createRoot","render"],"mappings":"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","file":"static/js/main.4f45f1c9.chunk.js","sourcesContent":["import './App.css';\nimport {useState} from 'react';\nimport {FiSettings} from 'react-icons/fi';\nimport {IoMdClose} from 'react-icons/io';\nimport {Wallet} from 'ethers';\nimport {Client} from '@xmtp/xmtp-js';\n\nvar wallet, xmtp;\nvar conversations = [];\nvar sites = {\"all\": []};\nvar activeMessages;\nvar myAddress;\n\nexport default function App() {\n  const [activeLeft, setActiveLeft] = useState(0);\n  const [settings, setSettings] = useState(localStorage.getItem(\"privateKey\") === null);\n  const [passwordNeeded, setPasswordNeeded] = useState(localStorage.getItem(\"privateKey\") !== null && localStorage.getItem(\"privateKey\").includes(\"cipher\"));\n  const [progressWidth, setProgressWidth] = useState(0);\n  const [loadedPeople, setLoadedPeople] = useState(false);\n  const [loadedSites, setLoadedSites] = useState(false);\n  const [loadedMessages, setLoadedMessages] = useState(false);\n  const [currentAddress, setCurrentAddress] = useState(\"\");\n  const [currentWebsite, setCurrentWebsite] = useState(\"\");\n  const [newConversationPopup, setNewConversationPopup] = useState(false);\n\n  async function handlePrivateKey(privateKey, password) {\n    try {\n      wallet = new Wallet(privateKey);\n      if (password) {\n        let encrypted = await wallet.encrypt(password, setProgressWidth);\n        //localStorage.setItem(\"privateKey\", encrypted);\n        // eslint-disable-next-line\n        chrome.storage.local.set({\"privateKey\": encrypted}, function() {});\n      } else {\n        //localStorage.setItem(\"privateKey\", privateKey);\n        // eslint-disable-next-line\n        chrome.storage.local.set({\"privateKey\": privateKey}, function() {});\n      }\n      console.log(wallet);\n      reset();\n      await activateXMTP();\n    } catch(e) {\n      alert(\"Invalid private key\");\n    }\n  }\n\n  async function activateWallet(password) {\n    if (password !== \"\") {\n      try {\n        wallet = await Wallet.fromEncryptedJson(localStorage.getItem(\"privateKey\"), password, setProgressWidth);\n      } catch(e) {\n        alert(\"Invalid password\");\n      }\n    } else {\n      wallet = new Wallet(localStorage.getItem(\"privateKey\"));\n    }\n    console.log(wallet);\n    reset();\n    await activateXMTP();\n  }\n\n  async function activateXMTP() {\n    myAddress = wallet.address;\n    xmtp = await Client.create(wallet);\n    console.log(xmtp);\n    await getAllConversations();\n    //await sendMessage(\"0xf82e053D56Ce2feF2EA52d2f120b706A66963327\", \"Hi this is Person 1 speaking\", \"google.com\")\n  }\n\n  async function sendMessage(address, message, website=\"all\") {\n    try {\n      if (website === \"\") {\n        website = \"all\"\n      }\n      let conversation = await xmtp.conversations.newConversation(address);\n      await conversation.send(website + \"////\" + message);\n      console.log(\"Sent message \" + message + \" to \" + address);\n    } catch (e) {\n      alert(\"Address is not on the XMTP network yet\");\n    }\n  }\n\n  async function getAllMessages(address) {\n    let conversation = await xmtp.conversations.newConversation(address);\n    let messages = await conversation.messages();\n    return messages;\n  }\n\n  async function getAllConversations() {\n    let allConversations = await xmtp.conversations.list();\n    for (const conversation of allConversations) {\n      conversations.push(conversation);\n    }\n    setLoadedPeople(true);\n    console.log(conversations);\n  }\n\n  async function loadMessageByPerson(conversation) {\n    sites = {\"all\": []};\n    console.log(conversation);\n    let messages = await getAllMessages(conversation.peerAddress);\n    setCurrentAddress(conversation.peerAddress);\n    console.log(messages);\n    for (const message of messages) {\n      let contents = message.content.split(\"////\");\n      let site, content;\n      if (contents.length > 1) {\n        site = contents[0];\n        content = contents[1];\n      } else {\n        site = \"all\";\n        content = contents[0];\n      }\n\n      let sender;\n      if (message.senderAddress === myAddress) {\n        sender = \"Me - \"\n      } else {\n        sender = message.senderAddress.substring(0, 6) + \"...\" + message.senderAddress.slice(-4) + \" - \";\n      }\n\n      if (site in sites) {\n        sites[site].push(sender + content);\n      } else {\n        sites[site] = [sender + content];\n      }\n      \n      if (site !== \"all\") {\n        sites[\"all\"].push(sender + content);\n      }\n    }\n\n    console.log(sites);\n    setLoadedSites(false);\n    setLoadedSites(true);\n  }\n\n  async function displayMessages(site=\"all\") {\n    activeMessages = sites[site];\n    setCurrentWebsite(site);\n    setLoadedMessages(false);\n    setLoadedMessages(true);\n  }\n\n  function reset() {\n    setPasswordNeeded(false);\n    setSettings(false);\n    setActiveLeft(0);\n    setProgressWidth(0);\n    setNewConversationPopup(false);\n  }\n\n  function isolateWebsite(address) {\n    let url = new URL(address);\n    return url.host\n  }\n\n  window.onload = function() {\n    if (!passwordNeeded && localStorage.getItem(\"privateKey\") !== null) {\n      activateWallet(\"\");\n    }\n  }\n\n  return (\n    <div className=\"App\">\n      {settings && <div className=\"Settings\">\n        {localStorage.getItem(\"privateKey\") && <IoMdClose className=\"ClosePrivateKey Icon\"\n          onClick={() => {\n            reset();\n          }}/>}\n        <div className=\"Progress\" id=\"PrivateKeyProgress\"\n          style={{\n            width: progressWidth * 500 + \"px\"\n          }}></div>\n        <input className=\"SettingsInput\" id=\"PrivateKey\" type=\"text\" autoComplete=\"off\" placeholder=\"Private Key\"></input>\n        <input className=\"SettingsInput\" id=\"Password\" type=\"text\" autoComplete=\"off\" placeholder=\"Password\"></input>\n        <button className=\"Save SaveSettings\"\n          onClick={() => {\n            handlePrivateKey(document.getElementById(\"PrivateKey\").value, document.getElementById(\"Password\").value);\n          }}>Save</button>\n      </div>}\n\n      {passwordNeeded && <div className=\"InitialPassword\">\n          <div className=\"Progress\" id=\"PasswordProgress\"\n            style={{\n              width: progressWidth * 500 + \"px\"\n            }}></div>\n          <input className=\"SettingsInput\" id=\"InitialPassword\" type=\"text\" autoComplete=\"off\" placeholder=\"Password\"></input>\n          <button className=\"Save SavePassword\"\n            onClick={() => {\n              activateWallet(document.getElementById(\"InitialPassword\").value);\n            }}>Enter</button>\n      </div>}\n\n      {newConversationPopup && <div className=\"NewConversationPopup\">\n        <IoMdClose className=\"ClosePrivateKey Icon\"\n          onClick={() => {\n            reset();\n          }}/>\n        <input className=\"SettingsInput\" id=\"ToAddress\" type=\"text\" autoComplete=\"off\" placeholder=\"Message Recipient\"></input>\n        <input className=\"SettingsInput\" id=\"ToWebsite\" type=\"text\" autoComplete=\"off\" placeholder=\"Website (Optional)\"></input>\n        <button className=\"CurrentWebsite\"\n          onClick={() => {\n            // eslint-disable-next-line\n            chrome.tabs && chrome.tabs.query({active: true, currentWindow: true}, function(tabs) {\n                document.getElementById(\"ToWebsite\").value = isolateWebsite(tabs[0].url);\n            });\n          }}>Current</button>\n        <input className=\"SettingsInput\" id=\"ToMessage\" type=\"text\" autoComplete=\"off\" placeholder=\"Message\"></input>\n        <button className=\"Save SendMessage\"\n            onClick={() => {\n              sendMessage(\n                document.getElementById(\"ToAddress\").value,\n                document.getElementById(\"ToMessage\").value,\n                document.getElementById(\"ToWebsite\").value\n              );\n              reset();\n            }}>Send</button>\n      </div>}\n\n      <div className=\"GlobalHeader\">\n        <span className=\"MyAddress\" title={myAddress}>{(myAddress && \"Logged in as \" + myAddress.substring(0,6) + \"...\" + myAddress.slice(-4)) || \"Loading...\"}</span>\n        <div className=\"NewConversation HeaderButton\" onClick={() => {\n          setNewConversationPopup(true);\n        }}>New Conversation</div>\n        <FiSettings className=\"OpenSettings Icon\"\n            onClick={() => {\n              setActiveLeft(2);\n              setSettings(true);\n            }}\n            style={{\n              color: activeLeft === 2 ? \"white\" : \"rgba(255,255,255,0.5)\"\n            }}/>\n      </div>\n\n      <div className=\"LeftNav\">\n        <div className=\"LeftNavHeader\">\n          <span className=\"LeftNavHeaderOption\">People</span>\n        </div>\n        {loadedPeople ? (<div>\n          {conversations.map((conversation, index) => \n            <div className=\"Option Person\" key={index}\n              onClick={() => {\n                loadMessageByPerson(conversation);\n              }}\n            >{conversation.peerAddress.substring(0,6) + \"...\" + conversation.peerAddress.slice(-4)}</div>\n          )}\n        </div>) : <div className=\"Option Person\">Loading...</div>}\n      </div>\n      <div className=\"MiddleNav\">\n        <span className=\"MiddleNavHeaderOption\">Sites</span>\n        {loadedSites && <div>\n          {Object.keys(sites).map((site, index) => \n            <div className=\"Option Site\" key={index}\n              onClick={() => {\n                displayMessages(site);\n              }}\n            >{site}</div>\n          )}\n        </div>}\n      </div>\n\n      <div className=\"RightNav\">\n        <div className=\"RightNavHeader\"></div>\n        <div className=\"Messages\">\n          {loadedMessages && <div>\n            {activeMessages.map((message, index) => \n              <div className={message.includes(\"Me\") ? \"Message Right\" : \"Message Left\"} key={index} title={currentWebsite}>{message}</div>\n            )}  \n          </div>}\n        </div>\n\n        {loadedMessages && <input className=\"TextMessage\" type=\"text\" placeholder=\"Type your message\" autoComplete=\"off\"\n          onKeyPress={event => {\n            if (event.key === \"Enter\") {\n              console.log(event.target.value);\n              sendMessage(currentAddress, event.target.value, currentWebsite);\n              let newMessage = document.createElement(\"div\");\n              newMessage.classList.add(\"Message\");\n              newMessage.classList.add(\"Right\");\n              newMessage.innerHTML = \"Me - \" + event.target.value;\n              document.getElementsByClassName(\"Messages\")[0].appendChild(newMessage)\n              document.getElementsByClassName(\"TextMessage\")[0].value = \"\";\n            }\n          }}\n        ></input>}\n      </div>\n    </div>\n  );\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  //React.StrictMode causes useEffect to be called twice\n  <App />\n);\n"],"sourceRoot":""}