{"version":3,"sources":["App.js","index.js"],"names":["wallet","xmtp","conversations","sites","App","activeLeft","setActiveLeft","useState","settings","setSettings","localStorage","getItem","passwordNeeded","setPasswordNeeded","includes","progressWidth","setProgressWidth","loadedPeople","setLoadedPeople","loadedSites","setLoadedSites","async","activateWallet","password","Wallet","fromEncryptedJson","e","alert","console","log","reset","activateXMTP","Client","create","allConversations","list","conversation","push","getAllConversations","loadMessageByPerson","messages","address","newConversation","getAllMessages","peerAddress","message","site","content","contents","split","length","window","onload","className","onClick","id","style","width","type","autoComplete","placeholder","privateKey","encrypted","encrypt","setItem","handlePrivateKey","document","getElementById","value","color","map","index","substring","slice","Object","keys","ReactDOM","createRoot","render"],"mappings":"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","file":"static/js/main.aeea280c.chunk.js","sourcesContent":["import './App.css';\nimport {useState} from 'react';\nimport {FiSettings} from 'react-icons/fi';\nimport {IoMdClose} from 'react-icons/io';\nimport {Wallet} from 'ethers';\nimport {Client} from '@xmtp/xmtp-js';\n\nvar wallet, xmtp;\nvar conversations = [];\nvar sites = {\"all\": []};\n\nexport default function App() {\n  const [activeLeft, setActiveLeft] = useState(0);\n  const [settings, setSettings] = useState(localStorage.getItem(\"privateKey\") === null);\n  const [passwordNeeded, setPasswordNeeded] = useState(localStorage.getItem(\"privateKey\") !== null && localStorage.getItem(\"privateKey\").includes(\"cipher\"));\n  const [progressWidth, setProgressWidth] = useState(0);\n  const [loadedPeople, setLoadedPeople] = useState(false);\n  const [loadedSites, setLoadedSites] = useState(false);\n\n  async function handlePrivateKey(privateKey, password) {\n    try {\n      wallet = new Wallet(privateKey);\n      if (password) {\n        let encrypted = await wallet.encrypt(password, setProgressWidth);\n        localStorage.setItem(\"privateKey\", encrypted);\n      } else {\n        localStorage.setItem(\"privateKey\", privateKey);\n      }\n      console.log(wallet);\n      reset();\n      await activateXMTP();\n    } catch(e) {\n      alert(\"Invalid private key\");\n    }\n  }\n\n  // eslint-disable-next-line\n  async function activateWallet(password) {\n    if (password !== \"\") {\n      try {\n        wallet = await Wallet.fromEncryptedJson(localStorage.getItem(\"privateKey\"), password, setProgressWidth);\n      } catch(e) {\n        alert(\"Invalid password\");\n      }\n    } else {\n      wallet = new Wallet(localStorage.getItem(\"privateKey\"));\n    }\n    console.log(wallet);\n    reset();\n    await activateXMTP();\n  }\n\n  async function activateXMTP() {\n    xmtp = await Client.create(wallet);\n    console.log(xmtp);\n    await getAllConversations();\n    //await sendMessage(\"0xe2037FD7bEaF4E550C12719aDBdad50F39d3aAE5\", \"First Message\", \"uniswap.org\")\n  }\n\n  async function sendMessage(address, message, website=\"None\") {\n    let conversation = await xmtp.conversations.newConversation(address);\n    await conversation.send(website + \"////\" + message);\n  }\n\n  async function getAllMessages(address) {\n    let conversation = await xmtp.conversations.newConversation(address);\n    let messages = await conversation.messages();\n    return messages;\n  }\n\n  async function getAllConversations() {\n    let allConversations = await xmtp.conversations.list();\n    for (const conversation of allConversations) {\n      conversations.push(conversation);\n    }\n    setLoadedPeople(true);\n    console.log(conversations);\n  }\n\n  async function loadMessageByPerson(conversation) {\n    console.log(conversation);\n    let messages = await getAllMessages(conversation.peerAddress);\n    console.log(messages);\n    for (const message of messages) {\n      let contents = message.content.split(\"////\");\n      let site, content;\n      if (contents.length > 1) {\n        site = contents[0];\n        content = contents[1];\n      } else {\n        site = \"None\";\n        content = contents[0];\n      }\n\n      if (site in sites) {\n        sites[site].push(content);\n      } else {\n        sites[site] = [content];\n      }\n\n      sites[\"all\"].push(content);\n    }\n\n    console.log(sites);\n    setLoadedSites(true);\n  }\n\n  async function displayMessages(site=\"all\") {\n    let messages = sites[site];\n  }\n\n  function reset() {\n    setPasswordNeeded(false);\n    setSettings(false);\n    setActiveLeft(0);\n    setProgressWidth(0);\n  }\n\n  window.onload = function() {\n    if (!passwordNeeded && localStorage.getItem(\"privateKey\") !== null) {\n      activateWallet(\"\");\n    }\n  }\n\n  return (\n    <div className=\"App\">\n      {settings && <div className=\"Settings\">\n        {localStorage.getItem(\"privateKey\") && <IoMdClose className=\"ClosePrivateKey Icon\"\n          onClick={() => {\n            reset();\n          }}/>}\n        <div className=\"Progress\" id=\"PrivateKeyProgress\"\n          style={{\n            width: progressWidth * 500 + \"px\"\n          }}></div>\n        <input className=\"SettingsInput\" id=\"PrivateKey\" type=\"text\" autoComplete=\"off\" placeholder=\"Private Key\"></input>\n        <input className=\"SettingsInput\" id=\"Password\" type=\"text\" autoComplete=\"off\" placeholder=\"Password\"></input>\n        <button className=\"Save SaveSettings\"\n          onClick={() => {\n            handlePrivateKey(document.getElementById(\"PrivateKey\").value, document.getElementById(\"Password\").value);\n          }}>Save</button>\n      </div>}\n\n      {passwordNeeded && <div className=\"InitialPassword\">\n          <div className=\"Progress\" id=\"PasswordProgress\"\n            style={{\n              width: progressWidth * 500 + \"px\"\n            }}></div>\n          <input className=\"SettingsInput\" id=\"InitialPassword\" type=\"text\" autoComplete=\"off\" placeholder=\"Password\"></input>\n          <button className=\"Save SavePassword\"\n            onClick={() => {\n              activateWallet(document.getElementById(\"InitialPassword\").value);\n            }}>Enter</button>\n      </div>}\n\n      <div className=\"LeftNav\">\n        <div className=\"LeftNavHeader\">\n          <span className=\"LeftNavHeaderOption\"\n            onClick={() => setActiveLeft(0)}\n            style={{\n              color: activeLeft === 0 ? \"white\" : \"rgba(255,255,255,0.5)\"\n            }}>People</span>\n          <span className=\"LeftNavHeaderOption\"\n            onClick={() => setActiveLeft(0)}\n            style={{\n              color: activeLeft === 1 ? \"white\" : \"rgba(255,255,255,0.5)\"\n            }}>Sites</span>\n          \n          <FiSettings className=\"OpenSettings Icon\"\n            onClick={() => {\n              setActiveLeft(2);\n              setSettings(true);\n            }}\n            style={{\n              color: activeLeft === 2 ? \"white\" : \"rgba(255,255,255,0.5)\"\n            }}/>\n        </div>\n\n        <div className=\"NewMessage Option\" onClick={() => {\n          \n        }}>New Message</div>\n        {loadedPeople ? (<div>\n          {conversations.map((conversation, index) => \n            <div className=\"Option Person\" key={index}\n              onClick={() => {\n                loadMessageByPerson(conversation);\n              }}\n            >{conversation.peerAddress.substring(0,6) + \"...\" + conversation.peerAddress.slice(-4)}</div>\n          )}\n        </div>) : <div className=\"Option Person\">Loading...</div>}\n      </div>\n      <div className=\"MiddleNav\">\n        {loadedSites && <div>\n          <div className=\"Option Site\">All</div>\n          {Object.keys(sites).map((site, index) => \n            <div className=\"Option Site\" key={index}\n              onClick={() => {\n                \n              }}\n            >{site}</div>\n          )}\n        </div>}\n      </div>\n    </div>\n  );\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  //React.StrictMode causes useEffect to be called twice\n  <App />\n);\n"],"sourceRoot":""}