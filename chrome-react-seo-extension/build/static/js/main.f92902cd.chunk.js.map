{"version":3,"sources":["App.js","index.js"],"names":["wallet","xmtp","App","activeLeft","setActiveLeft","useState","settings","setSettings","localStorage","getItem","passwordNeeded","setPasswordNeeded","includes","progressWidth","setProgressWidth","async","createNewClient","privateKey","Client","create","e","alert","sendMessage","publicKey","message","convo","conversations","newConversation","send","messages","i","senderAddress","address","forEach","item","li","document","createElement","text","createTextNode","content","appendChild","getElementById","console","log","getMessages","reset","activateWallet","password","Wallet","fromEncryptedJson","useEffect","className","onClick","id","style","width","type","autoComplete","placeholder","encrypted","encrypt","setItem","handlePrivateKey","value","color","ReactDOM","createRoot","render","StrictMode"],"mappings":"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","file":"static/js/main.f92902cd.chunk.js","sourcesContent":["import './App.css';\nimport {useEffect, useState} from 'react';\nimport {FiSettings, FiSmartphone} from 'react-icons/fi';\nimport {IoMdClose} from 'react-icons/io';\nimport {Wallet} from 'ethers';\nimport { Client } from '@xmtp/xmtp-js'\n\nvar wallet;\nvar xmtp;\n\nexport default function App() {\n  const [activeLeft, setActiveLeft] = useState(0);\n  const [settings, setSettings] = useState(localStorage.getItem(\"privateKey\") === null);\n  const [passwordNeeded, setPasswordNeeded] = useState(localStorage.getItem(\"privateKey\") !== null && localStorage.getItem(\"privateKey\").includes(\"cipher\"));\n  const [progressWidth, setProgressWidth] = useState(0);\n\n\n  async function handlePrivateKey(privateKey, password) {\n    try {\n      wallet = new Wallet(privateKey);\n      if (password !== \"\") {\n        let encrypted = await wallet.encrypt(password, setProgressWidth);\n        localStorage.setItem(\"privateKey\", encrypted);\n      } else {\n        localStorage.setItem(\"privateKey\", privateKey); // encrypt with some default value\n      }\n      reset();\n      createNewClient(privateKey)\n    } catch(e) {\n      alert(\"Invalid private key\");\n    }\n  }\n\n  async function createNewClient(privateKey) {\n    try {\n      xmtp = await Client.create(wallet);\n    } catch(e) {\n      alert(\"Cannot create client\");\n    }\n  }\n\n  async function sendMessage(publicKey, message) {\n    try {\n      const convo = await xmtp.conversations.newConversation(publicKey);\n      await convo.send(message);\n      getMessages(publicKey);\n    } catch(e) {\n      alert(\"Recipient is not on XMTP network.\")\n    }\n    reset();\n  }\n\n  async function getConversations() {\n    try {\n      const convos = await xmtp.conversations.list();\n      console.log(convos);\n      // var addresses = [];\n      // var i = 0;\n      // for (const convo of await convos.messages()) {\n      //   addresses[i] = convo.peerAddress;\n      //   i += 1;\n      // }\n      // addresses.forEach(function(item) {\n      //   var li = document.createElement(\"li\");\n      //   var text = document.createTextNode(item);\n      //   li.appendChild(text);\n      //   document.getElementById(\"addresses\").appendChild(li);\n      // });\n    } catch(e) {\n      console.log(e);\n    }\n  }\n\n  async function getMessages(publicKey) {\n    try {\n      const convo = await xmtp.conversations.newConversation(publicKey);\n      var messages = [];\n      var i = 0;\n      for (const message of await convo.messages()) {\n        if (message.senderAddress == xmtp.address) {\n          messages[i] = message;\n          i += 1;\n        }\n      }\n\n      messages.forEach(function(item) {\n        var li = document.createElement(\"li\");\n        var text = document.createTextNode(item.content);\n        li.appendChild(text);\n        document.getElementById(\"messages\").appendChild(li);\n      });\n    } catch(e) {\n      console.log(e);\n    }\n  }\n\n  async function activateWallet(password) {\n    if (password !== \"\") {\n      try {\n        wallet = await Wallet.fromEncryptedJson(localStorage.getItem(\"privateKey\"), password, setProgressWidth);\n      } catch(e) {\n        alert(\"Invalid password\");\n      }\n    } else {\n      wallet = new Wallet(localStorage.getItem(\"privateKey\"));\n    }\n    reset();\n    createNewClient(localStorage.getItem(\"privateKey\"))\n  }\n\n  function reset() {\n    setPasswordNeeded(false);\n    setSettings(false);\n    setActiveLeft(0);\n    setProgressWidth(0);\n  }\n\n  useEffect(() => {\n    if (!passwordNeeded && localStorage.getItem(\"privateKey\") !== null) {\n      activateWallet(\"\");\n    }\n  }, [activateWallet, passwordNeeded])\n\n  return (\n    <div className=\"App\">\n      {settings && <div className=\"Settings\">\n        {localStorage.getItem(\"privateKey\") !== null && <IoMdClose className=\"ClosePrivateKey Icon\"\n          onClick={() => {\n            reset();\n          }}/>}\n        <div className=\"Progress\" id=\"PrivateKeyProgress\"\n          style={{\n            width: progressWidth * 500 + \"px\"\n          }}></div>\n        <input className=\"SettingsInput\" id=\"PrivateKey\" type=\"text\" autoComplete=\"off\" placeholder=\"Private Key\"></input>\n        <input className=\"SettingsInput\" id=\"Password\" type=\"text\" autoComplete=\"off\" placeholder=\"Password\"></input>\n        <button className=\"Save SaveSettings\"\n          onClick={() => {\n            handlePrivateKey(document.getElementById(\"PrivateKey\").value, document.getElementById(\"Password\").value);\n          }}>Save</button>\n      </div>}\n\n      {passwordNeeded && <div className=\"InitialPassword\">\n          <div className=\"Progress\" id=\"PasswordProgress\"\n            style={{\n              width: progressWidth * 500 + \"px\"\n            }}></div>\n          <input className=\"SettingsInput\" id=\"InitialPassword\" type=\"text\" autoComplete=\"off\" placeholder=\"Password\"></input>\n          <button className=\"Save SavePassword\"\n            onClick={() => {\n              activateWallet(document.getElementById(\"InitialPassword\").value);\n            }}>Enter</button>\n      </div>}\n\n      {activeLeft===1 && !passwordNeeded && <div className=\"Settings\">\n        {localStorage.getItem(\"privateKey\") !== null && <IoMdClose className=\"ClosePrivateKey Icon\"\n          onClick={() => {\n            reset();\n          }}/>}\n        <div className=\"Progress\" id=\"PrivateKeyProgress\"\n          style={{\n            width: progressWidth * 500 + \"px\"\n          }}></div>\n        <input className=\"SettingsInput\" id=\"PublicKey\" type=\"text\" autoComplete=\"off\" placeholder=\"Public Key\"></input>\n        <input className=\"SettingsInput\" id=\"Message\" type=\"text\" autoComplete=\"off\" placeholder=\"Message\"></input>\n        <button className=\"Save SaveSettings\"\n          onClick={() => {\n            sendMessage(document.getElementById(\"PublicKey\").value, document.getElementById(\"Message\").value);\n          }}>Save</button>\n      </div>}\n\n      <div className=\"LeftNav\">\n        <div className=\"LeftNavHeader\">\n          <span className=\"LeftNavHeaderOption\"\n            onClick={() => {\n              setActiveLeft(1)\n            }}\n            style={{\n              color: activeLeft === 0 ? \"white\" : \"rgba(255,255,255,0.5)\"\n            }}>Message</span>\n          <span className=\"LeftNavHeaderOption\"\n            onClick={() => {\n            }}\n            style={{\n              color: activeLeft === 1 ? \"white\" : \"rgba(255,255,255,0.5)\"\n            }}>Load</span>\n          <FiSettings className=\"OpenSettings Icon\"\n            onClick={() => {\n              setActiveLeft(3);\n              setSettings(true);\n            }}\n            style={{\n              color: activeLeft === 3 ? \"white\" : \"rgba(255,255,255,0.5)\"\n            }}/>\n        </div>\n      </div>\n      <div className=\"MiddleNav\">\n        <ul id=\"messages\"></ul>\n      </div>\n    </div>\n  );\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n"],"sourceRoot":""}