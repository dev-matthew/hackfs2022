"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const proto = __importStar(require("../src/proto/messaging"));
const crypto_1 = require("./crypto");
const PublicKey_1 = __importDefault(require("./crypto/PublicKey"));
// ContactBundle packages all the infromation which a client uses to advertise on the network.
class ContactBundle {
    constructor(publicKeyBundle) {
        if (!publicKeyBundle) {
            throw new Error('missing keyBundle');
        }
        this.keyBundle = publicKeyBundle;
    }
    toBytes() {
        return this.keyBundle.toBytes();
    }
    static fromBytes(bytes) {
        const bundle = this.decodeV1(bytes);
        if (!bundle) {
            throw new Error('could not parse bundle');
        }
        if (!bundle.identityKey) {
            throw new Error('missing keyBundle');
        }
        if (!bundle.preKey) {
            throw new Error('missing pre-key');
        }
        return new ContactBundle(new crypto_1.PublicKeyBundle(new PublicKey_1.default(bundle.identityKey), new PublicKey_1.default(bundle.preKey)));
    }
    static decodeV1(bytes) {
        var _a;
        try {
            const b = proto.ContactBundle.decode(bytes);
            return (_a = b.v1) === null || _a === void 0 ? void 0 : _a.keyBundle;
        }
        catch (e) {
            if (e instanceof RangeError ||
                (e instanceof Error && e.message.startsWith('invalid wire type'))) {
                // Adds a default fallback for older versions of the proto (Which may also fail)
                try {
                    return proto.PublicKeyBundle.decode(bytes);
                }
                catch (e) {
                    throw new Error("Couldn't decode contact bundle: " + e);
                }
            }
        }
    }
}
exports.default = ContactBundle;
//# sourceMappingURL=ContactBundle.js.map