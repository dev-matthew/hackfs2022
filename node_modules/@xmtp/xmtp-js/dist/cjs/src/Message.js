"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const proto = __importStar(require("./proto/messaging"));
const Ciphertext_1 = __importDefault(require("./crypto/Ciphertext"));
const crypto_1 = require("./crypto");
const errors_1 = require("./crypto/errors");
const utils_1 = require("./crypto/utils");
const encryption_1 = require("./crypto/encryption");
const extractV1Message = (msg) => {
    if (!msg.v1) {
        throw new Error('Message is not of type v1');
    }
    return msg.v1;
};
// Message is basic unit of communication on the network.
// Message header carries the sender and recipient keys used to protect message.
// Message timestamp is set by the sender.
class Message {
    constructor(id, bytes, obj, header) {
        const msg = extractV1Message(obj);
        this.id = id;
        this.bytes = bytes;
        this.headerBytes = msg.headerBytes;
        this.header = header;
        if (!msg.ciphertext) {
            throw new Error('missing message ciphertext');
        }
        this.ciphertext = new Ciphertext_1.default(msg.ciphertext);
    }
    toBytes() {
        return this.bytes;
    }
    static create(obj, header, bytes) {
        return __awaiter(this, void 0, void 0, function* () {
            const id = (0, utils_1.bytesToHex)(yield (0, encryption_1.sha256)(bytes));
            return new Message(id, bytes, obj, header);
        });
    }
    static fromBytes(bytes) {
        return __awaiter(this, void 0, void 0, function* () {
            const msg = proto.Message.decode(bytes);
            const innerMessage = extractV1Message(msg);
            const header = proto.MessageHeader.decode(innerMessage.headerBytes);
            return Message.create(msg, header, bytes);
        });
    }
    get sent() {
        var _a;
        return this.header ? new Date((_a = this.header) === null || _a === void 0 ? void 0 : _a.timestamp) : undefined;
    }
    // wallet address derived from the signature of the message sender
    get senderAddress() {
        var _a, _b;
        if (!((_b = (_a = this.header) === null || _a === void 0 ? void 0 : _a.sender) === null || _b === void 0 ? void 0 : _b.identityKey)) {
            return undefined;
        }
        return new crypto_1.PublicKey(this.header.sender.identityKey).walletSignatureAddress();
    }
    // wallet address derived from the signature of the message recipient
    get recipientAddress() {
        var _a, _b;
        if (!((_b = (_a = this.header) === null || _a === void 0 ? void 0 : _a.recipient) === null || _b === void 0 ? void 0 : _b.identityKey)) {
            return undefined;
        }
        return new crypto_1.PublicKey(this.header.recipient.identityKey).walletSignatureAddress();
    }
    // encrypt and serialize the message
    static encode(sender, recipient, message, timestamp) {
        return __awaiter(this, void 0, void 0, function* () {
            const secret = yield sender.sharedSecret(recipient, sender.getCurrentPreKey().publicKey, false);
            // eslint-disable-next-line camelcase
            const header = {
                sender: sender.getPublicKeyBundle(),
                recipient,
                timestamp: timestamp.getTime(),
            };
            const headerBytes = proto.MessageHeader.encode(header).finish();
            const ciphertext = yield (0, crypto_1.encrypt)(message, secret, headerBytes);
            const protoMsg = { v1: { headerBytes: headerBytes, ciphertext } };
            const bytes = proto.Message.encode(protoMsg).finish();
            const msg = yield Message.create(protoMsg, header, bytes);
            msg.decrypted = message;
            return msg;
        });
    }
    // deserialize and decrypt the message;
    // throws if any part of the messages (including the header) was tampered with
    // or the recipient preKey used to encrypt the message is not recognized
    static decode(viewer, bytes) {
        var _a;
        return __awaiter(this, void 0, void 0, function* () {
            const message = proto.Message.decode(bytes);
            const v1Message = extractV1Message(message);
            const header = proto.MessageHeader.decode(v1Message.headerBytes);
            if (!header) {
                throw new Error('missing message header');
            }
            if (!header.sender) {
                throw new Error('missing message sender');
            }
            if (!header.sender.identityKey) {
                throw new Error('missing message sender identity key');
            }
            if (!header.sender.preKey) {
                throw new Error('missing message sender pre-key');
            }
            if (!header.recipient) {
                throw new Error('missing message recipient');
            }
            if (!header.recipient.identityKey) {
                throw new Error('missing message recipient identity-key');
            }
            if (!header.recipient.preKey) {
                throw new Error('missing message recipient pre-key');
            }
            const recipient = new crypto_1.PublicKeyBundle(new crypto_1.PublicKey(header.recipient.identityKey), new crypto_1.PublicKey(header.recipient.preKey));
            const sender = new crypto_1.PublicKeyBundle(new crypto_1.PublicKey(header.sender.identityKey), new crypto_1.PublicKey(header.sender.preKey));
            if (!((_a = v1Message.ciphertext) === null || _a === void 0 ? void 0 : _a.aes256GcmHkdfSha256)) {
                throw new Error('missing message ciphertext');
            }
            const ciphertext = new Ciphertext_1.default(v1Message.ciphertext);
            const msg = yield Message.create(message, header, bytes);
            let secret;
            try {
                if (viewer.identityKey.matches(sender.identityKey)) {
                    // viewer is the sender
                    secret = yield viewer.sharedSecret(recipient, sender.preKey, false);
                }
                else {
                    // viewer is the recipient
                    secret = yield viewer.sharedSecret(sender, recipient.preKey, true);
                }
            }
            catch (e) {
                if (!(e instanceof errors_1.NoMatchingPreKeyError)) {
                    throw e;
                }
                msg.error = e;
                return msg;
            }
            msg.decrypted = yield (0, crypto_1.decrypt)(ciphertext, secret, v1Message.headerBytes);
            return msg;
        });
    }
}
exports.default = Message;
//# sourceMappingURL=Message.js.map