"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.CompositeCodec = exports.ContentTypeComposite = void 0;
/* eslint-disable camelcase */
const MessageContent_1 = require("../MessageContent");
const proto = __importStar(require("../proto/composite"));
// xmtp.org/composite
//
// Composite is a generic sequence of multiple parts of arbitrary content type.
// It can be nested arbitrarily (composite of composites).
exports.ContentTypeComposite = new MessageContent_1.ContentTypeId({
    authorityId: 'xmtp.org',
    typeId: 'composite',
    versionMajor: 1,
    versionMinor: 0,
});
// CompositeCodec implements encoding/decoding of Composite values.
// Register this codec with the Client if you want support for Composite content.
class CompositeCodec {
    get contentType() {
        return exports.ContentTypeComposite;
    }
    encode(content, codecs) {
        const part = this.toProto(content, codecs);
        let composite;
        if (part.composite) {
            composite = part.composite;
        }
        else {
            composite = { parts: [part] };
        }
        const bytes = proto.Composite.encode(composite).finish();
        return {
            type: exports.ContentTypeComposite,
            parameters: {},
            content: bytes,
        };
    }
    decode(content, codecs) {
        return this.fromProto({ composite: proto.Composite.decode(content.content), part: undefined }, codecs);
    }
    toProto(content, codecs) {
        if ('type' in content) {
            const codec = codecs.codecFor(content.type);
            if (!codec) {
                throw new Error(`missing codec for part type ${content.type}`);
            }
            return {
                part: codec.encode(content.content, codecs),
                composite: undefined,
            };
        }
        const parts = new Array();
        for (const part of content.parts) {
            parts.push(this.toProto(part, codecs));
        }
        return { composite: { parts: parts }, part: undefined };
    }
    fromProto(content, codecs) {
        if (content.part) {
            if (!content.part.type) {
                throw new Error('missing part content type');
            }
            const contentType = new MessageContent_1.ContentTypeId(content.part.type);
            const codec = codecs.codecFor(contentType);
            if (!codec) {
                throw new Error(`missing codec for part type ${contentType}`);
            }
            return {
                type: contentType,
                content: codec.decode(content.part, codecs),
            };
        }
        if (!content.composite) {
            throw new Error('invalid composite');
        }
        const parts = new Array();
        for (const part of content.composite.parts) {
            parts.push(this.fromProto(part, codecs));
        }
        return { parts: parts };
    }
}
exports.CompositeCodec = CompositeCodec;
//# sourceMappingURL=Composite.js.map