"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
/* eslint-disable @typescript-eslint/explicit-module-boundary-types */
/**
 * Conversation class allows you to view, stream, and send messages to/from a peer address
 */
class Conversation {
    constructor(client, address) {
        this.peerAddress = address;
        this.client = client;
    }
    /**
     * Returns a list of all messages to/from the peerAddress
     */
    messages(opts) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.client.listConversationMessages(this.peerAddress, opts);
        });
    }
    /**
     * Returns a Stream of any new messages to/from the peerAddress
     */
    streamMessages() {
        return this.client.streamConversationMessages(this.peerAddress);
    }
    /**
     * Send a message into the conversation
     */
    send(message, // eslint-disable-line @typescript-eslint/no-explicit-any
    options) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.client.sendMessage(this.peerAddress, message, options);
        });
    }
}
exports.default = Conversation;
//# sourceMappingURL=Conversation.js.map