"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const Conversation_1 = __importDefault(require("./Conversation"));
const Stream_1 = __importDefault(require("../Stream"));
const utils_1 = require("../utils");
const messageHasHeaders = (msg) => {
    return Boolean(msg.recipientAddress && msg.senderAddress);
};
/**
 * Conversations allows you to view ongoing 1:1 messaging sessions with another wallet
 */
class Conversations {
    constructor(client) {
        this.client = client;
    }
    /**
     * List all conversations with the current wallet found in the network, deduped by peer address
     */
    list() {
        return __awaiter(this, void 0, void 0, function* () {
            const messages = yield this.client.listIntroductionMessages();
            const seenPeers = new Set();
            for (const message of messages) {
                // Ignore all messages without sender or recipient address headers
                // Makes getPeerAddress safe
                if (!messageHasHeaders(message)) {
                    continue;
                }
                const peerAddress = this.getPeerAddress(message);
                if (peerAddress) {
                    seenPeers.add(peerAddress);
                }
            }
            return (Array.from(seenPeers)
                // Consistently order the results
                .sort()
                .map((peerAddress) => new Conversation_1.default(this.client, peerAddress)));
        });
    }
    /**
     * Returns a stream of any newly created conversations.
     * Will dedupe to not return the same conversation twice in the same stream.
     * Does not dedupe any other previously seen conversations
     */
    stream() {
        const messageTransformer = (msg) => {
            const peerAddress = this.getPeerAddress(msg);
            return new Conversation_1.default(this.client, peerAddress);
        };
        const seenPeers = new Set();
        const filter = (msg) => {
            if (!messageHasHeaders(msg)) {
                return false;
            }
            const peerAddress = this.getPeerAddress(msg);
            // Check if we have seen the peer already in this stream
            if (seenPeers.has(peerAddress)) {
                return false;
            }
            seenPeers.add(peerAddress);
            return true;
        };
        return Stream_1.default.create(this.client, (0, utils_1.buildUserIntroTopic)(this.client.address), messageTransformer, filter);
    }
    /**
     * Creates a new conversation for the given address. Will throw an error if the peer is not found in the XMTP network
     */
    newConversation(peerAddress) {
        return __awaiter(this, void 0, void 0, function* () {
            const contact = yield this.client.getUserContact(peerAddress);
            if (!contact) {
                throw new Error(`Recipient ${peerAddress} is not on the XMTP network`);
            }
            return new Conversation_1.default(this.client, peerAddress);
        });
    }
    getPeerAddress(message) {
        const peerAddress = message.recipientAddress === this.client.address
            ? message.senderAddress
            : message.recipientAddress;
        // This assertion is safe, so long as messages have been through the filter
        return peerAddress;
    }
}
exports.default = Conversations;
//# sourceMappingURL=Conversations.js.map