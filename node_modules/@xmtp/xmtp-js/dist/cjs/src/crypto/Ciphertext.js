"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.AESGCMTagLength = exports.AESGCMNonceSize = exports.KDFSaltSize = exports.AESKeySize = void 0;
const proto = __importStar(require("../proto/messaging"));
exports.AESKeySize = 32; // bytes
exports.KDFSaltSize = 32; // bytes
// AES-GCM defaults from https://developer.mozilla.org/en-US/docs/Web/API/AesGcmParams
exports.AESGCMNonceSize = 12; // property iv
exports.AESGCMTagLength = 16; // property tagLength
// Ciphertext packages the encrypted ciphertext with the salt and nonce used to produce it.
// salt and nonce are not secret, and should be transmitted/stored along with the encrypted ciphertext.
class Ciphertext {
    constructor(obj) {
        if (!obj.aes256GcmHkdfSha256) {
            throw new Error('invalid ciphertext');
        }
        if (obj.aes256GcmHkdfSha256.payload.length < exports.AESGCMTagLength) {
            throw new Error(`invalid ciphertext ciphertext length: ${obj.aes256GcmHkdfSha256.payload.length}`);
        }
        if (obj.aes256GcmHkdfSha256.hkdfSalt.length !== exports.KDFSaltSize) {
            throw new Error(`invalid ciphertext salt length: ${obj.aes256GcmHkdfSha256.hkdfSalt.length}`);
        }
        if (obj.aes256GcmHkdfSha256.gcmNonce.length !== exports.AESGCMNonceSize) {
            throw new Error(`invalid ciphertext nonce length: ${obj.aes256GcmHkdfSha256.gcmNonce.length}`);
        }
        this.aes256GcmHkdfSha256 = obj.aes256GcmHkdfSha256;
    }
    toBytes() {
        return proto.Ciphertext.encode(this).finish();
    }
    static fromBytes(bytes) {
        return new Ciphertext(proto.Ciphertext.decode(bytes));
    }
}
exports.default = Ciphertext;
//# sourceMappingURL=Ciphertext.js.map