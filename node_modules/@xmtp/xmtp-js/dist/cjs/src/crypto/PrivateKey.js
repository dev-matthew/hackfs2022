"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const proto = __importStar(require("../../src/proto/private_key"));
const secp = __importStar(require("@noble/secp256k1"));
const Signature_1 = __importDefault(require("./Signature"));
const PublicKey_1 = __importDefault(require("./PublicKey"));
const encryption_1 = require("./encryption");
// PrivateKey represents a secp256k1 private key.
class PrivateKey {
    constructor(obj) {
        if (!obj.secp256k1) {
            throw new Error('invalid private key');
        }
        if (obj.secp256k1.bytes.length !== 32) {
            throw new Error(`invalid private key length: ${obj.secp256k1.bytes.length}`);
        }
        this.timestamp = obj.timestamp;
        this.secp256k1 = obj.secp256k1;
        if (!obj.publicKey) {
            throw new Error('missing public key');
        }
        this.publicKey = new PublicKey_1.default(obj.publicKey);
    }
    // create a random PrivateKey/PublicKey pair.
    static generate() {
        const secp256k1 = {
            bytes: secp.utils.randomPrivateKey(),
        };
        const timestamp = new Date().getTime();
        return new PrivateKey({
            secp256k1,
            timestamp,
            publicKey: new PublicKey_1.default({
                secp256k1Uncompressed: {
                    bytes: secp.getPublicKey(secp256k1.bytes),
                },
                timestamp: timestamp,
            }),
        });
    }
    generated() {
        if (!this.timestamp) {
            return undefined;
        }
        return new Date(this.timestamp);
    }
    // sign provided digest
    sign(digest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (!this.secp256k1) {
                throw new Error('invalid private key');
            }
            const [signature, recovery] = yield secp.sign(digest, this.secp256k1.bytes, {
                recovered: true,
                der: false,
            });
            return new Signature_1.default({
                ecdsaCompact: { bytes: signature, recovery },
            });
        });
    }
    // sign provided public key
    signKey(pub) {
        return __awaiter(this, void 0, void 0, function* () {
            if (!pub.secp256k1Uncompressed) {
                throw new Error('invalid public key');
            }
            const digest = yield (0, encryption_1.sha256)(pub.bytesToSign());
            pub.signature = yield this.sign(digest);
            return pub;
        });
    }
    // derive shared secret from peer's PublicKey;
    // the peer can derive the same secret using their PrivateKey and our PublicKey
    sharedSecret(peer) {
        if (!peer.secp256k1Uncompressed) {
            throw new Error('invalid public key');
        }
        if (!this.secp256k1) {
            throw new Error('invalid private key');
        }
        return secp.getSharedSecret(this.secp256k1.bytes, peer.secp256k1Uncompressed.bytes, false);
    }
    // encrypt plain bytes using a shared secret derived from peer's PublicKey;
    // additionalData allows including unencrypted parts of a Message in the authentication
    // protection provided by the encrypted part (to make the whole Message tamper evident)
    encrypt(plain, peer, additionalData) {
        const secret = this.sharedSecret(peer);
        return (0, encryption_1.encrypt)(plain, secret, additionalData);
    }
    // decrypt Ciphertext using a shared secret derived from peer's PublicKey;
    // throws if any part of Ciphertext or additionalData was tampered with
    decrypt(encrypted, peer, additionalData) {
        const secret = this.sharedSecret(peer);
        return (0, encryption_1.decrypt)(encrypted, secret, additionalData);
    }
    // Does the provided PublicKey correspnd to this PrivateKey?
    matches(key) {
        return this.publicKey.equals(key);
    }
    toBytes() {
        return proto.PrivateKey.encode(this).finish();
    }
    static fromBytes(bytes) {
        return new PrivateKey(proto.PrivateKey.decode(bytes));
    }
}
exports.default = PrivateKey;
//# sourceMappingURL=PrivateKey.js.map