"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const proto = __importStar(require("../../src/proto/messaging"));
const secp = __importStar(require("@noble/secp256k1"));
const Signature_1 = __importDefault(require("./Signature"));
const utils_1 = require("./utils");
const ethers = __importStar(require("ethers"));
const encryption_1 = require("./encryption");
// PublicKey represents uncompressed secp256k1 public key,
// that can optionally be signed with another trusted key pair.
// PublicKeys can be generated through PrivateKey.generate()
class PublicKey {
    constructor(obj) {
        var _a;
        if (!((_a = obj === null || obj === void 0 ? void 0 : obj.secp256k1Uncompressed) === null || _a === void 0 ? void 0 : _a.bytes)) {
            throw new Error('invalid public key');
        }
        if (obj.secp256k1Uncompressed.bytes.length !== 65) {
            throw new Error(`invalid public key length: ${obj.secp256k1Uncompressed.bytes.length}`);
        }
        if (obj.secp256k1Uncompressed.bytes[0] !== 4) {
            throw new Error(`unrecognized public key prefix: ${obj.secp256k1Uncompressed.bytes[0]}`);
        }
        this.timestamp = obj.timestamp;
        this.secp256k1Uncompressed = obj.secp256k1Uncompressed;
        if (obj.signature) {
            this.signature = new Signature_1.default(obj.signature);
        }
    }
    generated() {
        if (!this.timestamp) {
            return undefined;
        }
        return new Date(this.timestamp);
    }
    // verify that Signature was created from provided digest using the corresponding PrivateKey
    verify(signature, digest) {
        if (!this.secp256k1Uncompressed) {
            return false;
        }
        if (!signature.ecdsaCompact) {
            return false;
        }
        return secp.verify(signature.ecdsaCompact.bytes, digest, this.secp256k1Uncompressed.bytes);
    }
    bytesToSign() {
        return proto.PublicKey.encode({
            timestamp: this.timestamp,
            secp256k1Uncompressed: this.secp256k1Uncompressed,
        }).finish();
    }
    identitySigRequestText() {
        // Note that an update to this signature request text will require
        // addition of backward compatability for existing signatures
        // and/or a migration; otherwise clients will fail to verify previously
        // signed keys.
        return ('XMTP : Create Identity\n' +
            `${(0, utils_1.bytesToHex)(this.bytesToSign())}\n` +
            '\n' +
            'For more info: https://xmtp.org/signatures/');
    }
    // verify that the provided PublicKey was signed by the corresponding PrivateKey
    verifyKey(pub) {
        return __awaiter(this, void 0, void 0, function* () {
            if (typeof pub.signature === undefined) {
                return false;
            }
            if (!pub.secp256k1Uncompressed) {
                return false;
            }
            const digest = yield (0, encryption_1.sha256)(pub.bytesToSign());
            return pub.signature ? this.verify(pub.signature, digest) : false;
        });
    }
    // sign the key using a wallet
    signWithWallet(wallet) {
        return __awaiter(this, void 0, void 0, function* () {
            if (!this.secp256k1Uncompressed) {
                throw new Error('missing public key');
            }
            const sigString = yield wallet.signMessage(this.identitySigRequestText());
            const eSig = ethers.utils.splitSignature(sigString);
            const r = (0, utils_1.hexToBytes)(eSig.r);
            const s = (0, utils_1.hexToBytes)(eSig.s);
            const sigBytes = new Uint8Array(64);
            sigBytes.set(r);
            sigBytes.set(s, r.length);
            this.signature = new Signature_1.default({
                ecdsaCompact: {
                    bytes: sigBytes,
                    recovery: eSig.recoveryParam,
                },
            });
        });
    }
    // Assume the key was signed by a wallet and
    // return the wallet address that validates
    // the signature for this key.
    walletSignatureAddress() {
        if (!this.signature) {
            throw new Error('key is not signed');
        }
        if (!this.secp256k1Uncompressed) {
            throw new Error('missing public key');
        }
        const digest = (0, utils_1.hexToBytes)(ethers.utils.hashMessage(this.identitySigRequestText()));
        const pk = this.signature.getPublicKey(digest);
        if (!pk) {
            throw new Error('key signature is malformed');
        }
        return pk.getEthereumAddress();
    }
    // derive Ethereum address from this PublicKey
    getEthereumAddress() {
        if (!this.secp256k1Uncompressed) {
            throw new Error('missing public key');
        }
        return ethers.utils.computeAddress(this.secp256k1Uncompressed.bytes);
    }
    // is other the same/equivalent PublicKey?
    equals(other) {
        if (!this.secp256k1Uncompressed || !other.secp256k1Uncompressed) {
            return !this.secp256k1Uncompressed && !other.secp256k1Uncompressed;
        }
        for (let i = 0; i < this.secp256k1Uncompressed.bytes.length; i++) {
            if (this.secp256k1Uncompressed.bytes[i] !==
                other.secp256k1Uncompressed.bytes[i]) {
                return false;
            }
        }
        return true;
    }
    toBytes() {
        return proto.PublicKey.encode(this).finish();
    }
    static fromBytes(bytes) {
        return new PublicKey(proto.PublicKey.decode(bytes));
    }
}
exports.default = PublicKey;
//# sourceMappingURL=PublicKey.js.map