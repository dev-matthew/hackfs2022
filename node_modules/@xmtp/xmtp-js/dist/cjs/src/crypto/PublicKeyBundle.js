"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const proto = __importStar(require("../../src/proto/messaging"));
const PublicKey_1 = __importDefault(require("./PublicKey"));
// PublicKeyBundle packages all the keys that a participant should advertise.
// The PreKey must be signed by the IdentityKey.
// The IdentityKey can be signed by the wallet to authenticate it.
class PublicKeyBundle {
    constructor(identityKey, preKey) {
        if (!identityKey) {
            throw new Error('missing identity key');
        }
        if (!preKey) {
            throw new Error('missing pre-key');
        }
        this.identityKey = identityKey;
        this.preKey = preKey;
    }
    walletSignatureAddress() {
        return this.identityKey.walletSignatureAddress();
    }
    toBytes() {
        return proto.PublicKeyBundle.encode(this).finish();
    }
    static fromBytes(bytes) {
        const decoded = proto.PublicKeyBundle.decode(bytes);
        if (!decoded.identityKey) {
            throw new Error('missing identity key');
        }
        if (!decoded.preKey) {
            throw new Error('missing pre-key');
        }
        return new PublicKeyBundle(new PublicKey_1.default(decoded.identityKey), new PublicKey_1.default(decoded.preKey));
    }
}
exports.default = PublicKeyBundle;
//# sourceMappingURL=PublicKeyBundle.js.map