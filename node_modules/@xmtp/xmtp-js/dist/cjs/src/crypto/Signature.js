"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const proto = __importStar(require("../../src/proto/messaging"));
const secp = __importStar(require("@noble/secp256k1"));
const PublicKey_1 = __importDefault(require("./PublicKey"));
// Signature represents an ECDSA signature with recovery bit.
class Signature {
    constructor(obj) {
        if (!obj.ecdsaCompact) {
            throw new Error('invalid signature');
        }
        if (obj.ecdsaCompact.bytes.length !== 64) {
            throw new Error(`invalid signature length: ${obj.ecdsaCompact.bytes.length}`);
        }
        this.ecdsaCompact = obj.ecdsaCompact;
        if (obj.ecdsaCompact.recovery !== 0 && obj.ecdsaCompact.recovery !== 1) {
            throw new Error(`invalid recovery bit: ${obj.ecdsaCompact.recovery}`);
        }
        this.ecdsaCompact.recovery = obj.ecdsaCompact.recovery;
    }
    // Return the public key that validates this signature given the provided digest.
    // Return undefined if the signature is malformed.
    getPublicKey(digest) {
        if (!this.ecdsaCompact) {
            throw new Error('invalid signature');
        }
        const bytes = secp.recoverPublicKey(digest, this.ecdsaCompact.bytes, this.ecdsaCompact.recovery);
        return bytes
            ? new PublicKey_1.default({
                secp256k1Uncompressed: { bytes },
                timestamp: 0,
            })
            : undefined;
    }
    toBytes() {
        return proto.Signature.encode(this).finish();
    }
    static fromBytes(bytes) {
        return new Signature(proto.Signature.decode(bytes));
    }
}
exports.default = Signature;
//# sourceMappingURL=Signature.js.map