"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Message = exports.V1Message = exports.MessageHeader = exports.Ciphertext_aes256gcmHkdfsha256 = exports.Ciphertext = exports.EncodedContent_ParametersEntry = exports.EncodedContent = exports.ContentTypeId = exports.ContactBundle = exports.ContactBundleV1 = exports.PublicKeyBundle = exports.PublicKey_Secp256k1Uncompressed = exports.PublicKey = exports.Signature_ECDSACompact = exports.Signature = exports.compressionToJSON = exports.compressionFromJSON = exports.Compression = exports.protobufPackage = void 0;
/* eslint-disable */
const long_1 = __importDefault(require("long"));
const minimal_1 = __importDefault(require("protobufjs/minimal"));
exports.protobufPackage = '';
/** Recognized compression algorithms */
var Compression;
(function (Compression) {
    Compression[Compression["deflate"] = 0] = "deflate";
    Compression[Compression["gzip"] = 1] = "gzip";
    Compression[Compression["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
})(Compression = exports.Compression || (exports.Compression = {}));
function compressionFromJSON(object) {
    switch (object) {
        case 0:
        case 'deflate':
            return Compression.deflate;
        case 1:
        case 'gzip':
            return Compression.gzip;
        case -1:
        case 'UNRECOGNIZED':
        default:
            return Compression.UNRECOGNIZED;
    }
}
exports.compressionFromJSON = compressionFromJSON;
function compressionToJSON(object) {
    switch (object) {
        case Compression.deflate:
            return 'deflate';
        case Compression.gzip:
            return 'gzip';
        default:
            return 'UNKNOWN';
    }
}
exports.compressionToJSON = compressionToJSON;
function createBaseSignature() {
    return { ecdsaCompact: undefined };
}
exports.Signature = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.ecdsaCompact !== undefined) {
            exports.Signature_ECDSACompact.encode(message.ecdsaCompact, writer.uint32(10).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseSignature();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.ecdsaCompact = exports.Signature_ECDSACompact.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            ecdsaCompact: isSet(object.ecdsaCompact)
                ? exports.Signature_ECDSACompact.fromJSON(object.ecdsaCompact)
                : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        message.ecdsaCompact !== undefined &&
            (obj.ecdsaCompact = message.ecdsaCompact
                ? exports.Signature_ECDSACompact.toJSON(message.ecdsaCompact)
                : undefined);
        return obj;
    },
    fromPartial(object) {
        const message = createBaseSignature();
        message.ecdsaCompact =
            object.ecdsaCompact !== undefined && object.ecdsaCompact !== null
                ? exports.Signature_ECDSACompact.fromPartial(object.ecdsaCompact)
                : undefined;
        return message;
    },
};
function createBaseSignature_ECDSACompact() {
    return { bytes: new Uint8Array(), recovery: 0 };
}
exports.Signature_ECDSACompact = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.bytes.length !== 0) {
            writer.uint32(10).bytes(message.bytes);
        }
        if (message.recovery !== 0) {
            writer.uint32(16).uint32(message.recovery);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseSignature_ECDSACompact();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.bytes = reader.bytes();
                    break;
                case 2:
                    message.recovery = reader.uint32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            bytes: isSet(object.bytes)
                ? bytesFromBase64(object.bytes)
                : new Uint8Array(),
            recovery: isSet(object.recovery) ? Number(object.recovery) : 0,
        };
    },
    toJSON(message) {
        const obj = {};
        message.bytes !== undefined &&
            (obj.bytes = base64FromBytes(message.bytes !== undefined ? message.bytes : new Uint8Array()));
        message.recovery !== undefined &&
            (obj.recovery = Math.round(message.recovery));
        return obj;
    },
    fromPartial(object) {
        var _a, _b;
        const message = createBaseSignature_ECDSACompact();
        message.bytes = (_a = object.bytes) !== null && _a !== void 0 ? _a : new Uint8Array();
        message.recovery = (_b = object.recovery) !== null && _b !== void 0 ? _b : 0;
        return message;
    },
};
function createBasePublicKey() {
    return {
        timestamp: 0,
        signature: undefined,
        secp256k1Uncompressed: undefined,
    };
}
exports.PublicKey = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.timestamp !== 0) {
            writer.uint32(8).uint64(message.timestamp);
        }
        if (message.signature !== undefined) {
            exports.Signature.encode(message.signature, writer.uint32(18).fork()).ldelim();
        }
        if (message.secp256k1Uncompressed !== undefined) {
            exports.PublicKey_Secp256k1Uncompressed.encode(message.secp256k1Uncompressed, writer.uint32(26).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBasePublicKey();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.timestamp = longToNumber(reader.uint64());
                    break;
                case 2:
                    message.signature = exports.Signature.decode(reader, reader.uint32());
                    break;
                case 3:
                    message.secp256k1Uncompressed =
                        exports.PublicKey_Secp256k1Uncompressed.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            timestamp: isSet(object.timestamp) ? Number(object.timestamp) : 0,
            signature: isSet(object.signature)
                ? exports.Signature.fromJSON(object.signature)
                : undefined,
            secp256k1Uncompressed: isSet(object.secp256k1Uncompressed)
                ? exports.PublicKey_Secp256k1Uncompressed.fromJSON(object.secp256k1Uncompressed)
                : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        message.timestamp !== undefined &&
            (obj.timestamp = Math.round(message.timestamp));
        message.signature !== undefined &&
            (obj.signature = message.signature
                ? exports.Signature.toJSON(message.signature)
                : undefined);
        message.secp256k1Uncompressed !== undefined &&
            (obj.secp256k1Uncompressed = message.secp256k1Uncompressed
                ? exports.PublicKey_Secp256k1Uncompressed.toJSON(message.secp256k1Uncompressed)
                : undefined);
        return obj;
    },
    fromPartial(object) {
        var _a;
        const message = createBasePublicKey();
        message.timestamp = (_a = object.timestamp) !== null && _a !== void 0 ? _a : 0;
        message.signature =
            object.signature !== undefined && object.signature !== null
                ? exports.Signature.fromPartial(object.signature)
                : undefined;
        message.secp256k1Uncompressed =
            object.secp256k1Uncompressed !== undefined &&
                object.secp256k1Uncompressed !== null
                ? exports.PublicKey_Secp256k1Uncompressed.fromPartial(object.secp256k1Uncompressed)
                : undefined;
        return message;
    },
};
function createBasePublicKey_Secp256k1Uncompressed() {
    return { bytes: new Uint8Array() };
}
exports.PublicKey_Secp256k1Uncompressed = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.bytes.length !== 0) {
            writer.uint32(10).bytes(message.bytes);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBasePublicKey_Secp256k1Uncompressed();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.bytes = reader.bytes();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            bytes: isSet(object.bytes)
                ? bytesFromBase64(object.bytes)
                : new Uint8Array(),
        };
    },
    toJSON(message) {
        const obj = {};
        message.bytes !== undefined &&
            (obj.bytes = base64FromBytes(message.bytes !== undefined ? message.bytes : new Uint8Array()));
        return obj;
    },
    fromPartial(object) {
        var _a;
        const message = createBasePublicKey_Secp256k1Uncompressed();
        message.bytes = (_a = object.bytes) !== null && _a !== void 0 ? _a : new Uint8Array();
        return message;
    },
};
function createBasePublicKeyBundle() {
    return { identityKey: undefined, preKey: undefined };
}
exports.PublicKeyBundle = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.identityKey !== undefined) {
            exports.PublicKey.encode(message.identityKey, writer.uint32(10).fork()).ldelim();
        }
        if (message.preKey !== undefined) {
            exports.PublicKey.encode(message.preKey, writer.uint32(18).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBasePublicKeyBundle();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.identityKey = exports.PublicKey.decode(reader, reader.uint32());
                    break;
                case 2:
                    message.preKey = exports.PublicKey.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            identityKey: isSet(object.identityKey)
                ? exports.PublicKey.fromJSON(object.identityKey)
                : undefined,
            preKey: isSet(object.preKey)
                ? exports.PublicKey.fromJSON(object.preKey)
                : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        message.identityKey !== undefined &&
            (obj.identityKey = message.identityKey
                ? exports.PublicKey.toJSON(message.identityKey)
                : undefined);
        message.preKey !== undefined &&
            (obj.preKey = message.preKey
                ? exports.PublicKey.toJSON(message.preKey)
                : undefined);
        return obj;
    },
    fromPartial(object) {
        const message = createBasePublicKeyBundle();
        message.identityKey =
            object.identityKey !== undefined && object.identityKey !== null
                ? exports.PublicKey.fromPartial(object.identityKey)
                : undefined;
        message.preKey =
            object.preKey !== undefined && object.preKey !== null
                ? exports.PublicKey.fromPartial(object.preKey)
                : undefined;
        return message;
    },
};
function createBaseContactBundleV1() {
    return { keyBundle: undefined };
}
exports.ContactBundleV1 = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.keyBundle !== undefined) {
            exports.PublicKeyBundle.encode(message.keyBundle, writer.uint32(10).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseContactBundleV1();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.keyBundle = exports.PublicKeyBundle.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            keyBundle: isSet(object.keyBundle)
                ? exports.PublicKeyBundle.fromJSON(object.keyBundle)
                : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        message.keyBundle !== undefined &&
            (obj.keyBundle = message.keyBundle
                ? exports.PublicKeyBundle.toJSON(message.keyBundle)
                : undefined);
        return obj;
    },
    fromPartial(object) {
        const message = createBaseContactBundleV1();
        message.keyBundle =
            object.keyBundle !== undefined && object.keyBundle !== null
                ? exports.PublicKeyBundle.fromPartial(object.keyBundle)
                : undefined;
        return message;
    },
};
function createBaseContactBundle() {
    return { v1: undefined };
}
exports.ContactBundle = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.v1 !== undefined) {
            exports.ContactBundleV1.encode(message.v1, writer.uint32(10).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseContactBundle();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.v1 = exports.ContactBundleV1.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            v1: isSet(object.v1) ? exports.ContactBundleV1.fromJSON(object.v1) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        message.v1 !== undefined &&
            (obj.v1 = message.v1 ? exports.ContactBundleV1.toJSON(message.v1) : undefined);
        return obj;
    },
    fromPartial(object) {
        const message = createBaseContactBundle();
        message.v1 =
            object.v1 !== undefined && object.v1 !== null
                ? exports.ContactBundleV1.fromPartial(object.v1)
                : undefined;
        return message;
    },
};
function createBaseContentTypeId() {
    return { authorityId: '', typeId: '', versionMajor: 0, versionMinor: 0 };
}
exports.ContentTypeId = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.authorityId !== '') {
            writer.uint32(10).string(message.authorityId);
        }
        if (message.typeId !== '') {
            writer.uint32(18).string(message.typeId);
        }
        if (message.versionMajor !== 0) {
            writer.uint32(24).uint32(message.versionMajor);
        }
        if (message.versionMinor !== 0) {
            writer.uint32(32).uint32(message.versionMinor);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseContentTypeId();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.authorityId = reader.string();
                    break;
                case 2:
                    message.typeId = reader.string();
                    break;
                case 3:
                    message.versionMajor = reader.uint32();
                    break;
                case 4:
                    message.versionMinor = reader.uint32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            authorityId: isSet(object.authorityId) ? String(object.authorityId) : '',
            typeId: isSet(object.typeId) ? String(object.typeId) : '',
            versionMajor: isSet(object.versionMajor)
                ? Number(object.versionMajor)
                : 0,
            versionMinor: isSet(object.versionMinor)
                ? Number(object.versionMinor)
                : 0,
        };
    },
    toJSON(message) {
        const obj = {};
        message.authorityId !== undefined && (obj.authorityId = message.authorityId);
        message.typeId !== undefined && (obj.typeId = message.typeId);
        message.versionMajor !== undefined &&
            (obj.versionMajor = Math.round(message.versionMajor));
        message.versionMinor !== undefined &&
            (obj.versionMinor = Math.round(message.versionMinor));
        return obj;
    },
    fromPartial(object) {
        var _a, _b, _c, _d;
        const message = createBaseContentTypeId();
        message.authorityId = (_a = object.authorityId) !== null && _a !== void 0 ? _a : '';
        message.typeId = (_b = object.typeId) !== null && _b !== void 0 ? _b : '';
        message.versionMajor = (_c = object.versionMajor) !== null && _c !== void 0 ? _c : 0;
        message.versionMinor = (_d = object.versionMinor) !== null && _d !== void 0 ? _d : 0;
        return message;
    },
};
function createBaseEncodedContent() {
    return {
        type: undefined,
        parameters: {},
        fallback: undefined,
        compression: undefined,
        content: new Uint8Array(),
    };
}
exports.EncodedContent = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.type !== undefined) {
            exports.ContentTypeId.encode(message.type, writer.uint32(10).fork()).ldelim();
        }
        Object.entries(message.parameters).forEach(([key, value]) => {
            exports.EncodedContent_ParametersEntry.encode({ key: key, value }, writer.uint32(18).fork()).ldelim();
        });
        if (message.fallback !== undefined) {
            writer.uint32(26).string(message.fallback);
        }
        if (message.compression !== undefined) {
            writer.uint32(40).int32(message.compression);
        }
        if (message.content.length !== 0) {
            writer.uint32(34).bytes(message.content);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseEncodedContent();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.type = exports.ContentTypeId.decode(reader, reader.uint32());
                    break;
                case 2:
                    const entry2 = exports.EncodedContent_ParametersEntry.decode(reader, reader.uint32());
                    if (entry2.value !== undefined) {
                        message.parameters[entry2.key] = entry2.value;
                    }
                    break;
                case 3:
                    message.fallback = reader.string();
                    break;
                case 5:
                    message.compression = reader.int32();
                    break;
                case 4:
                    message.content = reader.bytes();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            type: isSet(object.type)
                ? exports.ContentTypeId.fromJSON(object.type)
                : undefined,
            parameters: isObject(object.parameters)
                ? Object.entries(object.parameters).reduce((acc, [key, value]) => {
                    acc[key] = String(value);
                    return acc;
                }, {})
                : {},
            fallback: isSet(object.fallback) ? String(object.fallback) : undefined,
            compression: isSet(object.compression)
                ? compressionFromJSON(object.compression)
                : undefined,
            content: isSet(object.content)
                ? bytesFromBase64(object.content)
                : new Uint8Array(),
        };
    },
    toJSON(message) {
        const obj = {};
        message.type !== undefined &&
            (obj.type = message.type ? exports.ContentTypeId.toJSON(message.type) : undefined);
        obj.parameters = {};
        if (message.parameters) {
            Object.entries(message.parameters).forEach(([k, v]) => {
                obj.parameters[k] = v;
            });
        }
        message.fallback !== undefined && (obj.fallback = message.fallback);
        message.compression !== undefined &&
            (obj.compression =
                message.compression !== undefined
                    ? compressionToJSON(message.compression)
                    : undefined);
        message.content !== undefined &&
            (obj.content = base64FromBytes(message.content !== undefined ? message.content : new Uint8Array()));
        return obj;
    },
    fromPartial(object) {
        var _a, _b, _c, _d;
        const message = createBaseEncodedContent();
        message.type =
            object.type !== undefined && object.type !== null
                ? exports.ContentTypeId.fromPartial(object.type)
                : undefined;
        message.parameters = Object.entries((_a = object.parameters) !== null && _a !== void 0 ? _a : {}).reduce((acc, [key, value]) => {
            if (value !== undefined) {
                acc[key] = String(value);
            }
            return acc;
        }, {});
        message.fallback = (_b = object.fallback) !== null && _b !== void 0 ? _b : undefined;
        message.compression = (_c = object.compression) !== null && _c !== void 0 ? _c : undefined;
        message.content = (_d = object.content) !== null && _d !== void 0 ? _d : new Uint8Array();
        return message;
    },
};
function createBaseEncodedContent_ParametersEntry() {
    return { key: '', value: '' };
}
exports.EncodedContent_ParametersEntry = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.key !== '') {
            writer.uint32(10).string(message.key);
        }
        if (message.value !== '') {
            writer.uint32(18).string(message.value);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseEncodedContent_ParametersEntry();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.key = reader.string();
                    break;
                case 2:
                    message.value = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            key: isSet(object.key) ? String(object.key) : '',
            value: isSet(object.value) ? String(object.value) : '',
        };
    },
    toJSON(message) {
        const obj = {};
        message.key !== undefined && (obj.key = message.key);
        message.value !== undefined && (obj.value = message.value);
        return obj;
    },
    fromPartial(object) {
        var _a, _b;
        const message = createBaseEncodedContent_ParametersEntry();
        message.key = (_a = object.key) !== null && _a !== void 0 ? _a : '';
        message.value = (_b = object.value) !== null && _b !== void 0 ? _b : '';
        return message;
    },
};
function createBaseCiphertext() {
    return { aes256GcmHkdfSha256: undefined };
}
exports.Ciphertext = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.aes256GcmHkdfSha256 !== undefined) {
            exports.Ciphertext_aes256gcmHkdfsha256.encode(message.aes256GcmHkdfSha256, writer.uint32(10).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCiphertext();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.aes256GcmHkdfSha256 = exports.Ciphertext_aes256gcmHkdfsha256.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            aes256GcmHkdfSha256: isSet(object.aes256GcmHkdfSha256)
                ? exports.Ciphertext_aes256gcmHkdfsha256.fromJSON(object.aes256GcmHkdfSha256)
                : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        message.aes256GcmHkdfSha256 !== undefined &&
            (obj.aes256GcmHkdfSha256 = message.aes256GcmHkdfSha256
                ? exports.Ciphertext_aes256gcmHkdfsha256.toJSON(message.aes256GcmHkdfSha256)
                : undefined);
        return obj;
    },
    fromPartial(object) {
        const message = createBaseCiphertext();
        message.aes256GcmHkdfSha256 =
            object.aes256GcmHkdfSha256 !== undefined &&
                object.aes256GcmHkdfSha256 !== null
                ? exports.Ciphertext_aes256gcmHkdfsha256.fromPartial(object.aes256GcmHkdfSha256)
                : undefined;
        return message;
    },
};
function createBaseCiphertext_aes256gcmHkdfsha256() {
    return {
        hkdfSalt: new Uint8Array(),
        gcmNonce: new Uint8Array(),
        payload: new Uint8Array(),
    };
}
exports.Ciphertext_aes256gcmHkdfsha256 = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.hkdfSalt.length !== 0) {
            writer.uint32(10).bytes(message.hkdfSalt);
        }
        if (message.gcmNonce.length !== 0) {
            writer.uint32(18).bytes(message.gcmNonce);
        }
        if (message.payload.length !== 0) {
            writer.uint32(26).bytes(message.payload);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCiphertext_aes256gcmHkdfsha256();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.hkdfSalt = reader.bytes();
                    break;
                case 2:
                    message.gcmNonce = reader.bytes();
                    break;
                case 3:
                    message.payload = reader.bytes();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            hkdfSalt: isSet(object.hkdfSalt)
                ? bytesFromBase64(object.hkdfSalt)
                : new Uint8Array(),
            gcmNonce: isSet(object.gcmNonce)
                ? bytesFromBase64(object.gcmNonce)
                : new Uint8Array(),
            payload: isSet(object.payload)
                ? bytesFromBase64(object.payload)
                : new Uint8Array(),
        };
    },
    toJSON(message) {
        const obj = {};
        message.hkdfSalt !== undefined &&
            (obj.hkdfSalt = base64FromBytes(message.hkdfSalt !== undefined ? message.hkdfSalt : new Uint8Array()));
        message.gcmNonce !== undefined &&
            (obj.gcmNonce = base64FromBytes(message.gcmNonce !== undefined ? message.gcmNonce : new Uint8Array()));
        message.payload !== undefined &&
            (obj.payload = base64FromBytes(message.payload !== undefined ? message.payload : new Uint8Array()));
        return obj;
    },
    fromPartial(object) {
        var _a, _b, _c;
        const message = createBaseCiphertext_aes256gcmHkdfsha256();
        message.hkdfSalt = (_a = object.hkdfSalt) !== null && _a !== void 0 ? _a : new Uint8Array();
        message.gcmNonce = (_b = object.gcmNonce) !== null && _b !== void 0 ? _b : new Uint8Array();
        message.payload = (_c = object.payload) !== null && _c !== void 0 ? _c : new Uint8Array();
        return message;
    },
};
function createBaseMessageHeader() {
    return { sender: undefined, recipient: undefined, timestamp: 0 };
}
exports.MessageHeader = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.sender !== undefined) {
            exports.PublicKeyBundle.encode(message.sender, writer.uint32(10).fork()).ldelim();
        }
        if (message.recipient !== undefined) {
            exports.PublicKeyBundle.encode(message.recipient, writer.uint32(18).fork()).ldelim();
        }
        if (message.timestamp !== 0) {
            writer.uint32(24).uint64(message.timestamp);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseMessageHeader();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.sender = exports.PublicKeyBundle.decode(reader, reader.uint32());
                    break;
                case 2:
                    message.recipient = exports.PublicKeyBundle.decode(reader, reader.uint32());
                    break;
                case 3:
                    message.timestamp = longToNumber(reader.uint64());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            sender: isSet(object.sender)
                ? exports.PublicKeyBundle.fromJSON(object.sender)
                : undefined,
            recipient: isSet(object.recipient)
                ? exports.PublicKeyBundle.fromJSON(object.recipient)
                : undefined,
            timestamp: isSet(object.timestamp) ? Number(object.timestamp) : 0,
        };
    },
    toJSON(message) {
        const obj = {};
        message.sender !== undefined &&
            (obj.sender = message.sender
                ? exports.PublicKeyBundle.toJSON(message.sender)
                : undefined);
        message.recipient !== undefined &&
            (obj.recipient = message.recipient
                ? exports.PublicKeyBundle.toJSON(message.recipient)
                : undefined);
        message.timestamp !== undefined &&
            (obj.timestamp = Math.round(message.timestamp));
        return obj;
    },
    fromPartial(object) {
        var _a;
        const message = createBaseMessageHeader();
        message.sender =
            object.sender !== undefined && object.sender !== null
                ? exports.PublicKeyBundle.fromPartial(object.sender)
                : undefined;
        message.recipient =
            object.recipient !== undefined && object.recipient !== null
                ? exports.PublicKeyBundle.fromPartial(object.recipient)
                : undefined;
        message.timestamp = (_a = object.timestamp) !== null && _a !== void 0 ? _a : 0;
        return message;
    },
};
function createBaseV1Message() {
    return { headerBytes: new Uint8Array(), ciphertext: undefined };
}
exports.V1Message = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.headerBytes.length !== 0) {
            writer.uint32(10).bytes(message.headerBytes);
        }
        if (message.ciphertext !== undefined) {
            exports.Ciphertext.encode(message.ciphertext, writer.uint32(18).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseV1Message();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.headerBytes = reader.bytes();
                    break;
                case 2:
                    message.ciphertext = exports.Ciphertext.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            headerBytes: isSet(object.headerBytes)
                ? bytesFromBase64(object.headerBytes)
                : new Uint8Array(),
            ciphertext: isSet(object.ciphertext)
                ? exports.Ciphertext.fromJSON(object.ciphertext)
                : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        message.headerBytes !== undefined &&
            (obj.headerBytes = base64FromBytes(message.headerBytes !== undefined
                ? message.headerBytes
                : new Uint8Array()));
        message.ciphertext !== undefined &&
            (obj.ciphertext = message.ciphertext
                ? exports.Ciphertext.toJSON(message.ciphertext)
                : undefined);
        return obj;
    },
    fromPartial(object) {
        var _a;
        const message = createBaseV1Message();
        message.headerBytes = (_a = object.headerBytes) !== null && _a !== void 0 ? _a : new Uint8Array();
        message.ciphertext =
            object.ciphertext !== undefined && object.ciphertext !== null
                ? exports.Ciphertext.fromPartial(object.ciphertext)
                : undefined;
        return message;
    },
};
function createBaseMessage() {
    return { v1: undefined };
}
exports.Message = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.v1 !== undefined) {
            exports.V1Message.encode(message.v1, writer.uint32(10).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseMessage();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.v1 = exports.V1Message.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            v1: isSet(object.v1) ? exports.V1Message.fromJSON(object.v1) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        message.v1 !== undefined &&
            (obj.v1 = message.v1 ? exports.V1Message.toJSON(message.v1) : undefined);
        return obj;
    },
    fromPartial(object) {
        const message = createBaseMessage();
        message.v1 =
            object.v1 !== undefined && object.v1 !== null
                ? exports.V1Message.fromPartial(object.v1)
                : undefined;
        return message;
    },
};
var globalThis = (() => {
    if (typeof globalThis !== 'undefined')
        return globalThis;
    if (typeof self !== 'undefined')
        return self;
    if (typeof window !== 'undefined')
        return window;
    if (typeof global !== 'undefined')
        return global;
    throw 'Unable to locate global object';
})();
const atob = globalThis.atob ||
    ((b64) => globalThis.Buffer.from(b64, 'base64').toString('binary'));
function bytesFromBase64(b64) {
    const bin = atob(b64);
    const arr = new Uint8Array(bin.length);
    for (let i = 0; i < bin.length; ++i) {
        arr[i] = bin.charCodeAt(i);
    }
    return arr;
}
const btoa = globalThis.btoa ||
    ((bin) => globalThis.Buffer.from(bin, 'binary').toString('base64'));
function base64FromBytes(arr) {
    const bin = [];
    for (const byte of arr) {
        bin.push(String.fromCharCode(byte));
    }
    return btoa(bin.join(''));
}
function longToNumber(long) {
    if (long.gt(Number.MAX_SAFE_INTEGER)) {
        throw new globalThis.Error('Value is larger than Number.MAX_SAFE_INTEGER');
    }
    return long.toNumber();
}
if (minimal_1.default.util.Long !== long_1.default) {
    minimal_1.default.util.Long = long_1.default;
    minimal_1.default.configure();
}
function isObject(value) {
    return typeof value === 'object' && value !== null;
}
function isSet(value) {
    return value !== null && value !== undefined;
}
//# sourceMappingURL=messaging.js.map