"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.publishUserContact = exports.promiseWithTimeout = exports.sleep = exports.buildUserPrivateStoreTopic = exports.buildUserIntroTopic = exports.buildUserContactTopic = exports.buildDirectMessageTopic = exports.buildContentTopic = void 0;
const js_waku_1 = require("js-waku");
const ContactBundle_1 = __importDefault(require("./ContactBundle"));
const buildContentTopic = (name) => `/xmtp/0/${name}/proto`;
exports.buildContentTopic = buildContentTopic;
const buildDirectMessageTopic = (sender, recipient) => {
    const members = [sender, recipient];
    members.sort();
    return (0, exports.buildContentTopic)(`dm-${members.join('-')}`);
};
exports.buildDirectMessageTopic = buildDirectMessageTopic;
const buildUserContactTopic = (walletAddr) => {
    return (0, exports.buildContentTopic)(`contact-${walletAddr}`);
};
exports.buildUserContactTopic = buildUserContactTopic;
const buildUserIntroTopic = (walletAddr) => {
    return (0, exports.buildContentTopic)(`intro-${walletAddr}`);
};
exports.buildUserIntroTopic = buildUserIntroTopic;
const buildUserPrivateStoreTopic = (walletAddr) => {
    return (0, exports.buildContentTopic)(`privatestore-${walletAddr}`);
};
exports.buildUserPrivateStoreTopic = buildUserPrivateStoreTopic;
const sleep = (ms) => new Promise((resolve) => setTimeout(resolve, ms));
exports.sleep = sleep;
const promiseWithTimeout = (timeoutMs, promise, failureMessage) => {
    let timeoutHandle;
    const timeoutPromise = new Promise((_resolve, reject) => {
        timeoutHandle = setTimeout(() => reject(new Error(failureMessage)), timeoutMs);
    });
    return Promise.race([promise(), timeoutPromise]).then((result) => {
        clearTimeout(timeoutHandle);
        return result;
    });
};
exports.promiseWithTimeout = promiseWithTimeout;
function publishUserContact(waku, keys, address) {
    return __awaiter(this, void 0, void 0, function* () {
        const contactBundle = new ContactBundle_1.default(keys);
        yield waku.lightPush.push(yield js_waku_1.WakuMessage.fromBytes(contactBundle.toBytes(), (0, exports.buildUserContactTopic)(address)));
    });
}
exports.publishUserContact = publishUserContact;
//# sourceMappingURL=utils.js.map