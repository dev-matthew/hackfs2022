import * as proto from '../src/proto/messaging';
import { PublicKeyBundle } from './crypto';
import PublicKey from './crypto/PublicKey';
// ContactBundle packages all the infromation which a client uses to advertise on the network.
export default class ContactBundle {
    constructor(publicKeyBundle) {
        if (!publicKeyBundle) {
            throw new Error('missing keyBundle');
        }
        this.keyBundle = publicKeyBundle;
    }
    toBytes() {
        return this.keyBundle.toBytes();
    }
    static fromBytes(bytes) {
        const bundle = this.decodeV1(bytes);
        if (!bundle) {
            throw new Error('could not parse bundle');
        }
        if (!bundle.identityKey) {
            throw new Error('missing keyBundle');
        }
        if (!bundle.preKey) {
            throw new Error('missing pre-key');
        }
        return new ContactBundle(new PublicKeyBundle(new PublicKey(bundle.identityKey), new PublicKey(bundle.preKey)));
    }
    static decodeV1(bytes) {
        var _a;
        try {
            const b = proto.ContactBundle.decode(bytes);
            return (_a = b.v1) === null || _a === void 0 ? void 0 : _a.keyBundle;
        }
        catch (e) {
            if (e instanceof RangeError ||
                (e instanceof Error && e.message.startsWith('invalid wire type'))) {
                // Adds a default fallback for older versions of the proto (Which may also fail)
                try {
                    return proto.PublicKeyBundle.decode(bytes);
                }
                catch (e) {
                    throw new Error("Couldn't decode contact bundle: " + e);
                }
            }
        }
    }
}
//# sourceMappingURL=ContactBundle.js.map