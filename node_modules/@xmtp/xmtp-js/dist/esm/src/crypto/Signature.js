import * as proto from '../../src/proto/messaging';
import * as secp from '@noble/secp256k1';
import PublicKey from './PublicKey';
// Signature represents an ECDSA signature with recovery bit.
export default class Signature {
    constructor(obj) {
        if (!obj.ecdsaCompact) {
            throw new Error('invalid signature');
        }
        if (obj.ecdsaCompact.bytes.length !== 64) {
            throw new Error(`invalid signature length: ${obj.ecdsaCompact.bytes.length}`);
        }
        this.ecdsaCompact = obj.ecdsaCompact;
        if (obj.ecdsaCompact.recovery !== 0 && obj.ecdsaCompact.recovery !== 1) {
            throw new Error(`invalid recovery bit: ${obj.ecdsaCompact.recovery}`);
        }
        this.ecdsaCompact.recovery = obj.ecdsaCompact.recovery;
    }
    // Return the public key that validates this signature given the provided digest.
    // Return undefined if the signature is malformed.
    getPublicKey(digest) {
        if (!this.ecdsaCompact) {
            throw new Error('invalid signature');
        }
        const bytes = secp.recoverPublicKey(digest, this.ecdsaCompact.bytes, this.ecdsaCompact.recovery);
        return bytes
            ? new PublicKey({
                secp256k1Uncompressed: { bytes },
                timestamp: 0,
            })
            : undefined;
    }
    toBytes() {
        return proto.Signature.encode(this).finish();
    }
    static fromBytes(bytes) {
        return new Signature(proto.Signature.decode(bytes));
    }
}
//# sourceMappingURL=Signature.js.map