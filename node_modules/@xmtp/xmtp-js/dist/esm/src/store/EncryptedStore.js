var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
import { PrivateKeyBundle } from '../crypto';
const KEY_BUNDLE_NAME = 'key_bundle';
/**
 * EncryptedStore is an abstraction on top of the generic Store which enables the decryption and decoding
 * of specific data types.
 *
 * Currently supports:
 * - PrivateKeyBundle
 */
export default class EncryptedStore {
    constructor(signer, store) {
        this.signer = signer;
        this.store = store;
    }
    getStorageAddress(name) {
        return __awaiter(this, void 0, void 0, function* () {
            // I think we want to namespace the storage address by wallet
            // This will allow us to support switching between multiple wallets in the same browser
            const walletAddress = yield this.signer.getAddress();
            return `${walletAddress}/${name}`;
        });
    }
    // Retrieve a private key bundle for the active wallet address in the signer
    loadPrivateKeyBundle() {
        return __awaiter(this, void 0, void 0, function* () {
            const storageBuffer = yield this.store.get(yield this.getStorageAddress(KEY_BUNDLE_NAME));
            if (!storageBuffer) {
                return null;
            }
            return PrivateKeyBundle.decode(this.signer, Uint8Array.from(storageBuffer));
        });
    }
    // Store the private key bundle at an address generated based on the active wallet in the signer
    storePrivateKeyBundle(bundle) {
        return __awaiter(this, void 0, void 0, function* () {
            const keyAddress = yield this.getStorageAddress(KEY_BUNDLE_NAME);
            const encodedBundle = yield bundle.encode(this.signer);
            yield this.store.set(keyAddress, Buffer.from(encodedBundle));
        });
    }
}
//# sourceMappingURL=EncryptedStore.js.map