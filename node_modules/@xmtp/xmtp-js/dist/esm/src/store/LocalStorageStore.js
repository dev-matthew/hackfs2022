var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
// This will create a global localStorage object on Node.js for use in tests
// If we want to save some bytes from the bundle, we can have Webpack replace this with an empty module for the browser
import 'node-localstorage/register';
const KEY_PREFIX = '/xmtp/';
const ENCODING = 'binary';
export default class LocalStorageStore {
    constructor(keyPrefix = KEY_PREFIX) {
        this.keyPrefix = keyPrefix;
    }
    get(key) {
        return __awaiter(this, void 0, void 0, function* () {
            const storedString = localStorage.getItem(this.keyPrefix + key);
            return storedString === null ? null : Buffer.from(storedString, ENCODING);
        });
    }
    set(key, value) {
        return __awaiter(this, void 0, void 0, function* () {
            return localStorage.setItem(this.keyPrefix + key, value.toString(ENCODING));
        });
    }
}
//# sourceMappingURL=LocalStorageStore.js.map