var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
import { Wallet } from 'ethers';
import { PrivateKey, TextCodec, Client, } from '../src';
import { promiseWithTimeout } from '../src/utils';
import assert from 'assert';
const LOCAL_DOCKER_MULTIADDR = '/ip4/127.0.0.1/tcp/9001/ws/p2p/16Uiu2HAmNCxLZCkXNbpVPBpSSnHj9iq4HZQj7fxRzw2kj1kKSHHA';
const LOCAL_HOST_MULTIADDR = '/ip4/127.0.0.1/tcp/9002/ws/p2p/16Uiu2HAmNCxLZCkXNbpVPBpSSnHj9iq4HZQj7fxRzw2kj1kKSHHA';
export const sleep = (ms) => new Promise((resolve) => setTimeout(resolve, ms));
export function pollFor(callback, timeoutMs, delayMs) {
    return __awaiter(this, void 0, void 0, function* () {
        const started = Date.now();
        try {
            return yield callback();
        }
        catch (err) {
            if (delayMs) {
                yield sleep(delayMs);
            }
            const elapsedMs = Date.now() - started;
            const remainingTimeoutMs = timeoutMs - elapsedMs;
            if (remainingTimeoutMs <= 0) {
                throw new Error('timeout exceeded');
            }
            return yield pollFor(callback, remainingTimeoutMs, delayMs);
        }
    });
}
export function waitForUserContact(c1, c2) {
    return __awaiter(this, void 0, void 0, function* () {
        return pollFor(() => __awaiter(this, void 0, void 0, function* () {
            const contact = yield c1.getUserContactFromNetwork(c2.address);
            assert.ok(contact);
            return contact;
        }), 20000, 200);
    });
}
export function dumpStream(stream, timeoutMs = 1000) {
    return __awaiter(this, void 0, void 0, function* () {
        const messages = [];
        try {
            while (true) {
                const result = yield promiseWithTimeout(timeoutMs, () => stream.next(), 'timeout');
                if (result.done) {
                    break;
                }
                messages.push(result.value);
            }
        }
        catch (_a) {
        }
        finally {
            stream.return();
        }
        return messages;
    });
}
export function newWallet() {
    const key = PrivateKey.generate();
    if (!key.secp256k1) {
        throw new Error('invalid key');
    }
    return new Wallet(key.secp256k1.bytes);
}
// A helper to replace a full Client in testing custom content types,
// extracting just the codec registry aspect of the client.
export class CodecRegistry {
    constructor() {
        this._codecs = new Map();
        this.registerCodec(new TextCodec());
    }
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    registerCodec(codec) {
        const id = codec.contentType;
        const key = `${id.authorityId}/${id.typeId}`;
        this._codecs.set(key, codec);
    }
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    codecFor(contentType) {
        const key = `${contentType.authorityId}/${contentType.typeId}`;
        return this._codecs.get(key);
    }
}
// client running against local docker node,
// see dev/docker-compose
export const newLocalDockerClient = () => Client.create(newWallet(), {
    bootstrapAddrs: [LOCAL_DOCKER_MULTIADDR],
});
// client running against local node running on the host,
// see github.com/xmtp/xmtp-node-go/scripts/xmtp-js.sh
export const newLocalHostClient = () => Client.create(newWallet(), {
    bootstrapAddrs: [LOCAL_HOST_MULTIADDR],
});
// client running against the dev cluster in AWS
export const newDevClient = () => Client.create(newWallet(), { env: 'dev' });
//# sourceMappingURL=helpers.js.map