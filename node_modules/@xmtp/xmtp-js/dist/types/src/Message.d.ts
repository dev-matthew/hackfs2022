import * as proto from './proto/messaging';
import Ciphertext from './crypto/Ciphertext';
import { PublicKeyBundle, PrivateKeyBundle } from './crypto';
import { ContentTypeId } from './MessageContent';
export default class Message implements proto.V1Message {
    header: proto.MessageHeader;
    headerBytes: Uint8Array;
    ciphertext: Ciphertext;
    decrypted?: Uint8Array;
    contentType?: ContentTypeId;
    content?: any;
    error?: Error;
    /**
     * Identifier that is deterministically derived from the bytes of the message
     * header and ciphertext, where all those bytes are authenticated. This can
     * be used in determining uniqueness of messages.
     */
    id: string;
    private bytes;
    constructor(id: string, bytes: Uint8Array, obj: proto.Message, header: proto.MessageHeader);
    toBytes(): Uint8Array;
    static create(obj: proto.Message, header: proto.MessageHeader, bytes: Uint8Array): Promise<Message>;
    static fromBytes(bytes: Uint8Array): Promise<Message>;
    get sent(): Date | undefined;
    get senderAddress(): string | undefined;
    get recipientAddress(): string | undefined;
    static encode(sender: PrivateKeyBundle, recipient: PublicKeyBundle, message: Uint8Array, timestamp: Date): Promise<Message>;
    static decode(viewer: PrivateKeyBundle, bytes: Uint8Array): Promise<Message>;
}
