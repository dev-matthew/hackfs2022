import { WakuMessage } from 'js-waku';
import Message from './Message';
import Client from './Client';
export declare type MessageTransformer<T> = (msg: Message) => T;
export declare type MessageFilter = (msg: Message) => boolean;
/**
 * Stream implements an Asynchronous Iterable over messages received from a topic.
 * As such can be used with constructs like for-await-of, yield*, array destructing, etc.
 */
export default class Stream<T> {
    topic: string;
    client: Client;
    messages: T[];
    resolvers: ((value: IteratorResult<T>) => void)[];
    callback: ((wakuMsg: WakuMessage) => Promise<void>) | undefined;
    private _disconnectCallback?;
    unsubscribeFn?: () => Promise<void>;
    constructor(client: Client, topic: string, messageTransformer: MessageTransformer<T>, messageFilter?: MessageFilter);
    private newMessageCallback;
    private start;
    private listenForDisconnect;
    static create<T>(client: Client, topic: string, messageTransformer: MessageTransformer<T>, messageFilter?: MessageFilter): Promise<Stream<T>>;
    [Symbol.asyncIterator](): AsyncIterableIterator<T>;
    return(): Promise<IteratorResult<T>>;
    next(): Promise<IteratorResult<T>>;
}
