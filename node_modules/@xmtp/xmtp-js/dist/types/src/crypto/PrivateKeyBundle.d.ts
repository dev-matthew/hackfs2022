import * as proto from '../proto/private_key';
import PrivateKey from './PrivateKey';
import PublicKey from './PublicKey';
import PublicKeyBundle from './PublicKeyBundle';
import * as ethers from 'ethers';
export default class PrivateKeyBundle implements proto.PrivateKeyBundleV1 {
    identityKey: PrivateKey;
    preKeys: PrivateKey[];
    constructor(identityKey: PrivateKey, preKeys?: PrivateKey[]);
    static generate(wallet?: ethers.Signer): Promise<PrivateKeyBundle>;
    getCurrentPreKey(): PrivateKey;
    findPreKey(which: PublicKey): PrivateKey;
    addPreKey(): Promise<void>;
    getPublicKeyBundle(): PublicKeyBundle;
    sharedSecret(peer: PublicKeyBundle, myPreKey: PublicKey, isRecipient: boolean): Promise<Uint8Array>;
    static storageSigRequestText(preKey: Uint8Array): string;
    encode(wallet: ethers.Signer): Promise<Uint8Array>;
    static decode(wallet: ethers.Signer, bytes: Uint8Array): Promise<PrivateKeyBundle>;
}
