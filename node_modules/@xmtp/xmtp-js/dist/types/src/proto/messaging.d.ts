import _m0 from 'protobufjs/minimal';
export declare const protobufPackage = "";
/** Recognized compression algorithms */
export declare enum Compression {
    deflate = 0,
    gzip = 1,
    UNRECOGNIZED = -1
}
export declare function compressionFromJSON(object: any): Compression;
export declare function compressionToJSON(object: Compression): string;
/**
 * Signature represents a generalized public key signature,
 * defined as a union to support cryptographic algorithm agility.
 */
export interface Signature {
    ecdsaCompact: Signature_ECDSACompact | undefined;
}
export interface Signature_ECDSACompact {
    /** compact representation [ R || S ], 64 bytes */
    bytes: Uint8Array;
    /** recovery bit */
    recovery: number;
}
/**
 * PublicKey represents a generalized public key,
 * defined as a union to support cryptographic algorithm agility.
 */
export interface PublicKey {
    timestamp: number;
    signature?: Signature | undefined;
    secp256k1Uncompressed: PublicKey_Secp256k1Uncompressed | undefined;
}
export interface PublicKey_Secp256k1Uncompressed {
    /** uncompressed point with prefix (0x04) [ P || X || Y ], 65 bytes */
    bytes: Uint8Array;
}
/**
 * PublicKeyBundle packages the cryptographic keys associated with a wallet,
 * both senders and recipients are identified by their key bundles.
 */
export interface PublicKeyBundle {
    identityKey: PublicKey | undefined;
    preKey: PublicKey | undefined;
}
export interface ContactBundleV1 {
    keyBundle: PublicKeyBundle | undefined;
}
export interface ContactBundle {
    v1: ContactBundleV1 | undefined;
}
/** ContentTypeId is used to identify the type of content stored in a Message. */
export interface ContentTypeId {
    /** authority governing this content type */
    authorityId: string;
    /** type identifier */
    typeId: string;
    /** major version of the type */
    versionMajor: number;
    /** minor version of the type */
    versionMinor: number;
}
/**
 * EncodedContent is the type embedded in Ciphertext.payload bytes,
 * it bundles the encoded content with metadata identifying the type of content
 * and parameters required for correct decoding and presentation of the content.
 */
export interface EncodedContent {
    /** content type identifier used to match the payload with the correct decoding machinery */
    type: ContentTypeId | undefined;
    /** optional encoding parameters required to correctly decode the content */
    parameters: {
        [key: string]: string;
    };
    /**
     * optional fallback description of the content that can be used in case
     * the client cannot decode or render the content
     */
    fallback?: string | undefined;
    /** optional compression; the value indicates algorithm used to compress the encoded content bytes */
    compression?: Compression | undefined;
    /** encoded content itself */
    content: Uint8Array;
}
export interface EncodedContent_ParametersEntry {
    key: string;
    value: string;
}
/**
 * Ciphertext represents the payload of the message encoded and encrypted for transport.
 * It is definited as a union to support cryptographic algorithm agility.
 */
export interface Ciphertext {
    aes256GcmHkdfSha256: Ciphertext_aes256gcmHkdfsha256 | undefined;
}
export interface Ciphertext_aes256gcmHkdfsha256 {
    hkdfSalt: Uint8Array;
    gcmNonce: Uint8Array;
    /** payload MUST contain encoding of a EncodedContent message */
    payload: Uint8Array;
}
/**
 * MessageHeader is encoded separately as the bytes are also used
 * as associated data for authenticated encryption
 */
export interface MessageHeader {
    sender: PublicKeyBundle | undefined;
    recipient: PublicKeyBundle | undefined;
    timestamp: number;
}
/** Message is the top level protocol element */
export interface V1Message {
    /** encapsulates the encoded MessageHeader */
    headerBytes: Uint8Array;
    ciphertext: Ciphertext | undefined;
}
export interface Message {
    v1: V1Message | undefined;
}
export declare const Signature: {
    encode(message: Signature, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number | undefined): Signature;
    fromJSON(object: any): Signature;
    toJSON(message: Signature): unknown;
    fromPartial<I extends {
        ecdsaCompact?: {
            bytes?: Uint8Array | undefined;
            recovery?: number | undefined;
        } | undefined;
    } & {
        ecdsaCompact?: ({
            bytes?: Uint8Array | undefined;
            recovery?: number | undefined;
        } & {
            bytes?: Uint8Array | undefined;
            recovery?: number | undefined;
        } & Record<Exclude<keyof I["ecdsaCompact"], keyof Signature_ECDSACompact>, never>) | undefined;
    } & Record<Exclude<keyof I, "ecdsaCompact">, never>>(object: I): Signature;
};
export declare const Signature_ECDSACompact: {
    encode(message: Signature_ECDSACompact, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number | undefined): Signature_ECDSACompact;
    fromJSON(object: any): Signature_ECDSACompact;
    toJSON(message: Signature_ECDSACompact): unknown;
    fromPartial<I extends {
        bytes?: Uint8Array | undefined;
        recovery?: number | undefined;
    } & {
        bytes?: Uint8Array | undefined;
        recovery?: number | undefined;
    } & Record<Exclude<keyof I, keyof Signature_ECDSACompact>, never>>(object: I): Signature_ECDSACompact;
};
export declare const PublicKey: {
    encode(message: PublicKey, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number | undefined): PublicKey;
    fromJSON(object: any): PublicKey;
    toJSON(message: PublicKey): unknown;
    fromPartial<I extends {
        timestamp?: number | undefined;
        signature?: {
            ecdsaCompact?: {
                bytes?: Uint8Array | undefined;
                recovery?: number | undefined;
            } | undefined;
        } | undefined;
        secp256k1Uncompressed?: {
            bytes?: Uint8Array | undefined;
        } | undefined;
    } & {
        timestamp?: number | undefined;
        signature?: ({
            ecdsaCompact?: {
                bytes?: Uint8Array | undefined;
                recovery?: number | undefined;
            } | undefined;
        } & {
            ecdsaCompact?: ({
                bytes?: Uint8Array | undefined;
                recovery?: number | undefined;
            } & {
                bytes?: Uint8Array | undefined;
                recovery?: number | undefined;
            } & Record<Exclude<keyof I["signature"]["ecdsaCompact"], keyof Signature_ECDSACompact>, never>) | undefined;
        } & Record<Exclude<keyof I["signature"], "ecdsaCompact">, never>) | undefined;
        secp256k1Uncompressed?: ({
            bytes?: Uint8Array | undefined;
        } & {
            bytes?: Uint8Array | undefined;
        } & Record<Exclude<keyof I["secp256k1Uncompressed"], "bytes">, never>) | undefined;
    } & Record<Exclude<keyof I, keyof PublicKey>, never>>(object: I): PublicKey;
};
export declare const PublicKey_Secp256k1Uncompressed: {
    encode(message: PublicKey_Secp256k1Uncompressed, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number | undefined): PublicKey_Secp256k1Uncompressed;
    fromJSON(object: any): PublicKey_Secp256k1Uncompressed;
    toJSON(message: PublicKey_Secp256k1Uncompressed): unknown;
    fromPartial<I extends {
        bytes?: Uint8Array | undefined;
    } & {
        bytes?: Uint8Array | undefined;
    } & Record<Exclude<keyof I, "bytes">, never>>(object: I): PublicKey_Secp256k1Uncompressed;
};
export declare const PublicKeyBundle: {
    encode(message: PublicKeyBundle, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number | undefined): PublicKeyBundle;
    fromJSON(object: any): PublicKeyBundle;
    toJSON(message: PublicKeyBundle): unknown;
    fromPartial<I extends {
        identityKey?: {
            timestamp?: number | undefined;
            signature?: {
                ecdsaCompact?: {
                    bytes?: Uint8Array | undefined;
                    recovery?: number | undefined;
                } | undefined;
            } | undefined;
            secp256k1Uncompressed?: {
                bytes?: Uint8Array | undefined;
            } | undefined;
        } | undefined;
        preKey?: {
            timestamp?: number | undefined;
            signature?: {
                ecdsaCompact?: {
                    bytes?: Uint8Array | undefined;
                    recovery?: number | undefined;
                } | undefined;
            } | undefined;
            secp256k1Uncompressed?: {
                bytes?: Uint8Array | undefined;
            } | undefined;
        } | undefined;
    } & {
        identityKey?: ({
            timestamp?: number | undefined;
            signature?: {
                ecdsaCompact?: {
                    bytes?: Uint8Array | undefined;
                    recovery?: number | undefined;
                } | undefined;
            } | undefined;
            secp256k1Uncompressed?: {
                bytes?: Uint8Array | undefined;
            } | undefined;
        } & {
            timestamp?: number | undefined;
            signature?: ({
                ecdsaCompact?: {
                    bytes?: Uint8Array | undefined;
                    recovery?: number | undefined;
                } | undefined;
            } & {
                ecdsaCompact?: ({
                    bytes?: Uint8Array | undefined;
                    recovery?: number | undefined;
                } & {
                    bytes?: Uint8Array | undefined;
                    recovery?: number | undefined;
                } & Record<Exclude<keyof I["identityKey"]["signature"]["ecdsaCompact"], keyof Signature_ECDSACompact>, never>) | undefined;
            } & Record<Exclude<keyof I["identityKey"]["signature"], "ecdsaCompact">, never>) | undefined;
            secp256k1Uncompressed?: ({
                bytes?: Uint8Array | undefined;
            } & {
                bytes?: Uint8Array | undefined;
            } & Record<Exclude<keyof I["identityKey"]["secp256k1Uncompressed"], "bytes">, never>) | undefined;
        } & Record<Exclude<keyof I["identityKey"], keyof PublicKey>, never>) | undefined;
        preKey?: ({
            timestamp?: number | undefined;
            signature?: {
                ecdsaCompact?: {
                    bytes?: Uint8Array | undefined;
                    recovery?: number | undefined;
                } | undefined;
            } | undefined;
            secp256k1Uncompressed?: {
                bytes?: Uint8Array | undefined;
            } | undefined;
        } & {
            timestamp?: number | undefined;
            signature?: ({
                ecdsaCompact?: {
                    bytes?: Uint8Array | undefined;
                    recovery?: number | undefined;
                } | undefined;
            } & {
                ecdsaCompact?: ({
                    bytes?: Uint8Array | undefined;
                    recovery?: number | undefined;
                } & {
                    bytes?: Uint8Array | undefined;
                    recovery?: number | undefined;
                } & Record<Exclude<keyof I["preKey"]["signature"]["ecdsaCompact"], keyof Signature_ECDSACompact>, never>) | undefined;
            } & Record<Exclude<keyof I["preKey"]["signature"], "ecdsaCompact">, never>) | undefined;
            secp256k1Uncompressed?: ({
                bytes?: Uint8Array | undefined;
            } & {
                bytes?: Uint8Array | undefined;
            } & Record<Exclude<keyof I["preKey"]["secp256k1Uncompressed"], "bytes">, never>) | undefined;
        } & Record<Exclude<keyof I["preKey"], keyof PublicKey>, never>) | undefined;
    } & Record<Exclude<keyof I, keyof PublicKeyBundle>, never>>(object: I): PublicKeyBundle;
};
export declare const ContactBundleV1: {
    encode(message: ContactBundleV1, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number | undefined): ContactBundleV1;
    fromJSON(object: any): ContactBundleV1;
    toJSON(message: ContactBundleV1): unknown;
    fromPartial<I extends {
        keyBundle?: {
            identityKey?: {
                timestamp?: number | undefined;
                signature?: {
                    ecdsaCompact?: {
                        bytes?: Uint8Array | undefined;
                        recovery?: number | undefined;
                    } | undefined;
                } | undefined;
                secp256k1Uncompressed?: {
                    bytes?: Uint8Array | undefined;
                } | undefined;
            } | undefined;
            preKey?: {
                timestamp?: number | undefined;
                signature?: {
                    ecdsaCompact?: {
                        bytes?: Uint8Array | undefined;
                        recovery?: number | undefined;
                    } | undefined;
                } | undefined;
                secp256k1Uncompressed?: {
                    bytes?: Uint8Array | undefined;
                } | undefined;
            } | undefined;
        } | undefined;
    } & {
        keyBundle?: ({
            identityKey?: {
                timestamp?: number | undefined;
                signature?: {
                    ecdsaCompact?: {
                        bytes?: Uint8Array | undefined;
                        recovery?: number | undefined;
                    } | undefined;
                } | undefined;
                secp256k1Uncompressed?: {
                    bytes?: Uint8Array | undefined;
                } | undefined;
            } | undefined;
            preKey?: {
                timestamp?: number | undefined;
                signature?: {
                    ecdsaCompact?: {
                        bytes?: Uint8Array | undefined;
                        recovery?: number | undefined;
                    } | undefined;
                } | undefined;
                secp256k1Uncompressed?: {
                    bytes?: Uint8Array | undefined;
                } | undefined;
            } | undefined;
        } & {
            identityKey?: ({
                timestamp?: number | undefined;
                signature?: {
                    ecdsaCompact?: {
                        bytes?: Uint8Array | undefined;
                        recovery?: number | undefined;
                    } | undefined;
                } | undefined;
                secp256k1Uncompressed?: {
                    bytes?: Uint8Array | undefined;
                } | undefined;
            } & {
                timestamp?: number | undefined;
                signature?: ({
                    ecdsaCompact?: {
                        bytes?: Uint8Array | undefined;
                        recovery?: number | undefined;
                    } | undefined;
                } & {
                    ecdsaCompact?: ({
                        bytes?: Uint8Array | undefined;
                        recovery?: number | undefined;
                    } & {
                        bytes?: Uint8Array | undefined;
                        recovery?: number | undefined;
                    } & Record<Exclude<keyof I["keyBundle"]["identityKey"]["signature"]["ecdsaCompact"], keyof Signature_ECDSACompact>, never>) | undefined;
                } & Record<Exclude<keyof I["keyBundle"]["identityKey"]["signature"], "ecdsaCompact">, never>) | undefined;
                secp256k1Uncompressed?: ({
                    bytes?: Uint8Array | undefined;
                } & {
                    bytes?: Uint8Array | undefined;
                } & Record<Exclude<keyof I["keyBundle"]["identityKey"]["secp256k1Uncompressed"], "bytes">, never>) | undefined;
            } & Record<Exclude<keyof I["keyBundle"]["identityKey"], keyof PublicKey>, never>) | undefined;
            preKey?: ({
                timestamp?: number | undefined;
                signature?: {
                    ecdsaCompact?: {
                        bytes?: Uint8Array | undefined;
                        recovery?: number | undefined;
                    } | undefined;
                } | undefined;
                secp256k1Uncompressed?: {
                    bytes?: Uint8Array | undefined;
                } | undefined;
            } & {
                timestamp?: number | undefined;
                signature?: ({
                    ecdsaCompact?: {
                        bytes?: Uint8Array | undefined;
                        recovery?: number | undefined;
                    } | undefined;
                } & {
                    ecdsaCompact?: ({
                        bytes?: Uint8Array | undefined;
                        recovery?: number | undefined;
                    } & {
                        bytes?: Uint8Array | undefined;
                        recovery?: number | undefined;
                    } & Record<Exclude<keyof I["keyBundle"]["preKey"]["signature"]["ecdsaCompact"], keyof Signature_ECDSACompact>, never>) | undefined;
                } & Record<Exclude<keyof I["keyBundle"]["preKey"]["signature"], "ecdsaCompact">, never>) | undefined;
                secp256k1Uncompressed?: ({
                    bytes?: Uint8Array | undefined;
                } & {
                    bytes?: Uint8Array | undefined;
                } & Record<Exclude<keyof I["keyBundle"]["preKey"]["secp256k1Uncompressed"], "bytes">, never>) | undefined;
            } & Record<Exclude<keyof I["keyBundle"]["preKey"], keyof PublicKey>, never>) | undefined;
        } & Record<Exclude<keyof I["keyBundle"], keyof PublicKeyBundle>, never>) | undefined;
    } & Record<Exclude<keyof I, "keyBundle">, never>>(object: I): ContactBundleV1;
};
export declare const ContactBundle: {
    encode(message: ContactBundle, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number | undefined): ContactBundle;
    fromJSON(object: any): ContactBundle;
    toJSON(message: ContactBundle): unknown;
    fromPartial<I extends {
        v1?: {
            keyBundle?: {
                identityKey?: {
                    timestamp?: number | undefined;
                    signature?: {
                        ecdsaCompact?: {
                            bytes?: Uint8Array | undefined;
                            recovery?: number | undefined;
                        } | undefined;
                    } | undefined;
                    secp256k1Uncompressed?: {
                        bytes?: Uint8Array | undefined;
                    } | undefined;
                } | undefined;
                preKey?: {
                    timestamp?: number | undefined;
                    signature?: {
                        ecdsaCompact?: {
                            bytes?: Uint8Array | undefined;
                            recovery?: number | undefined;
                        } | undefined;
                    } | undefined;
                    secp256k1Uncompressed?: {
                        bytes?: Uint8Array | undefined;
                    } | undefined;
                } | undefined;
            } | undefined;
        } | undefined;
    } & {
        v1?: ({
            keyBundle?: {
                identityKey?: {
                    timestamp?: number | undefined;
                    signature?: {
                        ecdsaCompact?: {
                            bytes?: Uint8Array | undefined;
                            recovery?: number | undefined;
                        } | undefined;
                    } | undefined;
                    secp256k1Uncompressed?: {
                        bytes?: Uint8Array | undefined;
                    } | undefined;
                } | undefined;
                preKey?: {
                    timestamp?: number | undefined;
                    signature?: {
                        ecdsaCompact?: {
                            bytes?: Uint8Array | undefined;
                            recovery?: number | undefined;
                        } | undefined;
                    } | undefined;
                    secp256k1Uncompressed?: {
                        bytes?: Uint8Array | undefined;
                    } | undefined;
                } | undefined;
            } | undefined;
        } & {
            keyBundle?: ({
                identityKey?: {
                    timestamp?: number | undefined;
                    signature?: {
                        ecdsaCompact?: {
                            bytes?: Uint8Array | undefined;
                            recovery?: number | undefined;
                        } | undefined;
                    } | undefined;
                    secp256k1Uncompressed?: {
                        bytes?: Uint8Array | undefined;
                    } | undefined;
                } | undefined;
                preKey?: {
                    timestamp?: number | undefined;
                    signature?: {
                        ecdsaCompact?: {
                            bytes?: Uint8Array | undefined;
                            recovery?: number | undefined;
                        } | undefined;
                    } | undefined;
                    secp256k1Uncompressed?: {
                        bytes?: Uint8Array | undefined;
                    } | undefined;
                } | undefined;
            } & {
                identityKey?: ({
                    timestamp?: number | undefined;
                    signature?: {
                        ecdsaCompact?: {
                            bytes?: Uint8Array | undefined;
                            recovery?: number | undefined;
                        } | undefined;
                    } | undefined;
                    secp256k1Uncompressed?: {
                        bytes?: Uint8Array | undefined;
                    } | undefined;
                } & {
                    timestamp?: number | undefined;
                    signature?: ({
                        ecdsaCompact?: {
                            bytes?: Uint8Array | undefined;
                            recovery?: number | undefined;
                        } | undefined;
                    } & {
                        ecdsaCompact?: ({
                            bytes?: Uint8Array | undefined;
                            recovery?: number | undefined;
                        } & {
                            bytes?: Uint8Array | undefined;
                            recovery?: number | undefined;
                        } & Record<Exclude<keyof I["v1"]["keyBundle"]["identityKey"]["signature"]["ecdsaCompact"], keyof Signature_ECDSACompact>, never>) | undefined;
                    } & Record<Exclude<keyof I["v1"]["keyBundle"]["identityKey"]["signature"], "ecdsaCompact">, never>) | undefined;
                    secp256k1Uncompressed?: ({
                        bytes?: Uint8Array | undefined;
                    } & {
                        bytes?: Uint8Array | undefined;
                    } & Record<Exclude<keyof I["v1"]["keyBundle"]["identityKey"]["secp256k1Uncompressed"], "bytes">, never>) | undefined;
                } & Record<Exclude<keyof I["v1"]["keyBundle"]["identityKey"], keyof PublicKey>, never>) | undefined;
                preKey?: ({
                    timestamp?: number | undefined;
                    signature?: {
                        ecdsaCompact?: {
                            bytes?: Uint8Array | undefined;
                            recovery?: number | undefined;
                        } | undefined;
                    } | undefined;
                    secp256k1Uncompressed?: {
                        bytes?: Uint8Array | undefined;
                    } | undefined;
                } & {
                    timestamp?: number | undefined;
                    signature?: ({
                        ecdsaCompact?: {
                            bytes?: Uint8Array | undefined;
                            recovery?: number | undefined;
                        } | undefined;
                    } & {
                        ecdsaCompact?: ({
                            bytes?: Uint8Array | undefined;
                            recovery?: number | undefined;
                        } & {
                            bytes?: Uint8Array | undefined;
                            recovery?: number | undefined;
                        } & Record<Exclude<keyof I["v1"]["keyBundle"]["preKey"]["signature"]["ecdsaCompact"], keyof Signature_ECDSACompact>, never>) | undefined;
                    } & Record<Exclude<keyof I["v1"]["keyBundle"]["preKey"]["signature"], "ecdsaCompact">, never>) | undefined;
                    secp256k1Uncompressed?: ({
                        bytes?: Uint8Array | undefined;
                    } & {
                        bytes?: Uint8Array | undefined;
                    } & Record<Exclude<keyof I["v1"]["keyBundle"]["preKey"]["secp256k1Uncompressed"], "bytes">, never>) | undefined;
                } & Record<Exclude<keyof I["v1"]["keyBundle"]["preKey"], keyof PublicKey>, never>) | undefined;
            } & Record<Exclude<keyof I["v1"]["keyBundle"], keyof PublicKeyBundle>, never>) | undefined;
        } & Record<Exclude<keyof I["v1"], "keyBundle">, never>) | undefined;
    } & Record<Exclude<keyof I, "v1">, never>>(object: I): ContactBundle;
};
export declare const ContentTypeId: {
    encode(message: ContentTypeId, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number | undefined): ContentTypeId;
    fromJSON(object: any): ContentTypeId;
    toJSON(message: ContentTypeId): unknown;
    fromPartial<I extends {
        authorityId?: string | undefined;
        typeId?: string | undefined;
        versionMajor?: number | undefined;
        versionMinor?: number | undefined;
    } & {
        authorityId?: string | undefined;
        typeId?: string | undefined;
        versionMajor?: number | undefined;
        versionMinor?: number | undefined;
    } & Record<Exclude<keyof I, keyof ContentTypeId>, never>>(object: I): ContentTypeId;
};
export declare const EncodedContent: {
    encode(message: EncodedContent, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number | undefined): EncodedContent;
    fromJSON(object: any): EncodedContent;
    toJSON(message: EncodedContent): unknown;
    fromPartial<I extends {
        type?: {
            authorityId?: string | undefined;
            typeId?: string | undefined;
            versionMajor?: number | undefined;
            versionMinor?: number | undefined;
        } | undefined;
        parameters?: {
            [x: string]: string | undefined;
        } | undefined;
        fallback?: string | undefined;
        compression?: Compression | undefined;
        content?: Uint8Array | undefined;
    } & {
        type?: ({
            authorityId?: string | undefined;
            typeId?: string | undefined;
            versionMajor?: number | undefined;
            versionMinor?: number | undefined;
        } & {
            authorityId?: string | undefined;
            typeId?: string | undefined;
            versionMajor?: number | undefined;
            versionMinor?: number | undefined;
        } & Record<Exclude<keyof I["type"], keyof ContentTypeId>, never>) | undefined;
        parameters?: ({
            [x: string]: string | undefined;
        } & {
            [x: string]: string | undefined;
        } & Record<Exclude<keyof I["parameters"], string | number>, never>) | undefined;
        fallback?: string | undefined;
        compression?: Compression | undefined;
        content?: Uint8Array | undefined;
    } & Record<Exclude<keyof I, keyof EncodedContent>, never>>(object: I): EncodedContent;
};
export declare const EncodedContent_ParametersEntry: {
    encode(message: EncodedContent_ParametersEntry, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number | undefined): EncodedContent_ParametersEntry;
    fromJSON(object: any): EncodedContent_ParametersEntry;
    toJSON(message: EncodedContent_ParametersEntry): unknown;
    fromPartial<I extends {
        key?: string | undefined;
        value?: string | undefined;
    } & {
        key?: string | undefined;
        value?: string | undefined;
    } & Record<Exclude<keyof I, keyof EncodedContent_ParametersEntry>, never>>(object: I): EncodedContent_ParametersEntry;
};
export declare const Ciphertext: {
    encode(message: Ciphertext, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number | undefined): Ciphertext;
    fromJSON(object: any): Ciphertext;
    toJSON(message: Ciphertext): unknown;
    fromPartial<I extends {
        aes256GcmHkdfSha256?: {
            hkdfSalt?: Uint8Array | undefined;
            gcmNonce?: Uint8Array | undefined;
            payload?: Uint8Array | undefined;
        } | undefined;
    } & {
        aes256GcmHkdfSha256?: ({
            hkdfSalt?: Uint8Array | undefined;
            gcmNonce?: Uint8Array | undefined;
            payload?: Uint8Array | undefined;
        } & {
            hkdfSalt?: Uint8Array | undefined;
            gcmNonce?: Uint8Array | undefined;
            payload?: Uint8Array | undefined;
        } & Record<Exclude<keyof I["aes256GcmHkdfSha256"], keyof Ciphertext_aes256gcmHkdfsha256>, never>) | undefined;
    } & Record<Exclude<keyof I, "aes256GcmHkdfSha256">, never>>(object: I): Ciphertext;
};
export declare const Ciphertext_aes256gcmHkdfsha256: {
    encode(message: Ciphertext_aes256gcmHkdfsha256, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number | undefined): Ciphertext_aes256gcmHkdfsha256;
    fromJSON(object: any): Ciphertext_aes256gcmHkdfsha256;
    toJSON(message: Ciphertext_aes256gcmHkdfsha256): unknown;
    fromPartial<I extends {
        hkdfSalt?: Uint8Array | undefined;
        gcmNonce?: Uint8Array | undefined;
        payload?: Uint8Array | undefined;
    } & {
        hkdfSalt?: Uint8Array | undefined;
        gcmNonce?: Uint8Array | undefined;
        payload?: Uint8Array | undefined;
    } & Record<Exclude<keyof I, keyof Ciphertext_aes256gcmHkdfsha256>, never>>(object: I): Ciphertext_aes256gcmHkdfsha256;
};
export declare const MessageHeader: {
    encode(message: MessageHeader, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number | undefined): MessageHeader;
    fromJSON(object: any): MessageHeader;
    toJSON(message: MessageHeader): unknown;
    fromPartial<I extends {
        sender?: {
            identityKey?: {
                timestamp?: number | undefined;
                signature?: {
                    ecdsaCompact?: {
                        bytes?: Uint8Array | undefined;
                        recovery?: number | undefined;
                    } | undefined;
                } | undefined;
                secp256k1Uncompressed?: {
                    bytes?: Uint8Array | undefined;
                } | undefined;
            } | undefined;
            preKey?: {
                timestamp?: number | undefined;
                signature?: {
                    ecdsaCompact?: {
                        bytes?: Uint8Array | undefined;
                        recovery?: number | undefined;
                    } | undefined;
                } | undefined;
                secp256k1Uncompressed?: {
                    bytes?: Uint8Array | undefined;
                } | undefined;
            } | undefined;
        } | undefined;
        recipient?: {
            identityKey?: {
                timestamp?: number | undefined;
                signature?: {
                    ecdsaCompact?: {
                        bytes?: Uint8Array | undefined;
                        recovery?: number | undefined;
                    } | undefined;
                } | undefined;
                secp256k1Uncompressed?: {
                    bytes?: Uint8Array | undefined;
                } | undefined;
            } | undefined;
            preKey?: {
                timestamp?: number | undefined;
                signature?: {
                    ecdsaCompact?: {
                        bytes?: Uint8Array | undefined;
                        recovery?: number | undefined;
                    } | undefined;
                } | undefined;
                secp256k1Uncompressed?: {
                    bytes?: Uint8Array | undefined;
                } | undefined;
            } | undefined;
        } | undefined;
        timestamp?: number | undefined;
    } & {
        sender?: ({
            identityKey?: {
                timestamp?: number | undefined;
                signature?: {
                    ecdsaCompact?: {
                        bytes?: Uint8Array | undefined;
                        recovery?: number | undefined;
                    } | undefined;
                } | undefined;
                secp256k1Uncompressed?: {
                    bytes?: Uint8Array | undefined;
                } | undefined;
            } | undefined;
            preKey?: {
                timestamp?: number | undefined;
                signature?: {
                    ecdsaCompact?: {
                        bytes?: Uint8Array | undefined;
                        recovery?: number | undefined;
                    } | undefined;
                } | undefined;
                secp256k1Uncompressed?: {
                    bytes?: Uint8Array | undefined;
                } | undefined;
            } | undefined;
        } & {
            identityKey?: ({
                timestamp?: number | undefined;
                signature?: {
                    ecdsaCompact?: {
                        bytes?: Uint8Array | undefined;
                        recovery?: number | undefined;
                    } | undefined;
                } | undefined;
                secp256k1Uncompressed?: {
                    bytes?: Uint8Array | undefined;
                } | undefined;
            } & {
                timestamp?: number | undefined;
                signature?: ({
                    ecdsaCompact?: {
                        bytes?: Uint8Array | undefined;
                        recovery?: number | undefined;
                    } | undefined;
                } & {
                    ecdsaCompact?: ({
                        bytes?: Uint8Array | undefined;
                        recovery?: number | undefined;
                    } & {
                        bytes?: Uint8Array | undefined;
                        recovery?: number | undefined;
                    } & Record<Exclude<keyof I["sender"]["identityKey"]["signature"]["ecdsaCompact"], keyof Signature_ECDSACompact>, never>) | undefined;
                } & Record<Exclude<keyof I["sender"]["identityKey"]["signature"], "ecdsaCompact">, never>) | undefined;
                secp256k1Uncompressed?: ({
                    bytes?: Uint8Array | undefined;
                } & {
                    bytes?: Uint8Array | undefined;
                } & Record<Exclude<keyof I["sender"]["identityKey"]["secp256k1Uncompressed"], "bytes">, never>) | undefined;
            } & Record<Exclude<keyof I["sender"]["identityKey"], keyof PublicKey>, never>) | undefined;
            preKey?: ({
                timestamp?: number | undefined;
                signature?: {
                    ecdsaCompact?: {
                        bytes?: Uint8Array | undefined;
                        recovery?: number | undefined;
                    } | undefined;
                } | undefined;
                secp256k1Uncompressed?: {
                    bytes?: Uint8Array | undefined;
                } | undefined;
            } & {
                timestamp?: number | undefined;
                signature?: ({
                    ecdsaCompact?: {
                        bytes?: Uint8Array | undefined;
                        recovery?: number | undefined;
                    } | undefined;
                } & {
                    ecdsaCompact?: ({
                        bytes?: Uint8Array | undefined;
                        recovery?: number | undefined;
                    } & {
                        bytes?: Uint8Array | undefined;
                        recovery?: number | undefined;
                    } & Record<Exclude<keyof I["sender"]["preKey"]["signature"]["ecdsaCompact"], keyof Signature_ECDSACompact>, never>) | undefined;
                } & Record<Exclude<keyof I["sender"]["preKey"]["signature"], "ecdsaCompact">, never>) | undefined;
                secp256k1Uncompressed?: ({
                    bytes?: Uint8Array | undefined;
                } & {
                    bytes?: Uint8Array | undefined;
                } & Record<Exclude<keyof I["sender"]["preKey"]["secp256k1Uncompressed"], "bytes">, never>) | undefined;
            } & Record<Exclude<keyof I["sender"]["preKey"], keyof PublicKey>, never>) | undefined;
        } & Record<Exclude<keyof I["sender"], keyof PublicKeyBundle>, never>) | undefined;
        recipient?: ({
            identityKey?: {
                timestamp?: number | undefined;
                signature?: {
                    ecdsaCompact?: {
                        bytes?: Uint8Array | undefined;
                        recovery?: number | undefined;
                    } | undefined;
                } | undefined;
                secp256k1Uncompressed?: {
                    bytes?: Uint8Array | undefined;
                } | undefined;
            } | undefined;
            preKey?: {
                timestamp?: number | undefined;
                signature?: {
                    ecdsaCompact?: {
                        bytes?: Uint8Array | undefined;
                        recovery?: number | undefined;
                    } | undefined;
                } | undefined;
                secp256k1Uncompressed?: {
                    bytes?: Uint8Array | undefined;
                } | undefined;
            } | undefined;
        } & {
            identityKey?: ({
                timestamp?: number | undefined;
                signature?: {
                    ecdsaCompact?: {
                        bytes?: Uint8Array | undefined;
                        recovery?: number | undefined;
                    } | undefined;
                } | undefined;
                secp256k1Uncompressed?: {
                    bytes?: Uint8Array | undefined;
                } | undefined;
            } & {
                timestamp?: number | undefined;
                signature?: ({
                    ecdsaCompact?: {
                        bytes?: Uint8Array | undefined;
                        recovery?: number | undefined;
                    } | undefined;
                } & {
                    ecdsaCompact?: ({
                        bytes?: Uint8Array | undefined;
                        recovery?: number | undefined;
                    } & {
                        bytes?: Uint8Array | undefined;
                        recovery?: number | undefined;
                    } & Record<Exclude<keyof I["recipient"]["identityKey"]["signature"]["ecdsaCompact"], keyof Signature_ECDSACompact>, never>) | undefined;
                } & Record<Exclude<keyof I["recipient"]["identityKey"]["signature"], "ecdsaCompact">, never>) | undefined;
                secp256k1Uncompressed?: ({
                    bytes?: Uint8Array | undefined;
                } & {
                    bytes?: Uint8Array | undefined;
                } & Record<Exclude<keyof I["recipient"]["identityKey"]["secp256k1Uncompressed"], "bytes">, never>) | undefined;
            } & Record<Exclude<keyof I["recipient"]["identityKey"], keyof PublicKey>, never>) | undefined;
            preKey?: ({
                timestamp?: number | undefined;
                signature?: {
                    ecdsaCompact?: {
                        bytes?: Uint8Array | undefined;
                        recovery?: number | undefined;
                    } | undefined;
                } | undefined;
                secp256k1Uncompressed?: {
                    bytes?: Uint8Array | undefined;
                } | undefined;
            } & {
                timestamp?: number | undefined;
                signature?: ({
                    ecdsaCompact?: {
                        bytes?: Uint8Array | undefined;
                        recovery?: number | undefined;
                    } | undefined;
                } & {
                    ecdsaCompact?: ({
                        bytes?: Uint8Array | undefined;
                        recovery?: number | undefined;
                    } & {
                        bytes?: Uint8Array | undefined;
                        recovery?: number | undefined;
                    } & Record<Exclude<keyof I["recipient"]["preKey"]["signature"]["ecdsaCompact"], keyof Signature_ECDSACompact>, never>) | undefined;
                } & Record<Exclude<keyof I["recipient"]["preKey"]["signature"], "ecdsaCompact">, never>) | undefined;
                secp256k1Uncompressed?: ({
                    bytes?: Uint8Array | undefined;
                } & {
                    bytes?: Uint8Array | undefined;
                } & Record<Exclude<keyof I["recipient"]["preKey"]["secp256k1Uncompressed"], "bytes">, never>) | undefined;
            } & Record<Exclude<keyof I["recipient"]["preKey"], keyof PublicKey>, never>) | undefined;
        } & Record<Exclude<keyof I["recipient"], keyof PublicKeyBundle>, never>) | undefined;
        timestamp?: number | undefined;
    } & Record<Exclude<keyof I, keyof MessageHeader>, never>>(object: I): MessageHeader;
};
export declare const V1Message: {
    encode(message: V1Message, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number | undefined): V1Message;
    fromJSON(object: any): V1Message;
    toJSON(message: V1Message): unknown;
    fromPartial<I extends {
        headerBytes?: Uint8Array | undefined;
        ciphertext?: {
            aes256GcmHkdfSha256?: {
                hkdfSalt?: Uint8Array | undefined;
                gcmNonce?: Uint8Array | undefined;
                payload?: Uint8Array | undefined;
            } | undefined;
        } | undefined;
    } & {
        headerBytes?: Uint8Array | undefined;
        ciphertext?: ({
            aes256GcmHkdfSha256?: {
                hkdfSalt?: Uint8Array | undefined;
                gcmNonce?: Uint8Array | undefined;
                payload?: Uint8Array | undefined;
            } | undefined;
        } & {
            aes256GcmHkdfSha256?: ({
                hkdfSalt?: Uint8Array | undefined;
                gcmNonce?: Uint8Array | undefined;
                payload?: Uint8Array | undefined;
            } & {
                hkdfSalt?: Uint8Array | undefined;
                gcmNonce?: Uint8Array | undefined;
                payload?: Uint8Array | undefined;
            } & Record<Exclude<keyof I["ciphertext"]["aes256GcmHkdfSha256"], keyof Ciphertext_aes256gcmHkdfsha256>, never>) | undefined;
        } & Record<Exclude<keyof I["ciphertext"], "aes256GcmHkdfSha256">, never>) | undefined;
    } & Record<Exclude<keyof I, keyof V1Message>, never>>(object: I): V1Message;
};
export declare const Message: {
    encode(message: Message, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number | undefined): Message;
    fromJSON(object: any): Message;
    toJSON(message: Message): unknown;
    fromPartial<I extends {
        v1?: {
            headerBytes?: Uint8Array | undefined;
            ciphertext?: {
                aes256GcmHkdfSha256?: {
                    hkdfSalt?: Uint8Array | undefined;
                    gcmNonce?: Uint8Array | undefined;
                    payload?: Uint8Array | undefined;
                } | undefined;
            } | undefined;
        } | undefined;
    } & {
        v1?: ({
            headerBytes?: Uint8Array | undefined;
            ciphertext?: {
                aes256GcmHkdfSha256?: {
                    hkdfSalt?: Uint8Array | undefined;
                    gcmNonce?: Uint8Array | undefined;
                    payload?: Uint8Array | undefined;
                } | undefined;
            } | undefined;
        } & {
            headerBytes?: Uint8Array | undefined;
            ciphertext?: ({
                aes256GcmHkdfSha256?: {
                    hkdfSalt?: Uint8Array | undefined;
                    gcmNonce?: Uint8Array | undefined;
                    payload?: Uint8Array | undefined;
                } | undefined;
            } & {
                aes256GcmHkdfSha256?: ({
                    hkdfSalt?: Uint8Array | undefined;
                    gcmNonce?: Uint8Array | undefined;
                    payload?: Uint8Array | undefined;
                } & {
                    hkdfSalt?: Uint8Array | undefined;
                    gcmNonce?: Uint8Array | undefined;
                    payload?: Uint8Array | undefined;
                } & Record<Exclude<keyof I["v1"]["ciphertext"]["aes256GcmHkdfSha256"], keyof Ciphertext_aes256gcmHkdfsha256>, never>) | undefined;
            } & Record<Exclude<keyof I["v1"]["ciphertext"], "aes256GcmHkdfSha256">, never>) | undefined;
        } & Record<Exclude<keyof I["v1"], keyof V1Message>, never>) | undefined;
    } & Record<Exclude<keyof I, "v1">, never>>(object: I): Message;
};
declare type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;
export declare type DeepPartial<T> = T extends Builtin ? T : T extends Array<infer U> ? Array<DeepPartial<U>> : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>> : T extends {} ? {
    [K in keyof T]?: DeepPartial<T[K]>;
} : Partial<T>;
declare type KeysOfUnion<T> = T extends T ? keyof T : never;
export declare type Exact<P, I extends P> = P extends Builtin ? P : P & {
    [K in keyof P]: Exact<P[K], I[K]>;
} & Record<Exclude<keyof I, KeysOfUnion<P>>, never>;
export {};
