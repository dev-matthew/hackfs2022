import _m0 from 'protobufjs/minimal';
import { PublicKey, Ciphertext } from './messaging';
export declare const protobufPackage = "";
export interface PrivateKey {
    timestamp: number;
    secp256k1: PrivateKey_Secp256k1 | undefined;
    publicKey: PublicKey | undefined;
}
export interface PrivateKey_Secp256k1 {
    /** D big-endian, 32 bytes */
    bytes: Uint8Array;
}
export interface PrivateKeyBundleV1 {
    identityKey: PrivateKey | undefined;
    preKeys: PrivateKey[];
}
export interface PrivateKeyBundle {
    v1: PrivateKeyBundleV1 | undefined;
}
export interface EncryptedPrivateKeyBundleV1 {
    walletPreKey: Uint8Array;
    ciphertext: Ciphertext | undefined;
}
export interface EncryptedPrivateKeyBundle {
    v1: EncryptedPrivateKeyBundleV1 | undefined;
}
export declare const PrivateKey: {
    encode(message: PrivateKey, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number | undefined): PrivateKey;
    fromJSON(object: any): PrivateKey;
    toJSON(message: PrivateKey): unknown;
    fromPartial<I extends {
        timestamp?: number | undefined;
        secp256k1?: {
            bytes?: Uint8Array | undefined;
        } | undefined;
        publicKey?: {
            timestamp?: number | undefined;
            signature?: {
                ecdsaCompact?: {
                    bytes?: Uint8Array | undefined;
                    recovery?: number | undefined;
                } | undefined;
            } | undefined;
            secp256k1Uncompressed?: {
                bytes?: Uint8Array | undefined;
            } | undefined;
        } | undefined;
    } & {
        timestamp?: number | undefined;
        secp256k1?: ({
            bytes?: Uint8Array | undefined;
        } & {
            bytes?: Uint8Array | undefined;
        } & Record<Exclude<keyof I["secp256k1"], "bytes">, never>) | undefined;
        publicKey?: ({
            timestamp?: number | undefined;
            signature?: {
                ecdsaCompact?: {
                    bytes?: Uint8Array | undefined;
                    recovery?: number | undefined;
                } | undefined;
            } | undefined;
            secp256k1Uncompressed?: {
                bytes?: Uint8Array | undefined;
            } | undefined;
        } & {
            timestamp?: number | undefined;
            signature?: ({
                ecdsaCompact?: {
                    bytes?: Uint8Array | undefined;
                    recovery?: number | undefined;
                } | undefined;
            } & {
                ecdsaCompact?: ({
                    bytes?: Uint8Array | undefined;
                    recovery?: number | undefined;
                } & {
                    bytes?: Uint8Array | undefined;
                    recovery?: number | undefined;
                } & Record<Exclude<keyof I["publicKey"]["signature"]["ecdsaCompact"], keyof import("./messaging").Signature_ECDSACompact>, never>) | undefined;
            } & Record<Exclude<keyof I["publicKey"]["signature"], "ecdsaCompact">, never>) | undefined;
            secp256k1Uncompressed?: ({
                bytes?: Uint8Array | undefined;
            } & {
                bytes?: Uint8Array | undefined;
            } & Record<Exclude<keyof I["publicKey"]["secp256k1Uncompressed"], "bytes">, never>) | undefined;
        } & Record<Exclude<keyof I["publicKey"], keyof PublicKey>, never>) | undefined;
    } & Record<Exclude<keyof I, keyof PrivateKey>, never>>(object: I): PrivateKey;
};
export declare const PrivateKey_Secp256k1: {
    encode(message: PrivateKey_Secp256k1, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number | undefined): PrivateKey_Secp256k1;
    fromJSON(object: any): PrivateKey_Secp256k1;
    toJSON(message: PrivateKey_Secp256k1): unknown;
    fromPartial<I extends {
        bytes?: Uint8Array | undefined;
    } & {
        bytes?: Uint8Array | undefined;
    } & Record<Exclude<keyof I, "bytes">, never>>(object: I): PrivateKey_Secp256k1;
};
export declare const PrivateKeyBundleV1: {
    encode(message: PrivateKeyBundleV1, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number | undefined): PrivateKeyBundleV1;
    fromJSON(object: any): PrivateKeyBundleV1;
    toJSON(message: PrivateKeyBundleV1): unknown;
    fromPartial<I extends {
        identityKey?: {
            timestamp?: number | undefined;
            secp256k1?: {
                bytes?: Uint8Array | undefined;
            } | undefined;
            publicKey?: {
                timestamp?: number | undefined;
                signature?: {
                    ecdsaCompact?: {
                        bytes?: Uint8Array | undefined;
                        recovery?: number | undefined;
                    } | undefined;
                } | undefined;
                secp256k1Uncompressed?: {
                    bytes?: Uint8Array | undefined;
                } | undefined;
            } | undefined;
        } | undefined;
        preKeys?: {
            timestamp?: number | undefined;
            secp256k1?: {
                bytes?: Uint8Array | undefined;
            } | undefined;
            publicKey?: {
                timestamp?: number | undefined;
                signature?: {
                    ecdsaCompact?: {
                        bytes?: Uint8Array | undefined;
                        recovery?: number | undefined;
                    } | undefined;
                } | undefined;
                secp256k1Uncompressed?: {
                    bytes?: Uint8Array | undefined;
                } | undefined;
            } | undefined;
        }[] | undefined;
    } & {
        identityKey?: ({
            timestamp?: number | undefined;
            secp256k1?: {
                bytes?: Uint8Array | undefined;
            } | undefined;
            publicKey?: {
                timestamp?: number | undefined;
                signature?: {
                    ecdsaCompact?: {
                        bytes?: Uint8Array | undefined;
                        recovery?: number | undefined;
                    } | undefined;
                } | undefined;
                secp256k1Uncompressed?: {
                    bytes?: Uint8Array | undefined;
                } | undefined;
            } | undefined;
        } & {
            timestamp?: number | undefined;
            secp256k1?: ({
                bytes?: Uint8Array | undefined;
            } & {
                bytes?: Uint8Array | undefined;
            } & Record<Exclude<keyof I["identityKey"]["secp256k1"], "bytes">, never>) | undefined;
            publicKey?: ({
                timestamp?: number | undefined;
                signature?: {
                    ecdsaCompact?: {
                        bytes?: Uint8Array | undefined;
                        recovery?: number | undefined;
                    } | undefined;
                } | undefined;
                secp256k1Uncompressed?: {
                    bytes?: Uint8Array | undefined;
                } | undefined;
            } & {
                timestamp?: number | undefined;
                signature?: ({
                    ecdsaCompact?: {
                        bytes?: Uint8Array | undefined;
                        recovery?: number | undefined;
                    } | undefined;
                } & {
                    ecdsaCompact?: ({
                        bytes?: Uint8Array | undefined;
                        recovery?: number | undefined;
                    } & {
                        bytes?: Uint8Array | undefined;
                        recovery?: number | undefined;
                    } & Record<Exclude<keyof I["identityKey"]["publicKey"]["signature"]["ecdsaCompact"], keyof import("./messaging").Signature_ECDSACompact>, never>) | undefined;
                } & Record<Exclude<keyof I["identityKey"]["publicKey"]["signature"], "ecdsaCompact">, never>) | undefined;
                secp256k1Uncompressed?: ({
                    bytes?: Uint8Array | undefined;
                } & {
                    bytes?: Uint8Array | undefined;
                } & Record<Exclude<keyof I["identityKey"]["publicKey"]["secp256k1Uncompressed"], "bytes">, never>) | undefined;
            } & Record<Exclude<keyof I["identityKey"]["publicKey"], keyof PublicKey>, never>) | undefined;
        } & Record<Exclude<keyof I["identityKey"], keyof PrivateKey>, never>) | undefined;
        preKeys?: ({
            timestamp?: number | undefined;
            secp256k1?: {
                bytes?: Uint8Array | undefined;
            } | undefined;
            publicKey?: {
                timestamp?: number | undefined;
                signature?: {
                    ecdsaCompact?: {
                        bytes?: Uint8Array | undefined;
                        recovery?: number | undefined;
                    } | undefined;
                } | undefined;
                secp256k1Uncompressed?: {
                    bytes?: Uint8Array | undefined;
                } | undefined;
            } | undefined;
        }[] & ({
            timestamp?: number | undefined;
            secp256k1?: {
                bytes?: Uint8Array | undefined;
            } | undefined;
            publicKey?: {
                timestamp?: number | undefined;
                signature?: {
                    ecdsaCompact?: {
                        bytes?: Uint8Array | undefined;
                        recovery?: number | undefined;
                    } | undefined;
                } | undefined;
                secp256k1Uncompressed?: {
                    bytes?: Uint8Array | undefined;
                } | undefined;
            } | undefined;
        } & {
            timestamp?: number | undefined;
            secp256k1?: ({
                bytes?: Uint8Array | undefined;
            } & {
                bytes?: Uint8Array | undefined;
            } & Record<Exclude<keyof I["preKeys"][number]["secp256k1"], "bytes">, never>) | undefined;
            publicKey?: ({
                timestamp?: number | undefined;
                signature?: {
                    ecdsaCompact?: {
                        bytes?: Uint8Array | undefined;
                        recovery?: number | undefined;
                    } | undefined;
                } | undefined;
                secp256k1Uncompressed?: {
                    bytes?: Uint8Array | undefined;
                } | undefined;
            } & {
                timestamp?: number | undefined;
                signature?: ({
                    ecdsaCompact?: {
                        bytes?: Uint8Array | undefined;
                        recovery?: number | undefined;
                    } | undefined;
                } & {
                    ecdsaCompact?: ({
                        bytes?: Uint8Array | undefined;
                        recovery?: number | undefined;
                    } & {
                        bytes?: Uint8Array | undefined;
                        recovery?: number | undefined;
                    } & Record<Exclude<keyof I["preKeys"][number]["publicKey"]["signature"]["ecdsaCompact"], keyof import("./messaging").Signature_ECDSACompact>, never>) | undefined;
                } & Record<Exclude<keyof I["preKeys"][number]["publicKey"]["signature"], "ecdsaCompact">, never>) | undefined;
                secp256k1Uncompressed?: ({
                    bytes?: Uint8Array | undefined;
                } & {
                    bytes?: Uint8Array | undefined;
                } & Record<Exclude<keyof I["preKeys"][number]["publicKey"]["secp256k1Uncompressed"], "bytes">, never>) | undefined;
            } & Record<Exclude<keyof I["preKeys"][number]["publicKey"], keyof PublicKey>, never>) | undefined;
        } & Record<Exclude<keyof I["preKeys"][number], keyof PrivateKey>, never>)[] & Record<Exclude<keyof I["preKeys"], keyof {
            timestamp?: number | undefined;
            secp256k1?: {
                bytes?: Uint8Array | undefined;
            } | undefined;
            publicKey?: {
                timestamp?: number | undefined;
                signature?: {
                    ecdsaCompact?: {
                        bytes?: Uint8Array | undefined;
                        recovery?: number | undefined;
                    } | undefined;
                } | undefined;
                secp256k1Uncompressed?: {
                    bytes?: Uint8Array | undefined;
                } | undefined;
            } | undefined;
        }[]>, never>) | undefined;
    } & Record<Exclude<keyof I, keyof PrivateKeyBundleV1>, never>>(object: I): PrivateKeyBundleV1;
};
export declare const PrivateKeyBundle: {
    encode(message: PrivateKeyBundle, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number | undefined): PrivateKeyBundle;
    fromJSON(object: any): PrivateKeyBundle;
    toJSON(message: PrivateKeyBundle): unknown;
    fromPartial<I extends {
        v1?: {
            identityKey?: {
                timestamp?: number | undefined;
                secp256k1?: {
                    bytes?: Uint8Array | undefined;
                } | undefined;
                publicKey?: {
                    timestamp?: number | undefined;
                    signature?: {
                        ecdsaCompact?: {
                            bytes?: Uint8Array | undefined;
                            recovery?: number | undefined;
                        } | undefined;
                    } | undefined;
                    secp256k1Uncompressed?: {
                        bytes?: Uint8Array | undefined;
                    } | undefined;
                } | undefined;
            } | undefined;
            preKeys?: {
                timestamp?: number | undefined;
                secp256k1?: {
                    bytes?: Uint8Array | undefined;
                } | undefined;
                publicKey?: {
                    timestamp?: number | undefined;
                    signature?: {
                        ecdsaCompact?: {
                            bytes?: Uint8Array | undefined;
                            recovery?: number | undefined;
                        } | undefined;
                    } | undefined;
                    secp256k1Uncompressed?: {
                        bytes?: Uint8Array | undefined;
                    } | undefined;
                } | undefined;
            }[] | undefined;
        } | undefined;
    } & {
        v1?: ({
            identityKey?: {
                timestamp?: number | undefined;
                secp256k1?: {
                    bytes?: Uint8Array | undefined;
                } | undefined;
                publicKey?: {
                    timestamp?: number | undefined;
                    signature?: {
                        ecdsaCompact?: {
                            bytes?: Uint8Array | undefined;
                            recovery?: number | undefined;
                        } | undefined;
                    } | undefined;
                    secp256k1Uncompressed?: {
                        bytes?: Uint8Array | undefined;
                    } | undefined;
                } | undefined;
            } | undefined;
            preKeys?: {
                timestamp?: number | undefined;
                secp256k1?: {
                    bytes?: Uint8Array | undefined;
                } | undefined;
                publicKey?: {
                    timestamp?: number | undefined;
                    signature?: {
                        ecdsaCompact?: {
                            bytes?: Uint8Array | undefined;
                            recovery?: number | undefined;
                        } | undefined;
                    } | undefined;
                    secp256k1Uncompressed?: {
                        bytes?: Uint8Array | undefined;
                    } | undefined;
                } | undefined;
            }[] | undefined;
        } & {
            identityKey?: ({
                timestamp?: number | undefined;
                secp256k1?: {
                    bytes?: Uint8Array | undefined;
                } | undefined;
                publicKey?: {
                    timestamp?: number | undefined;
                    signature?: {
                        ecdsaCompact?: {
                            bytes?: Uint8Array | undefined;
                            recovery?: number | undefined;
                        } | undefined;
                    } | undefined;
                    secp256k1Uncompressed?: {
                        bytes?: Uint8Array | undefined;
                    } | undefined;
                } | undefined;
            } & {
                timestamp?: number | undefined;
                secp256k1?: ({
                    bytes?: Uint8Array | undefined;
                } & {
                    bytes?: Uint8Array | undefined;
                } & Record<Exclude<keyof I["v1"]["identityKey"]["secp256k1"], "bytes">, never>) | undefined;
                publicKey?: ({
                    timestamp?: number | undefined;
                    signature?: {
                        ecdsaCompact?: {
                            bytes?: Uint8Array | undefined;
                            recovery?: number | undefined;
                        } | undefined;
                    } | undefined;
                    secp256k1Uncompressed?: {
                        bytes?: Uint8Array | undefined;
                    } | undefined;
                } & {
                    timestamp?: number | undefined;
                    signature?: ({
                        ecdsaCompact?: {
                            bytes?: Uint8Array | undefined;
                            recovery?: number | undefined;
                        } | undefined;
                    } & {
                        ecdsaCompact?: ({
                            bytes?: Uint8Array | undefined;
                            recovery?: number | undefined;
                        } & {
                            bytes?: Uint8Array | undefined;
                            recovery?: number | undefined;
                        } & Record<Exclude<keyof I["v1"]["identityKey"]["publicKey"]["signature"]["ecdsaCompact"], keyof import("./messaging").Signature_ECDSACompact>, never>) | undefined;
                    } & Record<Exclude<keyof I["v1"]["identityKey"]["publicKey"]["signature"], "ecdsaCompact">, never>) | undefined;
                    secp256k1Uncompressed?: ({
                        bytes?: Uint8Array | undefined;
                    } & {
                        bytes?: Uint8Array | undefined;
                    } & Record<Exclude<keyof I["v1"]["identityKey"]["publicKey"]["secp256k1Uncompressed"], "bytes">, never>) | undefined;
                } & Record<Exclude<keyof I["v1"]["identityKey"]["publicKey"], keyof PublicKey>, never>) | undefined;
            } & Record<Exclude<keyof I["v1"]["identityKey"], keyof PrivateKey>, never>) | undefined;
            preKeys?: ({
                timestamp?: number | undefined;
                secp256k1?: {
                    bytes?: Uint8Array | undefined;
                } | undefined;
                publicKey?: {
                    timestamp?: number | undefined;
                    signature?: {
                        ecdsaCompact?: {
                            bytes?: Uint8Array | undefined;
                            recovery?: number | undefined;
                        } | undefined;
                    } | undefined;
                    secp256k1Uncompressed?: {
                        bytes?: Uint8Array | undefined;
                    } | undefined;
                } | undefined;
            }[] & ({
                timestamp?: number | undefined;
                secp256k1?: {
                    bytes?: Uint8Array | undefined;
                } | undefined;
                publicKey?: {
                    timestamp?: number | undefined;
                    signature?: {
                        ecdsaCompact?: {
                            bytes?: Uint8Array | undefined;
                            recovery?: number | undefined;
                        } | undefined;
                    } | undefined;
                    secp256k1Uncompressed?: {
                        bytes?: Uint8Array | undefined;
                    } | undefined;
                } | undefined;
            } & {
                timestamp?: number | undefined;
                secp256k1?: ({
                    bytes?: Uint8Array | undefined;
                } & {
                    bytes?: Uint8Array | undefined;
                } & Record<Exclude<keyof I["v1"]["preKeys"][number]["secp256k1"], "bytes">, never>) | undefined;
                publicKey?: ({
                    timestamp?: number | undefined;
                    signature?: {
                        ecdsaCompact?: {
                            bytes?: Uint8Array | undefined;
                            recovery?: number | undefined;
                        } | undefined;
                    } | undefined;
                    secp256k1Uncompressed?: {
                        bytes?: Uint8Array | undefined;
                    } | undefined;
                } & {
                    timestamp?: number | undefined;
                    signature?: ({
                        ecdsaCompact?: {
                            bytes?: Uint8Array | undefined;
                            recovery?: number | undefined;
                        } | undefined;
                    } & {
                        ecdsaCompact?: ({
                            bytes?: Uint8Array | undefined;
                            recovery?: number | undefined;
                        } & {
                            bytes?: Uint8Array | undefined;
                            recovery?: number | undefined;
                        } & Record<Exclude<keyof I["v1"]["preKeys"][number]["publicKey"]["signature"]["ecdsaCompact"], keyof import("./messaging").Signature_ECDSACompact>, never>) | undefined;
                    } & Record<Exclude<keyof I["v1"]["preKeys"][number]["publicKey"]["signature"], "ecdsaCompact">, never>) | undefined;
                    secp256k1Uncompressed?: ({
                        bytes?: Uint8Array | undefined;
                    } & {
                        bytes?: Uint8Array | undefined;
                    } & Record<Exclude<keyof I["v1"]["preKeys"][number]["publicKey"]["secp256k1Uncompressed"], "bytes">, never>) | undefined;
                } & Record<Exclude<keyof I["v1"]["preKeys"][number]["publicKey"], keyof PublicKey>, never>) | undefined;
            } & Record<Exclude<keyof I["v1"]["preKeys"][number], keyof PrivateKey>, never>)[] & Record<Exclude<keyof I["v1"]["preKeys"], keyof {
                timestamp?: number | undefined;
                secp256k1?: {
                    bytes?: Uint8Array | undefined;
                } | undefined;
                publicKey?: {
                    timestamp?: number | undefined;
                    signature?: {
                        ecdsaCompact?: {
                            bytes?: Uint8Array | undefined;
                            recovery?: number | undefined;
                        } | undefined;
                    } | undefined;
                    secp256k1Uncompressed?: {
                        bytes?: Uint8Array | undefined;
                    } | undefined;
                } | undefined;
            }[]>, never>) | undefined;
        } & Record<Exclude<keyof I["v1"], keyof PrivateKeyBundleV1>, never>) | undefined;
    } & Record<Exclude<keyof I, "v1">, never>>(object: I): PrivateKeyBundle;
};
export declare const EncryptedPrivateKeyBundleV1: {
    encode(message: EncryptedPrivateKeyBundleV1, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number | undefined): EncryptedPrivateKeyBundleV1;
    fromJSON(object: any): EncryptedPrivateKeyBundleV1;
    toJSON(message: EncryptedPrivateKeyBundleV1): unknown;
    fromPartial<I extends {
        walletPreKey?: Uint8Array | undefined;
        ciphertext?: {
            aes256GcmHkdfSha256?: {
                hkdfSalt?: Uint8Array | undefined;
                gcmNonce?: Uint8Array | undefined;
                payload?: Uint8Array | undefined;
            } | undefined;
        } | undefined;
    } & {
        walletPreKey?: Uint8Array | undefined;
        ciphertext?: ({
            aes256GcmHkdfSha256?: {
                hkdfSalt?: Uint8Array | undefined;
                gcmNonce?: Uint8Array | undefined;
                payload?: Uint8Array | undefined;
            } | undefined;
        } & {
            aes256GcmHkdfSha256?: ({
                hkdfSalt?: Uint8Array | undefined;
                gcmNonce?: Uint8Array | undefined;
                payload?: Uint8Array | undefined;
            } & {
                hkdfSalt?: Uint8Array | undefined;
                gcmNonce?: Uint8Array | undefined;
                payload?: Uint8Array | undefined;
            } & Record<Exclude<keyof I["ciphertext"]["aes256GcmHkdfSha256"], keyof import("./messaging").Ciphertext_aes256gcmHkdfsha256>, never>) | undefined;
        } & Record<Exclude<keyof I["ciphertext"], "aes256GcmHkdfSha256">, never>) | undefined;
    } & Record<Exclude<keyof I, keyof EncryptedPrivateKeyBundleV1>, never>>(object: I): EncryptedPrivateKeyBundleV1;
};
export declare const EncryptedPrivateKeyBundle: {
    encode(message: EncryptedPrivateKeyBundle, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number | undefined): EncryptedPrivateKeyBundle;
    fromJSON(object: any): EncryptedPrivateKeyBundle;
    toJSON(message: EncryptedPrivateKeyBundle): unknown;
    fromPartial<I extends {
        v1?: {
            walletPreKey?: Uint8Array | undefined;
            ciphertext?: {
                aes256GcmHkdfSha256?: {
                    hkdfSalt?: Uint8Array | undefined;
                    gcmNonce?: Uint8Array | undefined;
                    payload?: Uint8Array | undefined;
                } | undefined;
            } | undefined;
        } | undefined;
    } & {
        v1?: ({
            walletPreKey?: Uint8Array | undefined;
            ciphertext?: {
                aes256GcmHkdfSha256?: {
                    hkdfSalt?: Uint8Array | undefined;
                    gcmNonce?: Uint8Array | undefined;
                    payload?: Uint8Array | undefined;
                } | undefined;
            } | undefined;
        } & {
            walletPreKey?: Uint8Array | undefined;
            ciphertext?: ({
                aes256GcmHkdfSha256?: {
                    hkdfSalt?: Uint8Array | undefined;
                    gcmNonce?: Uint8Array | undefined;
                    payload?: Uint8Array | undefined;
                } | undefined;
            } & {
                aes256GcmHkdfSha256?: ({
                    hkdfSalt?: Uint8Array | undefined;
                    gcmNonce?: Uint8Array | undefined;
                    payload?: Uint8Array | undefined;
                } & {
                    hkdfSalt?: Uint8Array | undefined;
                    gcmNonce?: Uint8Array | undefined;
                    payload?: Uint8Array | undefined;
                } & Record<Exclude<keyof I["v1"]["ciphertext"]["aes256GcmHkdfSha256"], keyof import("./messaging").Ciphertext_aes256gcmHkdfsha256>, never>) | undefined;
            } & Record<Exclude<keyof I["v1"]["ciphertext"], "aes256GcmHkdfSha256">, never>) | undefined;
        } & Record<Exclude<keyof I["v1"], keyof EncryptedPrivateKeyBundleV1>, never>) | undefined;
    } & Record<Exclude<keyof I, "v1">, never>>(object: I): EncryptedPrivateKeyBundle;
};
declare type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;
export declare type DeepPartial<T> = T extends Builtin ? T : T extends Array<infer U> ? Array<DeepPartial<U>> : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>> : T extends {} ? {
    [K in keyof T]?: DeepPartial<T[K]>;
} : Partial<T>;
declare type KeysOfUnion<T> = T extends T ? keyof T : never;
export declare type Exact<P, I extends P> = P extends Builtin ? P : P & {
    [K in keyof P]: Exact<P[K], I[K]>;
} & Record<Exclude<keyof I, KeysOfUnion<P>>, never>;
export {};
