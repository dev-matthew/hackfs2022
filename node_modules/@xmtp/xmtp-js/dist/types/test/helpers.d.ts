import { Wallet } from 'ethers';
import { Message, ContentCodec, ContentTypeId, Client } from '../src';
import Stream from '../src/Stream';
import { PublicKeyBundle } from '../src/proto/messaging';
export declare const sleep: (ms: number) => Promise<void>;
export declare function pollFor<T>(callback: () => Promise<T>, timeoutMs: number, delayMs: number): Promise<T>;
export declare function waitForUserContact(c1: Client, c2: Client): Promise<PublicKeyBundle | undefined>;
export declare function dumpStream(stream: Stream<Message>, timeoutMs?: number): Promise<Message[]>;
export declare function newWallet(): Wallet;
export declare class CodecRegistry {
    private _codecs;
    constructor();
    registerCodec(codec: ContentCodec<any>): void;
    codecFor(contentType: ContentTypeId): ContentCodec<any> | undefined;
}
export declare const newLocalDockerClient: () => Promise<Client>;
export declare const newLocalHostClient: () => Promise<Client>;
export declare const newDevClient: () => Promise<Client>;
