import { Packet } from 'dns-packet';
import { IncomingMessage } from 'http';

export interface Options {
  /* Set of endpoints to lookup doh queries.  */
  endpoints?: 'doh' | 'dns' | Iterable<Endpoint | EndpointProps | string>;
  /* Amount of retry's if a request fails, defaults to 5 */
  retries?: number;
  /* Timeout for a single request in milliseconds, defaults to 30000 */
  timeout?: number;
  /* Signal to abort the request */
  signal?: AbortSignal;
}

export class Endpoint {
  /* https is the default for DoH endpoints, udp4:/upd6: for regular dns endpoints and http for debug only! defaults to https: */
  protocol?: 'http:' | 'https:' | 'udp4:' | 'udp6:';
  /* Host to look up */
  host: string;
  /* Path, prefixed with /, defaults to /dns-query for the http/https protocol, ignored for udp */
  path?: string;
  /* https port, defaults to 443 for https, 80 for http and 53 for udp*/
  port?: number;
  /* true, if endpoint is known to log requests, defaults to false */
  log?: boolean;
  /* true, if endpoint supports http/https CORS headers, defaults to false */
  cors?: boolean;
  /* true, if endpoint is known to filters/redirects DNS packets, defaults to false */
  filter?: boolean;
  /* link to documentation, if available */
  docs?: string;
  /* Known geographical location */
  location?: string;
  /* Method to request in case of http/https, defaults to GET */
  method?: 'post' | 'Post' | 'POST' | 'get' | 'Get' | 'GET';
  constructor(data: EndpointProps);
}

export type EndpointProps = Omit<Endpoint, ''>;
export type Response = undefined | XMLHttpRequest | IncomingMessage;

export function query(packet: Packet, options?: Options): Promise<Packet & {
  endpoint: Endpoint;
  response: Response;
}>;

export class AbortError extends Error {
  constructor();
  code: 'ABORT_ERR';
  name: 'AbortError';
}
export class HTTPStatusError extends Error {
  constructor(uri: string, status: number, method: string);
  uri: string;
  status: number;
  method: 'POST' | 'GET';
  code: 'HTTP_STATUS';
  name: 'StatusError';
  response: Response;
  endpoint: Endpoint;
}
export class ResponseError extends Error {
  constructor(message: string)
  code: 'RESPONSE_ERR';
  name: 'ResponseError';
  response: Response;
  endpoint: Endpoint;
}
export class TimeoutError extends Error {
  constructor(timeout: number)
  timeout: number;
  code: 'ETIMEOUT';
  name: 'TimeoutError';
}
export function parseEndpoints(endpoints?: Iterable<Endpoint | EndpointProps | string>): Endpoint[];
export const endpoints: {
  cloudflare: Endpoint;
  cloudflareFamily: Endpoint;
  cloudflareSecurity: Endpoint;
  cloudflareEth: Endpoint;
  aAndA: Endpoint;
  usablePrivacy: Endpoint;
  adguard: Endpoint;
  adguardFamily: Endpoint;
  adguardUnfiltered: Endpoint;
  ahadnsIn: Endpoint;
  ahadnsIt: Endpoint;
  ahadnsEs: Endpoint;
  ahadnsNo: Endpoint;
  ahadnsNl: Endpoint;
  ahadnsPl: Endpoint;
  ahadnsNy: Endpoint;
  ahadnsChi: Endpoint;
  ahadnsAu: Endpoint;
  ahadnsLa: Endpoint;
  alidns: Endpoint;
  amsNl: Endpoint;
  amsSe: Endpoint;
  amsEs: Endpoint;
  arapurayil: Endpoint;
  digitaleGesellschaft: Endpoint;
  dnsForFamily: Endpoint;
  dnsHome: Endpoint;
  blahDnsCh: Endpoint;
  blahDnsJp: Endpoint;
  blahDnsDe: Endpoint;
  blahDnsFi: Endpoint;
  cleanBrowsingSecurity: Endpoint;
  cleanBrowsingFamily: Endpoint;
  cleanBrowsingAdult: Endpoint;
  appliedPrivacy: Endpoint;
  ffmuc: Endpoint;
  tiarap: Endpoint;
  tiarapJp: Endpoint;
  google: Endpoint;
  he: Endpoint;
  iij: Endpoint;
  libredns: Endpoint;
  librednsAds: Endpoint;
  njalla: Endpoint;
  opendns: Endpoint;
  opendnsFamily: Endpoint;
  sebyVultr: Endpoint;
  sebyOVH: Endpoint;
  quad9: Endpoint;
  quad9Ads: Endpoint;
  switchCh: Endpoint;
  yepdns: Endpoint;
  lavaDnsEU1: Endpoint;
  controlId: Endpoint;
  controlIdMw: Endpoint;
  controlIdAds: Endpoint;
  controlIdSoc: Endpoint;
  uncensoredAny: Endpoint;
  uncensoredUni: Endpoint;
  dnssbGlobal: Endpoint;
  dbssbDeDus: Endpoint;
  dnssbDeFra: Endpoint;
  dnssbNlAms: Endpoint;
  dnssbNlAms2: Endpoint;
  dnssbEeTll: Endpoint;
  dnssbJpKix: Endpoint;
  dnssbHkHkg: Endpoint;
  dnssbAuSyd: Endpoint;
  dnssbUsChi: Endpoint;
  dnssbInBlr: Endpoint;
  dnssbSgSin: Endpoint;
  dnssbKrSel: Endpoint;
  dnssbRuMow: Endpoint;
  ethlink: Endpoint;
  handshake: Endpoint;
};
