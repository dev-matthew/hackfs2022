var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
import { keys } from "libp2p-crypto";
import { identity } from "multiformats/hashes/identity";
import PeerId from "peer-id";
import { Secp256k1Keypair } from "./secp256k1";
import { KeypairType } from "./types";
const { keysPBM, supportedKeys } = keys;
export const ERR_TYPE_NOT_IMPLEMENTED = "Keypair type not implemented";
export * from "./types";
export * from "./secp256k1";
export function generateKeypair(type) {
    return __awaiter(this, void 0, void 0, function* () {
        switch (type) {
            case KeypairType.secp256k1:
                return yield Secp256k1Keypair.generate();
            default:
                throw new Error(ERR_TYPE_NOT_IMPLEMENTED);
        }
    });
}
export function createKeypair(type, privateKey, publicKey) {
    switch (type) {
        case KeypairType.secp256k1:
            return new Secp256k1Keypair(privateKey, publicKey);
        default:
            throw new Error(ERR_TYPE_NOT_IMPLEMENTED);
    }
}
export function createPeerIdFromKeypair(keypair) {
    return __awaiter(this, void 0, void 0, function* () {
        switch (keypair.type) {
            case KeypairType.secp256k1: {
                // manually create a peer id to avoid expensive ops
                const privKey = keypair.hasPrivateKey()
                    ? new supportedKeys.secp256k1.Secp256k1PrivateKey(keypair.privateKey, keypair.publicKey)
                    : undefined;
                const pubKey = new supportedKeys.secp256k1.Secp256k1PublicKey(keypair.publicKey);
                const id = yield identity.digest(pubKey.bytes);
                return new PeerId(id.bytes, privKey, pubKey);
            }
            default:
                throw new Error(ERR_TYPE_NOT_IMPLEMENTED);
        }
    });
}
export function createKeypairFromPeerId(peerId) {
    // pub/private key bytes from peer-id are encoded in protobuf format
    const pub = keysPBM.PublicKey.decode(peerId.pubKey.bytes);
    return createKeypair(pub.Type, peerId.privKey ? peerId.privKey.marshal() : undefined, pub.Data);
}
//# sourceMappingURL=index.js.map