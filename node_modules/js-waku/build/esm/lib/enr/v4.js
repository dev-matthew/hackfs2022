var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
import * as secp from "@noble/secp256k1";
import { keccak256 } from "../crypto";
import { bytesToHex } from "../utils";
export function sign(privKey, msg) {
    return __awaiter(this, void 0, void 0, function* () {
        return secp.sign(keccak256(msg), privKey, {
            der: false,
        });
    });
}
export function nodeId(pubKey) {
    const publicKey = secp.Point.fromHex(pubKey);
    const uncompressedPubkey = publicKey.toRawBytes(false);
    return bytesToHex(keccak256(uncompressedPubkey.slice(1)));
}
//# sourceMappingURL=v4.js.map