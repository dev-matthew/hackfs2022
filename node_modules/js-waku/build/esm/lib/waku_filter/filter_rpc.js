import { Reader } from "protobufjs/minimal";
import { v4 as uuid } from "uuid";
import * as proto from "../../proto/waku/v2/filter";
/**
 * FilterRPC represents a message conforming to the Waku Filter protocol
 */
export class FilterRPC {
    constructor(proto) {
        this.proto = proto;
    }
    static createRequest(topic, contentFilters, requestId, subscribe = true) {
        return new FilterRPC({
            requestId: requestId || uuid(),
            request: {
                subscribe,
                topic,
                contentFilters,
            },
            push: undefined,
        });
    }
    /**
     *
     * @param bytes Uint8Array of bytes from a FilterRPC message
     * @returns FilterRPC
     */
    static decode(bytes) {
        const res = proto.FilterRPC.decode(Reader.create(bytes));
        return new FilterRPC(res);
    }
    /**
     * Encode the current FilterRPC request to bytes
     * @returns Uint8Array
     */
    encode() {
        return proto.FilterRPC.encode(this.proto).finish();
    }
    get push() {
        return this.proto.push;
    }
    get requestId() {
        return this.proto.requestId;
    }
}
//# sourceMappingURL=filter_rpc.js.map