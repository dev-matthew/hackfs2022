var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
import { getSubtle, randomBytes } from "../crypto";
export const KeySize = 32;
export const IvSize = 12;
export const TagSize = 16;
const Algorithm = { name: "AES-GCM", length: 128 };
export function encrypt(iv, key, clearText) {
    return __awaiter(this, void 0, void 0, function* () {
        return getSubtle()
            .importKey("raw", key, Algorithm, false, ["encrypt"])
            .then((cryptoKey) => getSubtle().encrypt(Object.assign({ iv }, Algorithm), cryptoKey, clearText))
            .then((cipher) => new Uint8Array(cipher));
    });
}
export function decrypt(iv, key, cipherText) {
    return __awaiter(this, void 0, void 0, function* () {
        return getSubtle()
            .importKey("raw", key, Algorithm, false, ["decrypt"])
            .then((cryptoKey) => getSubtle().decrypt(Object.assign({ iv }, Algorithm), cryptoKey, cipherText))
            .then((clear) => new Uint8Array(clear));
    });
}
export function generateIv() {
    return randomBytes(IvSize);
}
//# sourceMappingURL=symmetric.js.map