import Long from "long";
import { Reader } from "protobufjs/minimal";
import { v4 as uuid } from "uuid";
import * as protoV2Beta3 from "../../proto/waku/v2/store/v2beta3/store";
import * as protoV2Beta4 from "../../proto/waku/v2/store/v2beta4/store";
import { StoreCodecs } from "./index";
export var PageDirection;
(function (PageDirection) {
    PageDirection["BACKWARD"] = "backward";
    PageDirection["FORWARD"] = "forward";
})(PageDirection || (PageDirection = {}));
export class HistoryRPC {
    constructor(proto, storeCodec) {
        this.proto = proto;
        this.storeCodec = storeCodec;
        switch (storeCodec) {
            case StoreCodecs.V2Beta3:
                this.protoCodec = protoV2Beta3;
                break;
            case StoreCodecs.V2Beta4:
                this.protoCodec = protoV2Beta4;
                break;
            default:
                throw `Internal Error: Unexpected store codec value received in constructor: ${storeCodec}`;
        }
    }
    get query() {
        return this.proto.query;
    }
    get response() {
        return this.proto.response;
    }
    /**
     * Create History Query.
     */
    static createQuery(params) {
        var _a;
        const storeCodec = (_a = params.storeCodec) !== null && _a !== void 0 ? _a : StoreCodecs.V2Beta4;
        const contentFilters = params.contentTopics.map((contentTopic) => {
            return { contentTopic };
        });
        const direction = directionToProto(params.pageDirection);
        switch (storeCodec) {
            case StoreCodecs.V2Beta3:
                // Using function to scope variables
                return (() => {
                    const pagingInfo = {
                        pageSize: Long.fromNumber(params.pageSize),
                        cursor: params.cursor,
                        direction,
                    };
                    let startTime, endTime;
                    if (params.startTime)
                        startTime = params.startTime.valueOf() / 1000;
                    if (params.endTime)
                        endTime = params.endTime.valueOf() / 1000;
                    return new HistoryRPC({
                        requestId: uuid(),
                        query: {
                            pubSubTopic: params.pubSubTopic,
                            contentFilters,
                            pagingInfo,
                            startTime,
                            endTime,
                        },
                        response: undefined,
                    }, storeCodec);
                })();
            case StoreCodecs.V2Beta4:
                return (() => {
                    const pagingInfo = {
                        pageSize: Long.fromNumber(params.pageSize),
                        cursor: params.cursor,
                        direction,
                    };
                    let startTime, endTime;
                    if (params.startTime) {
                        // milliseconds 10^-3 to nanoseconds 10^-9
                        startTime = Long.fromNumber(params.startTime.valueOf()).mul(1000000);
                    }
                    if (params.endTime) {
                        // milliseconds 10^-3 to nanoseconds 10^-9
                        endTime = Long.fromNumber(params.endTime.valueOf()).mul(1000000);
                    }
                    return new HistoryRPC({
                        requestId: uuid(),
                        query: {
                            pubSubTopic: params.pubSubTopic,
                            contentFilters,
                            pagingInfo,
                            startTime,
                            endTime,
                        },
                        response: undefined,
                    }, storeCodec);
                })();
            default:
                throw `Internal Error: Unexpected store codec value received in createQuery: ${storeCodec}`;
        }
    }
    decode(bytes) {
        const res = this.protoCodec.HistoryRPC.decode(Reader.create(bytes));
        return new HistoryRPC(res, this.storeCodec);
    }
    encode() {
        return this.protoCodec.HistoryRPC.encode(this.proto).finish();
    }
}
function directionToProto(pageDirection) {
    switch (pageDirection) {
        case PageDirection.BACKWARD:
            return protoV2Beta4.PagingInfo_Direction.DIRECTION_BACKWARD_UNSPECIFIED;
        case PageDirection.FORWARD:
            return protoV2Beta4.PagingInfo_Direction.DIRECTION_FORWARD;
        default:
            return protoV2Beta4.PagingInfo_Direction.DIRECTION_BACKWARD_UNSPECIFIED;
    }
}
//# sourceMappingURL=history_rpc.js.map