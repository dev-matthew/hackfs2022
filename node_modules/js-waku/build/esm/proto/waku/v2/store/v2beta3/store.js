/* eslint-disable */
import Long from "long";
import _m0 from "protobufjs/minimal";
import { WakuMessage } from "../../../../waku/v2/message";
export const protobufPackage = "waku.v2.store.v2beta3";
export var PagingInfo_Direction;
(function (PagingInfo_Direction) {
    PagingInfo_Direction[PagingInfo_Direction["DIRECTION_BACKWARD_UNSPECIFIED"] = 0] = "DIRECTION_BACKWARD_UNSPECIFIED";
    PagingInfo_Direction[PagingInfo_Direction["DIRECTION_FORWARD"] = 1] = "DIRECTION_FORWARD";
    PagingInfo_Direction[PagingInfo_Direction["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
})(PagingInfo_Direction || (PagingInfo_Direction = {}));
export function pagingInfo_DirectionFromJSON(object) {
    switch (object) {
        case 0:
        case "DIRECTION_BACKWARD_UNSPECIFIED":
            return PagingInfo_Direction.DIRECTION_BACKWARD_UNSPECIFIED;
        case 1:
        case "DIRECTION_FORWARD":
            return PagingInfo_Direction.DIRECTION_FORWARD;
        case -1:
        case "UNRECOGNIZED":
        default:
            return PagingInfo_Direction.UNRECOGNIZED;
    }
}
export function pagingInfo_DirectionToJSON(object) {
    switch (object) {
        case PagingInfo_Direction.DIRECTION_BACKWARD_UNSPECIFIED:
            return "DIRECTION_BACKWARD_UNSPECIFIED";
        case PagingInfo_Direction.DIRECTION_FORWARD:
            return "DIRECTION_FORWARD";
        default:
            return "UNKNOWN";
    }
}
export var HistoryResponse_Error;
(function (HistoryResponse_Error) {
    HistoryResponse_Error[HistoryResponse_Error["ERROR_NONE_UNSPECIFIED"] = 0] = "ERROR_NONE_UNSPECIFIED";
    HistoryResponse_Error[HistoryResponse_Error["ERROR_INVALID_CURSOR"] = 1] = "ERROR_INVALID_CURSOR";
    HistoryResponse_Error[HistoryResponse_Error["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
})(HistoryResponse_Error || (HistoryResponse_Error = {}));
export function historyResponse_ErrorFromJSON(object) {
    switch (object) {
        case 0:
        case "ERROR_NONE_UNSPECIFIED":
            return HistoryResponse_Error.ERROR_NONE_UNSPECIFIED;
        case 1:
        case "ERROR_INVALID_CURSOR":
            return HistoryResponse_Error.ERROR_INVALID_CURSOR;
        case -1:
        case "UNRECOGNIZED":
        default:
            return HistoryResponse_Error.UNRECOGNIZED;
    }
}
export function historyResponse_ErrorToJSON(object) {
    switch (object) {
        case HistoryResponse_Error.ERROR_NONE_UNSPECIFIED:
            return "ERROR_NONE_UNSPECIFIED";
        case HistoryResponse_Error.ERROR_INVALID_CURSOR:
            return "ERROR_INVALID_CURSOR";
        default:
            return "UNKNOWN";
    }
}
function createBaseIndex() {
    return { digest: new Uint8Array(), receivedTime: 0, senderTime: 0 };
}
export const Index = {
    encode(message, writer = _m0.Writer.create()) {
        if (message.digest.length !== 0) {
            writer.uint32(10).bytes(message.digest);
        }
        if (message.receivedTime !== 0) {
            writer.uint32(17).double(message.receivedTime);
        }
        if (message.senderTime !== 0) {
            writer.uint32(25).double(message.senderTime);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseIndex();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.digest = reader.bytes();
                    break;
                case 2:
                    message.receivedTime = reader.double();
                    break;
                case 3:
                    message.senderTime = reader.double();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            digest: isSet(object.digest)
                ? bytesFromBase64(object.digest)
                : new Uint8Array(),
            receivedTime: isSet(object.receivedTime)
                ? Number(object.receivedTime)
                : 0,
            senderTime: isSet(object.senderTime) ? Number(object.senderTime) : 0,
        };
    },
    toJSON(message) {
        const obj = {};
        message.digest !== undefined &&
            (obj.digest = base64FromBytes(message.digest !== undefined ? message.digest : new Uint8Array()));
        message.receivedTime !== undefined &&
            (obj.receivedTime = message.receivedTime);
        message.senderTime !== undefined && (obj.senderTime = message.senderTime);
        return obj;
    },
    fromPartial(object) {
        var _a, _b, _c;
        const message = createBaseIndex();
        message.digest = (_a = object.digest) !== null && _a !== void 0 ? _a : new Uint8Array();
        message.receivedTime = (_b = object.receivedTime) !== null && _b !== void 0 ? _b : 0;
        message.senderTime = (_c = object.senderTime) !== null && _c !== void 0 ? _c : 0;
        return message;
    },
};
function createBasePagingInfo() {
    return { pageSize: Long.UZERO, cursor: undefined, direction: 0 };
}
export const PagingInfo = {
    encode(message, writer = _m0.Writer.create()) {
        if (!message.pageSize.isZero()) {
            writer.uint32(8).uint64(message.pageSize);
        }
        if (message.cursor !== undefined) {
            Index.encode(message.cursor, writer.uint32(18).fork()).ldelim();
        }
        if (message.direction !== 0) {
            writer.uint32(24).int32(message.direction);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBasePagingInfo();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.pageSize = reader.uint64();
                    break;
                case 2:
                    message.cursor = Index.decode(reader, reader.uint32());
                    break;
                case 3:
                    message.direction = reader.int32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            pageSize: isSet(object.pageSize)
                ? Long.fromString(object.pageSize)
                : Long.UZERO,
            cursor: isSet(object.cursor) ? Index.fromJSON(object.cursor) : undefined,
            direction: isSet(object.direction)
                ? pagingInfo_DirectionFromJSON(object.direction)
                : 0,
        };
    },
    toJSON(message) {
        const obj = {};
        message.pageSize !== undefined &&
            (obj.pageSize = (message.pageSize || Long.UZERO).toString());
        message.cursor !== undefined &&
            (obj.cursor = message.cursor ? Index.toJSON(message.cursor) : undefined);
        message.direction !== undefined &&
            (obj.direction = pagingInfo_DirectionToJSON(message.direction));
        return obj;
    },
    fromPartial(object) {
        var _a;
        const message = createBasePagingInfo();
        message.pageSize =
            object.pageSize !== undefined && object.pageSize !== null
                ? Long.fromValue(object.pageSize)
                : Long.UZERO;
        message.cursor =
            object.cursor !== undefined && object.cursor !== null
                ? Index.fromPartial(object.cursor)
                : undefined;
        message.direction = (_a = object.direction) !== null && _a !== void 0 ? _a : 0;
        return message;
    },
};
function createBaseContentFilter() {
    return { contentTopic: "" };
}
export const ContentFilter = {
    encode(message, writer = _m0.Writer.create()) {
        if (message.contentTopic !== "") {
            writer.uint32(10).string(message.contentTopic);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseContentFilter();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.contentTopic = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            contentTopic: isSet(object.contentTopic)
                ? String(object.contentTopic)
                : "",
        };
    },
    toJSON(message) {
        const obj = {};
        message.contentTopic !== undefined &&
            (obj.contentTopic = message.contentTopic);
        return obj;
    },
    fromPartial(object) {
        var _a;
        const message = createBaseContentFilter();
        message.contentTopic = (_a = object.contentTopic) !== null && _a !== void 0 ? _a : "";
        return message;
    },
};
function createBaseHistoryQuery() {
    return {
        pubSubTopic: undefined,
        contentFilters: [],
        pagingInfo: undefined,
        startTime: undefined,
        endTime: undefined,
    };
}
export const HistoryQuery = {
    encode(message, writer = _m0.Writer.create()) {
        if (message.pubSubTopic !== undefined) {
            writer.uint32(18).string(message.pubSubTopic);
        }
        for (const v of message.contentFilters) {
            ContentFilter.encode(v, writer.uint32(26).fork()).ldelim();
        }
        if (message.pagingInfo !== undefined) {
            PagingInfo.encode(message.pagingInfo, writer.uint32(34).fork()).ldelim();
        }
        if (message.startTime !== undefined) {
            writer.uint32(41).double(message.startTime);
        }
        if (message.endTime !== undefined) {
            writer.uint32(49).double(message.endTime);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseHistoryQuery();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 2:
                    message.pubSubTopic = reader.string();
                    break;
                case 3:
                    message.contentFilters.push(ContentFilter.decode(reader, reader.uint32()));
                    break;
                case 4:
                    message.pagingInfo = PagingInfo.decode(reader, reader.uint32());
                    break;
                case 5:
                    message.startTime = reader.double();
                    break;
                case 6:
                    message.endTime = reader.double();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            pubSubTopic: isSet(object.pubSubTopic)
                ? String(object.pubSubTopic)
                : undefined,
            contentFilters: Array.isArray(object === null || object === void 0 ? void 0 : object.contentFilters)
                ? object.contentFilters.map((e) => ContentFilter.fromJSON(e))
                : [],
            pagingInfo: isSet(object.pagingInfo)
                ? PagingInfo.fromJSON(object.pagingInfo)
                : undefined,
            startTime: isSet(object.startTime) ? Number(object.startTime) : undefined,
            endTime: isSet(object.endTime) ? Number(object.endTime) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        message.pubSubTopic !== undefined &&
            (obj.pubSubTopic = message.pubSubTopic);
        if (message.contentFilters) {
            obj.contentFilters = message.contentFilters.map((e) => e ? ContentFilter.toJSON(e) : undefined);
        }
        else {
            obj.contentFilters = [];
        }
        message.pagingInfo !== undefined &&
            (obj.pagingInfo = message.pagingInfo
                ? PagingInfo.toJSON(message.pagingInfo)
                : undefined);
        message.startTime !== undefined && (obj.startTime = message.startTime);
        message.endTime !== undefined && (obj.endTime = message.endTime);
        return obj;
    },
    fromPartial(object) {
        var _a, _b, _c, _d;
        const message = createBaseHistoryQuery();
        message.pubSubTopic = (_a = object.pubSubTopic) !== null && _a !== void 0 ? _a : undefined;
        message.contentFilters =
            ((_b = object.contentFilters) === null || _b === void 0 ? void 0 : _b.map((e) => ContentFilter.fromPartial(e))) || [];
        message.pagingInfo =
            object.pagingInfo !== undefined && object.pagingInfo !== null
                ? PagingInfo.fromPartial(object.pagingInfo)
                : undefined;
        message.startTime = (_c = object.startTime) !== null && _c !== void 0 ? _c : undefined;
        message.endTime = (_d = object.endTime) !== null && _d !== void 0 ? _d : undefined;
        return message;
    },
};
function createBaseHistoryResponse() {
    return { messages: [], pagingInfo: undefined, error: 0 };
}
export const HistoryResponse = {
    encode(message, writer = _m0.Writer.create()) {
        for (const v of message.messages) {
            WakuMessage.encode(v, writer.uint32(18).fork()).ldelim();
        }
        if (message.pagingInfo !== undefined) {
            PagingInfo.encode(message.pagingInfo, writer.uint32(26).fork()).ldelim();
        }
        if (message.error !== 0) {
            writer.uint32(32).int32(message.error);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseHistoryResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 2:
                    message.messages.push(WakuMessage.decode(reader, reader.uint32()));
                    break;
                case 3:
                    message.pagingInfo = PagingInfo.decode(reader, reader.uint32());
                    break;
                case 4:
                    message.error = reader.int32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            messages: Array.isArray(object === null || object === void 0 ? void 0 : object.messages)
                ? object.messages.map((e) => WakuMessage.fromJSON(e))
                : [],
            pagingInfo: isSet(object.pagingInfo)
                ? PagingInfo.fromJSON(object.pagingInfo)
                : undefined,
            error: isSet(object.error)
                ? historyResponse_ErrorFromJSON(object.error)
                : 0,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.messages) {
            obj.messages = message.messages.map((e) => e ? WakuMessage.toJSON(e) : undefined);
        }
        else {
            obj.messages = [];
        }
        message.pagingInfo !== undefined &&
            (obj.pagingInfo = message.pagingInfo
                ? PagingInfo.toJSON(message.pagingInfo)
                : undefined);
        message.error !== undefined &&
            (obj.error = historyResponse_ErrorToJSON(message.error));
        return obj;
    },
    fromPartial(object) {
        var _a, _b;
        const message = createBaseHistoryResponse();
        message.messages =
            ((_a = object.messages) === null || _a === void 0 ? void 0 : _a.map((e) => WakuMessage.fromPartial(e))) || [];
        message.pagingInfo =
            object.pagingInfo !== undefined && object.pagingInfo !== null
                ? PagingInfo.fromPartial(object.pagingInfo)
                : undefined;
        message.error = (_b = object.error) !== null && _b !== void 0 ? _b : 0;
        return message;
    },
};
function createBaseHistoryRPC() {
    return { requestId: "", query: undefined, response: undefined };
}
export const HistoryRPC = {
    encode(message, writer = _m0.Writer.create()) {
        if (message.requestId !== "") {
            writer.uint32(10).string(message.requestId);
        }
        if (message.query !== undefined) {
            HistoryQuery.encode(message.query, writer.uint32(18).fork()).ldelim();
        }
        if (message.response !== undefined) {
            HistoryResponse.encode(message.response, writer.uint32(26).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseHistoryRPC();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.requestId = reader.string();
                    break;
                case 2:
                    message.query = HistoryQuery.decode(reader, reader.uint32());
                    break;
                case 3:
                    message.response = HistoryResponse.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            requestId: isSet(object.requestId) ? String(object.requestId) : "",
            query: isSet(object.query)
                ? HistoryQuery.fromJSON(object.query)
                : undefined,
            response: isSet(object.response)
                ? HistoryResponse.fromJSON(object.response)
                : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        message.requestId !== undefined && (obj.requestId = message.requestId);
        message.query !== undefined &&
            (obj.query = message.query
                ? HistoryQuery.toJSON(message.query)
                : undefined);
        message.response !== undefined &&
            (obj.response = message.response
                ? HistoryResponse.toJSON(message.response)
                : undefined);
        return obj;
    },
    fromPartial(object) {
        var _a;
        const message = createBaseHistoryRPC();
        message.requestId = (_a = object.requestId) !== null && _a !== void 0 ? _a : "";
        message.query =
            object.query !== undefined && object.query !== null
                ? HistoryQuery.fromPartial(object.query)
                : undefined;
        message.response =
            object.response !== undefined && object.response !== null
                ? HistoryResponse.fromPartial(object.response)
                : undefined;
        return message;
    },
};
var globalThis = (() => {
    if (typeof globalThis !== "undefined")
        return globalThis;
    if (typeof self !== "undefined")
        return self;
    if (typeof window !== "undefined")
        return window;
    if (typeof global !== "undefined")
        return global;
    throw "Unable to locate global object";
})();
const atob = globalThis.atob ||
    ((b64) => globalThis.Buffer.from(b64, "base64").toString("binary"));
function bytesFromBase64(b64) {
    const bin = atob(b64);
    const arr = new Uint8Array(bin.length);
    for (let i = 0; i < bin.length; ++i) {
        arr[i] = bin.charCodeAt(i);
    }
    return arr;
}
const btoa = globalThis.btoa ||
    ((bin) => globalThis.Buffer.from(bin, "binary").toString("base64"));
function base64FromBytes(arr) {
    const bin = [];
    for (const byte of arr) {
        bin.push(String.fromCharCode(byte));
    }
    return btoa(bin.join(""));
}
if (_m0.util.Long !== Long) {
    _m0.util.Long = Long;
    _m0.configure();
}
function isSet(value) {
    return value !== null && value !== undefined;
}
//# sourceMappingURL=store.js.map