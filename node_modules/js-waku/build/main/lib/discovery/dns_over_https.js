"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.DnsOverHttps = void 0;
const dns_query_1 = require("dns-query");
const utils_1 = require("../utils");
const { cloudflare, google, opendns } = dns_query_1.endpoints;
class DnsOverHttps {
    /**
     * Create new Dns-Over-Http DNS client.
     *
     * @param endpoints The endpoints for Dns-Over-Https queries.
     * See [dns-query](https://www.npmjs.com/package/dns-query) for details.
     * Defaults to cloudflare, google and opendns.
     *
     * @throws {code: string} If DNS query fails.
     */
    constructor(endpoints = [cloudflare, google, opendns]) {
        this.endpoints = endpoints;
    }
    /**
     * Resolves a TXT record
     *
     * @param domain The domain name
     *
     * @throws if the result is provided in byte form which cannot be decoded
     * to UTF-8
     */
    async resolveTXT(domain) {
        const response = await (0, dns_query_1.query)({
            questions: [{ type: "TXT", name: domain }],
        });
        const answers = response.answers;
        const data = answers.map((a) => a.data);
        const result = [];
        data.forEach((d) => {
            if (typeof d === "string") {
                result.push(d);
            }
            else if (Array.isArray(d)) {
                d.forEach((sd) => {
                    if (typeof sd === "string") {
                        result.push(sd);
                    }
                    else {
                        result.push((0, utils_1.bytesToUtf8)(sd));
                    }
                });
            }
            else {
                result.push((0, utils_1.bytesToUtf8)(d));
            }
        });
        return result;
    }
}
exports.DnsOverHttps = DnsOverHttps;
//# sourceMappingURL=dns_over_https.js.map