"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getPseudoRandomSubset = exports.ENRTree = exports.DnsOverHttps = exports.dns = exports.Bootstrap = exports.predefined = exports.getPredefinedBootstrapNodes = void 0;
const utils_1 = require("libp2p-gossipsub/src/utils");
var predefined_1 = require("./predefined");
Object.defineProperty(exports, "getPredefinedBootstrapNodes", { enumerable: true, get: function () { return predefined_1.getPredefinedBootstrapNodes; } });
exports.predefined = __importStar(require("./predefined"));
var bootstrap_1 = require("./bootstrap");
Object.defineProperty(exports, "Bootstrap", { enumerable: true, get: function () { return bootstrap_1.Bootstrap; } });
exports.dns = __importStar(require("./dns"));
var dns_over_https_1 = require("./dns_over_https");
Object.defineProperty(exports, "DnsOverHttps", { enumerable: true, get: function () { return dns_over_https_1.DnsOverHttps; } });
var enrtree_1 = require("./enrtree");
Object.defineProperty(exports, "ENRTree", { enumerable: true, get: function () { return enrtree_1.ENRTree; } });
function getPseudoRandomSubset(values, wantedNumber) {
    if (values.length <= wantedNumber) {
        return values;
    }
    return (0, utils_1.shuffle)(values).slice(0, wantedNumber);
}
exports.getPseudoRandomSubset = getPseudoRandomSubset;
//# sourceMappingURL=index.js.map