"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Secp256k1Keypair = void 0;
const secp = __importStar(require("@noble/secp256k1"));
const crypto_1 = require("../../crypto");
const types_1 = require("./types");
class Secp256k1Keypair {
    constructor(privateKey, publicKey) {
        let pub = publicKey;
        if (pub) {
            pub = (0, crypto_1.compressPublicKey)(pub);
        }
        if ((this._privateKey = privateKey) && !this.privateKeyVerify()) {
            throw new Error("Invalid private key");
        }
        if ((this._publicKey = pub) && !this.publicKeyVerify()) {
            throw new Error("Invalid public key");
        }
        this.type = types_1.KeypairType.secp256k1;
    }
    static async generate() {
        const privateKey = (0, crypto_1.randomBytes)(32);
        const publicKey = secp.getPublicKey(privateKey);
        return new Secp256k1Keypair(privateKey, publicKey);
    }
    privateKeyVerify(key = this._privateKey) {
        if (key) {
            return secp.utils.isValidPrivateKey(key);
        }
        return true;
    }
    publicKeyVerify(key = this._publicKey) {
        if (key) {
            try {
                secp.Point.fromHex(key);
                return true;
            }
            catch {
                return false;
            }
        }
        return true;
    }
    get privateKey() {
        if (!this._privateKey) {
            throw new Error();
        }
        return this._privateKey;
    }
    get publicKey() {
        if (!this._publicKey) {
            throw new Error();
        }
        return this._publicKey;
    }
    hasPrivateKey() {
        return !!this._privateKey;
    }
}
exports.Secp256k1Keypair = Secp256k1Keypair;
//# sourceMappingURL=secp256k1.js.map