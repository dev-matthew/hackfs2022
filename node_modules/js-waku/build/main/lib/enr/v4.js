"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.nodeId = exports.sign = void 0;
const secp = __importStar(require("@noble/secp256k1"));
const crypto_1 = require("../crypto");
const utils_1 = require("../utils");
async function sign(privKey, msg) {
    return secp.sign((0, crypto_1.keccak256)(msg), privKey, {
        der: false,
    });
}
exports.sign = sign;
function nodeId(pubKey) {
    const publicKey = secp.Point.fromHex(pubKey);
    const uncompressedPubkey = publicKey.toRawBytes(false);
    return (0, utils_1.bytesToHex)((0, crypto_1.keccak256)(uncompressedPubkey.slice(1)));
}
exports.nodeId = nodeId;
//# sourceMappingURL=v4.js.map