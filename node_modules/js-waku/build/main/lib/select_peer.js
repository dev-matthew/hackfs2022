"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getPeersForProtocol = exports.selectRandomPeer = void 0;
/**
 * Returns a pseudo-random peer that supports the given protocol.
 * Useful for protocols such as store and light push
 */
async function selectRandomPeer(peersIter) {
    const peers = [];
    for await (const peer of peersIter) {
        peers.push(peer);
    }
    if (peers.length === 0)
        return;
    const index = Math.round(Math.random() * (peers.length - 1));
    return peers[index];
}
exports.selectRandomPeer = selectRandomPeer;
/**
 * Returns the list of peers that supports the given protocol.
 */
async function* getPeersForProtocol(libp2p, protocols) {
    for await (const peer of libp2p.peerStore.getPeers()) {
        let peerFound = false;
        for (let i = 0; i < protocols.length; i++) {
            if (peer.protocols.includes(protocols[i])) {
                peerFound = true;
                break;
            }
        }
        if (!peerFound) {
            continue;
        }
        yield peer;
    }
}
exports.getPeersForProtocol = getPeersForProtocol;
//# sourceMappingURL=select_peer.js.map