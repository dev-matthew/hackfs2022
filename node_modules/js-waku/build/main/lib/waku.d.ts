import Libp2p, { Libp2pModules, Libp2pOptions } from "libp2p";
import { MuxedStream } from "libp2p-interfaces/dist/src/stream-muxer/types";
import { Multiaddr } from "multiaddr";
import PeerId from "peer-id";
import { BootstrapOptions } from "./discovery";
import { WakuFilter } from "./waku_filter";
import { WakuLightPush } from "./waku_light_push";
import { DecryptionMethod } from "./waku_message";
import { WakuRelay } from "./waku_relay";
import { WakuStore } from "./waku_store";
export declare const DefaultPingKeepAliveValueSecs = 0;
export declare const DefaultRelayKeepAliveValueSecs: number;
/**
 * DefaultPubSubTopic is the default gossipsub topic to use for Waku.
 */
export declare const DefaultPubSubTopic = "/waku/2/default-waku/proto";
export declare enum Protocols {
    Relay = "relay",
    Store = "store",
    LightPush = "lightpush",
    Filter = "filter"
}
export interface CreateOptions {
    /**
     * The PubSub Topic to use. Defaults to {@link DefaultPubSubTopic}.
     *
     * One and only one pubsub topic is used by Waku. This is used by:
     * - WakuRelay to receive, route and send messages,
     * - WakuLightPush to send messages,
     * - WakuStore to retrieve messages.
     *
     * The usage of the default pubsub topic is recommended.
     * See [Waku v2 Topic Usage Recommendations](https://rfc.vac.dev/spec/23/) for details.
     *
     * @default {@link DefaultPubSubTopic}
     */
    pubSubTopic?: string;
    /**
     * Set keep alive frequency in seconds: Waku will send a `/ipfs/ping/1.0.0`
     * request to each peer after the set number of seconds. Set to 0 to disable.
     *
     * @default {@link DefaultPingKeepAliveValueSecs}
     */
    pingKeepAlive?: number;
    /**
     * Set keep alive frequency in seconds: Waku will send a ping message over
     * relay to each peer after the set number of seconds. Set to 0 to disable.
     *
     * @default {@link DefaultRelayKeepAliveValueSecs}
     */
    relayKeepAlive?: number;
    /**
     * You can pass options to the `Libp2p` instance used by {@link Waku} using the {@link CreateOptions.libp2p} property.
     * This property is the same type than the one passed to [`Libp2p.create`](https://github.com/libp2p/js-libp2p/blob/master/doc/API.md#create)
     * apart that we made the `modules` property optional and partial,
     * allowing its omission and letting Waku set good defaults.
     * Notes that some values are overridden by {@link Waku} to ensure it implements the Waku protocol.
     */
    libp2p?: Omit<Libp2pOptions & import("libp2p").CreateOptions, "modules"> & {
        modules?: Partial<Libp2pModules>;
    };
    /**
     * Byte array used as key for the noise protocol used for connection encryption
     * by [`Libp2p.create`](https://github.com/libp2p/js-libp2p/blob/master/doc/API.md#create)
     * This is only used for test purposes to not run out of entropy during CI runs.
     */
    staticNoiseKey?: Uint8Array;
    /**
     * Use libp2p-bootstrap to discover and connect to new nodes.
     *
     * See [[BootstrapOptions]] for available parameters.
     *
     * Note: It overrides any other peerDiscovery modules that may have been set via
     * {@link CreateOptions.libp2p}.
     */
    bootstrap?: BootstrapOptions;
    decryptionKeys?: Array<Uint8Array | string>;
}
export declare class Waku {
    libp2p: Libp2p;
    relay: WakuRelay;
    store: WakuStore;
    filter: WakuFilter;
    lightPush: WakuLightPush;
    private pingKeepAliveTimers;
    private relayKeepAliveTimers;
    private constructor();
    /**
     * Create and start new waku node.
     */
    static create(options?: CreateOptions): Promise<Waku>;
    /**
     * Dials to the provided peer.
     *
     * @param peer The peer to dial
     * @param protocols Waku protocols we expect from the peer; Default to Relay
     */
    dial(peer: PeerId | Multiaddr | string, protocols?: Protocols[]): Promise<{
        stream: MuxedStream;
        protocol: string;
    }>;
    /**
     * Add peer to address book, it will be auto-dialed in the background.
     */
    addPeerToAddressBook(peerId: PeerId | string, multiaddrs: Multiaddr[] | string[]): void;
    stop(): Promise<void>;
    /**
     * Register a decryption key to attempt decryption of messages received via
     * [[WakuRelay]] and [[WakuStore]]. This can either be a private key for
     * asymmetric encryption or a symmetric key.
     *
     * Strings must be in hex format.
     */
    addDecryptionKey(key: Uint8Array | string, options?: {
        method?: DecryptionMethod;
        contentTopics?: string[];
    }): void;
    /**
     * Delete a decryption key that was used to attempt decryption of messages
     * received via [[WakuRelay]] or [[WakuStore]].
     *
     * Strings must be in hex format.
     */
    deleteDecryptionKey(key: Uint8Array | string): void;
    /**
     * Return the local multiaddr with peer id on which libp2p is listening.
     *
     * @throws if libp2p is not listening on localhost.
     */
    getLocalMultiaddrWithID(): string;
    /**
     * Wait for a remote peer to be ready given the passed protocols.
     * Useful when using the [[CreateOptions.bootstrap]] with [[Waku.create]].
     *
     * @param protocols The protocols that need to be enabled by remote peers.
     * @param timeoutMs A timeout value in milliseconds..
     *
     * @returns A promise that **resolves** if all desired protocols are fulfilled by
     * remote nodes, **rejects** if the timeoutMs is reached.
     *
     * @default Remote peer must have Waku Relay enabled and no time out is applied.
     */
    waitForRemotePeer(protocols?: Protocols[], timeoutMs?: number): Promise<void>;
    private startKeepAlive;
    private stopKeepAlive;
}
