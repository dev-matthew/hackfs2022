import Libp2p from "libp2p";
import { Peer, PeerId } from "libp2p/src/peer-store";
import { DecryptionMethod, WakuMessage } from "../waku_message";
export declare const FilterCodec = "/vac/waku/filter/2.0.0-beta1";
declare type FilterSubscriptionOpts = {
    /**
     * The Pubsub topic for the subscription
     */
    pubsubTopic?: string;
    /**
     * Optionally specify a PeerId for the subscription. If not included, will use a random peer.
     */
    peerId?: PeerId;
};
declare type FilterCallback = (msg: WakuMessage) => void | Promise<void>;
declare type UnsubscribeFunction = () => Promise<void>;
/**
 * Implements client side of the [Waku v2 Filter protocol](https://rfc.vac.dev/spec/12/).
 *
 * Note this currently only works in NodeJS when the Waku node is listening on a port, see:
 * - https://github.com/status-im/go-waku/issues/245
 * - https://github.com/status-im/nwaku/issues/948
 */
export declare class WakuFilter {
    libp2p: Libp2p;
    private subscriptions;
    decryptionKeys: Map<Uint8Array, {
        method?: DecryptionMethod;
        contentTopics?: string[];
    }>;
    constructor(libp2p: Libp2p);
    /**
     * @param contentTopics Array of ContentTopics to subscribe to. If empty, no messages will be returned from the filter.
     * @param callback A function that will be called on each message returned by the filter.
     * @param opts The FilterSubscriptionOpts used to narrow which messages are returned, and which peer to connect to.
     * @returns Unsubscribe function that can be used to end the subscription.
     */
    subscribe(callback: FilterCallback, contentTopics: string[], opts?: FilterSubscriptionOpts): Promise<UnsubscribeFunction>;
    private onRequest;
    private pushMessages;
    private addCallback;
    private removeCallback;
    private unsubscribe;
    private newStream;
    private getPeer;
    /**
     * Register a decryption key to attempt decryption of messages received in any
     * subsequent [[subscribe]] call. This can either be a private key for
     * asymmetric encryption or a symmetric key. [[WakuStore]] will attempt to
     * decrypt messages using both methods.
     *
     * Strings must be in hex format.
     */
    addDecryptionKey(key: Uint8Array | string, options?: {
        method?: DecryptionMethod;
        contentTopics?: string[];
    }): void;
    /**
     * Delete a decryption key so that it cannot be used in future [[subscribe]] calls
     *
     * Strings must be in hex format.
     */
    deleteDecryptionKey(key: Uint8Array | string): void;
    get peers(): AsyncIterable<Peer>;
    get randomPeer(): Promise<Peer | undefined>;
}
export {};
