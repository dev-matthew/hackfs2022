import Long from "long";
import _m0 from "protobufjs/minimal";
import { WakuMessage } from "../../waku/v2/message";
export declare const protobufPackage = "waku.v2";
export interface FilterRequest {
    subscribe: boolean;
    topic: string;
    contentFilters: FilterRequest_ContentFilter[];
}
export interface FilterRequest_ContentFilter {
    contentTopic: string;
}
export interface MessagePush {
    messages: WakuMessage[];
}
export interface FilterRPC {
    requestId: string;
    request: FilterRequest | undefined;
    push: MessagePush | undefined;
}
export declare const FilterRequest: {
    encode(message: FilterRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number | undefined): FilterRequest;
    fromJSON(object: any): FilterRequest;
    toJSON(message: FilterRequest): unknown;
    fromPartial<I extends {
        subscribe?: boolean | undefined;
        topic?: string | undefined;
        contentFilters?: {
            contentTopic?: string | undefined;
        }[] | undefined;
    } & {
        subscribe?: boolean | undefined;
        topic?: string | undefined;
        contentFilters?: ({
            contentTopic?: string | undefined;
        }[] & ({
            contentTopic?: string | undefined;
        } & {
            contentTopic?: string | undefined;
        } & Record<Exclude<keyof I["contentFilters"][number], "contentTopic">, never>)[] & Record<Exclude<keyof I["contentFilters"], keyof {
            contentTopic?: string | undefined;
        }[]>, never>) | undefined;
    } & Record<Exclude<keyof I, keyof FilterRequest>, never>>(object: I): FilterRequest;
};
export declare const FilterRequest_ContentFilter: {
    encode(message: FilterRequest_ContentFilter, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number | undefined): FilterRequest_ContentFilter;
    fromJSON(object: any): FilterRequest_ContentFilter;
    toJSON(message: FilterRequest_ContentFilter): unknown;
    fromPartial<I extends {
        contentTopic?: string | undefined;
    } & {
        contentTopic?: string | undefined;
    } & Record<Exclude<keyof I, "contentTopic">, never>>(object: I): FilterRequest_ContentFilter;
};
export declare const MessagePush: {
    encode(message: MessagePush, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number | undefined): MessagePush;
    fromJSON(object: any): MessagePush;
    toJSON(message: MessagePush): unknown;
    fromPartial<I extends {
        messages?: {
            payload?: Uint8Array | undefined;
            contentTopic?: string | undefined;
            version?: number | undefined;
            timestampDeprecated?: number | undefined;
            timestamp?: string | number | Long.Long | undefined;
        }[] | undefined;
    } & {
        messages?: ({
            payload?: Uint8Array | undefined;
            contentTopic?: string | undefined;
            version?: number | undefined;
            timestampDeprecated?: number | undefined;
            timestamp?: string | number | Long.Long | undefined;
        }[] & ({
            payload?: Uint8Array | undefined;
            contentTopic?: string | undefined;
            version?: number | undefined;
            timestampDeprecated?: number | undefined;
            timestamp?: string | number | Long.Long | undefined;
        } & {
            payload?: Uint8Array | undefined;
            contentTopic?: string | undefined;
            version?: number | undefined;
            timestampDeprecated?: number | undefined;
            timestamp?: string | number | (Long.Long & {
                high: number;
                low: number;
                unsigned: boolean;
                add: (addend: string | number | Long.Long) => Long.Long;
                and: (other: string | number | Long.Long) => Long.Long;
                compare: (other: string | number | Long.Long) => number;
                comp: (other: string | number | Long.Long) => number;
                divide: (divisor: string | number | Long.Long) => Long.Long;
                div: (divisor: string | number | Long.Long) => Long.Long;
                equals: (other: string | number | Long.Long) => boolean;
                eq: (other: string | number | Long.Long) => boolean;
                getHighBits: () => number;
                getHighBitsUnsigned: () => number;
                getLowBits: () => number;
                getLowBitsUnsigned: () => number;
                getNumBitsAbs: () => number;
                greaterThan: (other: string | number | Long.Long) => boolean;
                gt: (other: string | number | Long.Long) => boolean;
                greaterThanOrEqual: (other: string | number | Long.Long) => boolean;
                gte: (other: string | number | Long.Long) => boolean;
                isEven: () => boolean;
                isNegative: () => boolean;
                isOdd: () => boolean;
                isPositive: () => boolean;
                isZero: () => boolean;
                lessThan: (other: string | number | Long.Long) => boolean;
                lt: (other: string | number | Long.Long) => boolean;
                lessThanOrEqual: (other: string | number | Long.Long) => boolean;
                lte: (other: string | number | Long.Long) => boolean;
                modulo: (other: string | number | Long.Long) => Long.Long;
                mod: (other: string | number | Long.Long) => Long.Long;
                multiply: (multiplier: string | number | Long.Long) => Long.Long;
                mul: (multiplier: string | number | Long.Long) => Long.Long;
                negate: () => Long.Long;
                neg: () => Long.Long;
                not: () => Long.Long;
                notEquals: (other: string | number | Long.Long) => boolean;
                neq: (other: string | number | Long.Long) => boolean;
                or: (other: string | number | Long.Long) => Long.Long;
                shiftLeft: (numBits: number | Long.Long) => Long.Long;
                shl: (numBits: number | Long.Long) => Long.Long;
                shiftRight: (numBits: number | Long.Long) => Long.Long;
                shr: (numBits: number | Long.Long) => Long.Long;
                shiftRightUnsigned: (numBits: number | Long.Long) => Long.Long;
                shru: (numBits: number | Long.Long) => Long.Long;
                subtract: (subtrahend: string | number | Long.Long) => Long.Long;
                sub: (subtrahend: string | number | Long.Long) => Long.Long;
                toInt: () => number;
                toNumber: () => number;
                toBytes: (le?: boolean | undefined) => number[];
                toBytesLE: () => number[];
                toBytesBE: () => number[];
                toSigned: () => Long.Long;
                toString: (radix?: number | undefined) => string;
                toUnsigned: () => Long.Long;
                xor: (other: string | number | Long.Long) => Long.Long;
            } & Record<Exclude<keyof I["messages"][number]["timestamp"], keyof Long.Long>, never>) | undefined;
        } & Record<Exclude<keyof I["messages"][number], keyof WakuMessage>, never>)[] & Record<Exclude<keyof I["messages"], keyof {
            payload?: Uint8Array | undefined;
            contentTopic?: string | undefined;
            version?: number | undefined;
            timestampDeprecated?: number | undefined;
            timestamp?: string | number | Long.Long | undefined;
        }[]>, never>) | undefined;
    } & Record<Exclude<keyof I, "messages">, never>>(object: I): MessagePush;
};
export declare const FilterRPC: {
    encode(message: FilterRPC, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number | undefined): FilterRPC;
    fromJSON(object: any): FilterRPC;
    toJSON(message: FilterRPC): unknown;
    fromPartial<I extends {
        requestId?: string | undefined;
        request?: {
            subscribe?: boolean | undefined;
            topic?: string | undefined;
            contentFilters?: {
                contentTopic?: string | undefined;
            }[] | undefined;
        } | undefined;
        push?: {
            messages?: {
                payload?: Uint8Array | undefined;
                contentTopic?: string | undefined;
                version?: number | undefined;
                timestampDeprecated?: number | undefined;
                timestamp?: string | number | Long.Long | undefined;
            }[] | undefined;
        } | undefined;
    } & {
        requestId?: string | undefined;
        request?: ({
            subscribe?: boolean | undefined;
            topic?: string | undefined;
            contentFilters?: {
                contentTopic?: string | undefined;
            }[] | undefined;
        } & {
            subscribe?: boolean | undefined;
            topic?: string | undefined;
            contentFilters?: ({
                contentTopic?: string | undefined;
            }[] & ({
                contentTopic?: string | undefined;
            } & {
                contentTopic?: string | undefined;
            } & Record<Exclude<keyof I["request"]["contentFilters"][number], "contentTopic">, never>)[] & Record<Exclude<keyof I["request"]["contentFilters"], keyof {
                contentTopic?: string | undefined;
            }[]>, never>) | undefined;
        } & Record<Exclude<keyof I["request"], keyof FilterRequest>, never>) | undefined;
        push?: ({
            messages?: {
                payload?: Uint8Array | undefined;
                contentTopic?: string | undefined;
                version?: number | undefined;
                timestampDeprecated?: number | undefined;
                timestamp?: string | number | Long.Long | undefined;
            }[] | undefined;
        } & {
            messages?: ({
                payload?: Uint8Array | undefined;
                contentTopic?: string | undefined;
                version?: number | undefined;
                timestampDeprecated?: number | undefined;
                timestamp?: string | number | Long.Long | undefined;
            }[] & ({
                payload?: Uint8Array | undefined;
                contentTopic?: string | undefined;
                version?: number | undefined;
                timestampDeprecated?: number | undefined;
                timestamp?: string | number | Long.Long | undefined;
            } & {
                payload?: Uint8Array | undefined;
                contentTopic?: string | undefined;
                version?: number | undefined;
                timestampDeprecated?: number | undefined;
                timestamp?: string | number | (Long.Long & {
                    high: number;
                    low: number;
                    unsigned: boolean;
                    add: (addend: string | number | Long.Long) => Long.Long;
                    and: (other: string | number | Long.Long) => Long.Long;
                    compare: (other: string | number | Long.Long) => number;
                    comp: (other: string | number | Long.Long) => number;
                    divide: (divisor: string | number | Long.Long) => Long.Long;
                    div: (divisor: string | number | Long.Long) => Long.Long;
                    equals: (other: string | number | Long.Long) => boolean;
                    eq: (other: string | number | Long.Long) => boolean;
                    getHighBits: () => number;
                    getHighBitsUnsigned: () => number;
                    getLowBits: () => number;
                    getLowBitsUnsigned: () => number;
                    getNumBitsAbs: () => number;
                    greaterThan: (other: string | number | Long.Long) => boolean;
                    gt: (other: string | number | Long.Long) => boolean;
                    greaterThanOrEqual: (other: string | number | Long.Long) => boolean;
                    gte: (other: string | number | Long.Long) => boolean;
                    isEven: () => boolean;
                    isNegative: () => boolean;
                    isOdd: () => boolean;
                    isPositive: () => boolean;
                    isZero: () => boolean;
                    lessThan: (other: string | number | Long.Long) => boolean;
                    lt: (other: string | number | Long.Long) => boolean;
                    lessThanOrEqual: (other: string | number | Long.Long) => boolean;
                    lte: (other: string | number | Long.Long) => boolean;
                    modulo: (other: string | number | Long.Long) => Long.Long;
                    mod: (other: string | number | Long.Long) => Long.Long;
                    multiply: (multiplier: string | number | Long.Long) => Long.Long;
                    mul: (multiplier: string | number | Long.Long) => Long.Long;
                    negate: () => Long.Long;
                    neg: () => Long.Long;
                    not: () => Long.Long;
                    notEquals: (other: string | number | Long.Long) => boolean;
                    neq: (other: string | number | Long.Long) => boolean;
                    or: (other: string | number | Long.Long) => Long.Long;
                    shiftLeft: (numBits: number | Long.Long) => Long.Long;
                    shl: (numBits: number | Long.Long) => Long.Long;
                    shiftRight: (numBits: number | Long.Long) => Long.Long;
                    shr: (numBits: number | Long.Long) => Long.Long;
                    shiftRightUnsigned: (numBits: number | Long.Long) => Long.Long;
                    shru: (numBits: number | Long.Long) => Long.Long;
                    subtract: (subtrahend: string | number | Long.Long) => Long.Long;
                    sub: (subtrahend: string | number | Long.Long) => Long.Long;
                    toInt: () => number;
                    toNumber: () => number;
                    toBytes: (le?: boolean | undefined) => number[];
                    toBytesLE: () => number[];
                    toBytesBE: () => number[];
                    toSigned: () => Long.Long;
                    toString: (radix?: number | undefined) => string;
                    toUnsigned: () => Long.Long;
                    xor: (other: string | number | Long.Long) => Long.Long;
                } & Record<Exclude<keyof I["push"]["messages"][number]["timestamp"], keyof Long.Long>, never>) | undefined;
            } & Record<Exclude<keyof I["push"]["messages"][number], keyof WakuMessage>, never>)[] & Record<Exclude<keyof I["push"]["messages"], keyof {
                payload?: Uint8Array | undefined;
                contentTopic?: string | undefined;
                version?: number | undefined;
                timestampDeprecated?: number | undefined;
                timestamp?: string | number | Long.Long | undefined;
            }[]>, never>) | undefined;
        } & Record<Exclude<keyof I["push"], "messages">, never>) | undefined;
    } & Record<Exclude<keyof I, keyof FilterRPC>, never>>(object: I): FilterRPC;
};
declare type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;
export declare type DeepPartial<T> = T extends Builtin ? T : T extends Long ? string | number | Long : T extends Array<infer U> ? Array<DeepPartial<U>> : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>> : T extends {} ? {
    [K in keyof T]?: DeepPartial<T[K]>;
} : Partial<T>;
declare type KeysOfUnion<T> = T extends T ? keyof T : never;
export declare type Exact<P, I extends P> = P extends Builtin ? P : P & {
    [K in keyof P]: Exact<P[K], I[K]>;
} & Record<Exclude<keyof I, KeysOfUnion<P>>, never>;
export {};
