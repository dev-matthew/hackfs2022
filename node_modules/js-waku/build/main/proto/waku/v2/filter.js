"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.FilterRPC = exports.MessagePush = exports.FilterRequest_ContentFilter = exports.FilterRequest = exports.protobufPackage = void 0;
/* eslint-disable */
const long_1 = __importDefault(require("long"));
const minimal_1 = __importDefault(require("protobufjs/minimal"));
const message_1 = require("../../waku/v2/message");
exports.protobufPackage = "waku.v2";
function createBaseFilterRequest() {
    return { subscribe: false, topic: "", contentFilters: [] };
}
exports.FilterRequest = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.subscribe === true) {
            writer.uint32(8).bool(message.subscribe);
        }
        if (message.topic !== "") {
            writer.uint32(18).string(message.topic);
        }
        for (const v of message.contentFilters) {
            exports.FilterRequest_ContentFilter.encode(v, writer.uint32(26).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseFilterRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.subscribe = reader.bool();
                    break;
                case 2:
                    message.topic = reader.string();
                    break;
                case 3:
                    message.contentFilters.push(exports.FilterRequest_ContentFilter.decode(reader, reader.uint32()));
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            subscribe: isSet(object.subscribe) ? Boolean(object.subscribe) : false,
            topic: isSet(object.topic) ? String(object.topic) : "",
            contentFilters: Array.isArray(object?.contentFilters)
                ? object.contentFilters.map((e) => exports.FilterRequest_ContentFilter.fromJSON(e))
                : [],
        };
    },
    toJSON(message) {
        const obj = {};
        message.subscribe !== undefined && (obj.subscribe = message.subscribe);
        message.topic !== undefined && (obj.topic = message.topic);
        if (message.contentFilters) {
            obj.contentFilters = message.contentFilters.map((e) => e ? exports.FilterRequest_ContentFilter.toJSON(e) : undefined);
        }
        else {
            obj.contentFilters = [];
        }
        return obj;
    },
    fromPartial(object) {
        const message = createBaseFilterRequest();
        message.subscribe = object.subscribe ?? false;
        message.topic = object.topic ?? "";
        message.contentFilters =
            object.contentFilters?.map((e) => exports.FilterRequest_ContentFilter.fromPartial(e)) || [];
        return message;
    },
};
function createBaseFilterRequest_ContentFilter() {
    return { contentTopic: "" };
}
exports.FilterRequest_ContentFilter = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.contentTopic !== "") {
            writer.uint32(10).string(message.contentTopic);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseFilterRequest_ContentFilter();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.contentTopic = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            contentTopic: isSet(object.contentTopic)
                ? String(object.contentTopic)
                : "",
        };
    },
    toJSON(message) {
        const obj = {};
        message.contentTopic !== undefined &&
            (obj.contentTopic = message.contentTopic);
        return obj;
    },
    fromPartial(object) {
        const message = createBaseFilterRequest_ContentFilter();
        message.contentTopic = object.contentTopic ?? "";
        return message;
    },
};
function createBaseMessagePush() {
    return { messages: [] };
}
exports.MessagePush = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        for (const v of message.messages) {
            message_1.WakuMessage.encode(v, writer.uint32(10).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseMessagePush();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.messages.push(message_1.WakuMessage.decode(reader, reader.uint32()));
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            messages: Array.isArray(object?.messages)
                ? object.messages.map((e) => message_1.WakuMessage.fromJSON(e))
                : [],
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.messages) {
            obj.messages = message.messages.map((e) => e ? message_1.WakuMessage.toJSON(e) : undefined);
        }
        else {
            obj.messages = [];
        }
        return obj;
    },
    fromPartial(object) {
        const message = createBaseMessagePush();
        message.messages =
            object.messages?.map((e) => message_1.WakuMessage.fromPartial(e)) || [];
        return message;
    },
};
function createBaseFilterRPC() {
    return { requestId: "", request: undefined, push: undefined };
}
exports.FilterRPC = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.requestId !== "") {
            writer.uint32(10).string(message.requestId);
        }
        if (message.request !== undefined) {
            exports.FilterRequest.encode(message.request, writer.uint32(18).fork()).ldelim();
        }
        if (message.push !== undefined) {
            exports.MessagePush.encode(message.push, writer.uint32(26).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseFilterRPC();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.requestId = reader.string();
                    break;
                case 2:
                    message.request = exports.FilterRequest.decode(reader, reader.uint32());
                    break;
                case 3:
                    message.push = exports.MessagePush.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            requestId: isSet(object.requestId) ? String(object.requestId) : "",
            request: isSet(object.request)
                ? exports.FilterRequest.fromJSON(object.request)
                : undefined,
            push: isSet(object.push) ? exports.MessagePush.fromJSON(object.push) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        message.requestId !== undefined && (obj.requestId = message.requestId);
        message.request !== undefined &&
            (obj.request = message.request
                ? exports.FilterRequest.toJSON(message.request)
                : undefined);
        message.push !== undefined &&
            (obj.push = message.push ? exports.MessagePush.toJSON(message.push) : undefined);
        return obj;
    },
    fromPartial(object) {
        const message = createBaseFilterRPC();
        message.requestId = object.requestId ?? "";
        message.request =
            object.request !== undefined && object.request !== null
                ? exports.FilterRequest.fromPartial(object.request)
                : undefined;
        message.push =
            object.push !== undefined && object.push !== null
                ? exports.MessagePush.fromPartial(object.push)
                : undefined;
        return message;
    },
};
if (minimal_1.default.util.Long !== long_1.default) {
    minimal_1.default.util.Long = long_1.default;
    minimal_1.default.configure();
}
function isSet(value) {
    return value !== null && value !== undefined;
}
//# sourceMappingURL=filter.js.map