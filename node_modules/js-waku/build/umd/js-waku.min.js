!function(e,t){"object"==typeof exports&&"object"==typeof module?module.exports=t():"function"==typeof define&&define.amd?define([],t):"object"==typeof exports?exports.jswaku=t():e.jswaku=t()}(this,(function(){return(()=>{var e,t={3607:function(e,t,r){"use strict";var o=this&&this.__createBinding||(Object.create?function(e,t,r,o){void 0===o&&(o=r),Object.defineProperty(e,o,{enumerable:!0,get:function(){return t[r]}})}:function(e,t,r,o){void 0===o&&(o=r),e[o]=t[r]}),i=this&&this.__setModuleDefault||(Object.create?function(e,t){Object.defineProperty(e,"default",{enumerable:!0,value:t})}:function(e,t){e.default=t}),s=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var r in e)"default"!==r&&Object.prototype.hasOwnProperty.call(e,r)&&o(t,e,r);return i(t,e),t};Object.defineProperty(t,"__esModule",{value:!0}),t.StoreCodecs=t.WakuStore=t.PageDirection=t.waku_store=t.RelayCodecs=t.WakuRelay=t.waku_relay=t.PushResponse=t.LightPushCodec=t.WakuLightPush=t.waku_light_push=t.WakuMessage=t.waku_message=t.Protocols=t.DefaultPubSubTopic=t.Waku=t.waku=t.utils=t.enr=t.discovery=t.getPredefinedBootstrapNodes=t.getPublicKey=t.generateSymmetricKey=t.generatePrivateKey=void 0;var n=r(5474);Object.defineProperty(t,"generatePrivateKey",{enumerable:!0,get:function(){return n.generatePrivateKey}}),Object.defineProperty(t,"generateSymmetricKey",{enumerable:!0,get:function(){return n.generateSymmetricKey}}),Object.defineProperty(t,"getPublicKey",{enumerable:!0,get:function(){return n.getPublicKey}});var a=r(8994);Object.defineProperty(t,"getPredefinedBootstrapNodes",{enumerable:!0,get:function(){return a.getPredefinedBootstrapNodes}}),t.discovery=s(r(8994)),t.enr=s(r(9460)),t.utils=s(r(1721)),t.waku=s(r(607));var u=r(607);Object.defineProperty(t,"Waku",{enumerable:!0,get:function(){return u.Waku}}),Object.defineProperty(t,"DefaultPubSubTopic",{enumerable:!0,get:function(){return u.DefaultPubSubTopic}}),Object.defineProperty(t,"Protocols",{enumerable:!0,get:function(){return u.Protocols}}),t.waku_message=s(r(2560));var c=r(2560);Object.defineProperty(t,"WakuMessage",{enumerable:!0,get:function(){return c.WakuMessage}}),t.waku_light_push=s(r(7087));var d=r(7087);Object.defineProperty(t,"WakuLightPush",{enumerable:!0,get:function(){return d.WakuLightPush}}),Object.defineProperty(t,"LightPushCodec",{enumerable:!0,get:function(){return d.LightPushCodec}}),Object.defineProperty(t,"PushResponse",{enumerable:!0,get:function(){return d.PushResponse}}),t.waku_relay=s(r(2979));var l=r(2979);Object.defineProperty(t,"WakuRelay",{enumerable:!0,get:function(){return l.WakuRelay}}),Object.defineProperty(t,"RelayCodecs",{enumerable:!0,get:function(){return l.RelayCodecs}}),t.waku_store=s(r(5960));var p=r(5960);Object.defineProperty(t,"PageDirection",{enumerable:!0,get:function(){return p.PageDirection}}),Object.defineProperty(t,"WakuStore",{enumerable:!0,get:function(){return p.WakuStore}}),Object.defineProperty(t,"StoreCodecs",{enumerable:!0,get:function(){return p.StoreCodecs}})},5474:function(e,t,r){"use strict";var o=this&&this.__createBinding||(Object.create?function(e,t,r,o){void 0===o&&(o=r),Object.defineProperty(e,o,{enumerable:!0,get:function(){return t[r]}})}:function(e,t,r,o){void 0===o&&(o=r),e[o]=t[r]}),i=this&&this.__setModuleDefault||(Object.create?function(e,t){Object.defineProperty(e,"default",{enumerable:!0,value:t})}:function(e,t){e.default=t}),s=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var r in e)"default"!==r&&Object.prototype.hasOwnProperty.call(e,r)&&o(t,e,r);return i(t,e),t},n=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.verifySignature=t.compressPublicKey=t.keccak256=t.sign=t.getPublicKey=t.generateSymmetricKey=t.generatePrivateKey=t.sha256=t.randomBytes=t.getSubtle=void 0;const a=n(r(4031)),u=s(r(9656)),c=s(r(1094)),d=r(605),l=s(r(4231)),p=r(8340),f={node:a.default,web:"object"==typeof self&&"crypto"in self?self.crypto:void 0};t.getSubtle=function(){if(f.web)return f.web.subtle;if(f.node)return f.node.webcrypto.subtle;throw new Error("The environment doesn't have Crypto Subtle API (if in the browser, be sure to use to be in a secure context, ie, https)")},t.randomBytes=u.utils.randomBytes,t.sha256=u.utils.sha256,t.generatePrivateKey=function(){return(0,t.randomBytes)(p.PrivateKeySize)},t.generateSymmetricKey=function(){return(0,t.randomBytes)(l.KeySize)},t.getPublicKey=u.getPublicKey,t.sign=async function(e,t){const[r,o]=await u.sign(e,t,{recovered:!0,der:!1});return(0,d.concat)([r,[o]],r.length+1)},t.keccak256=function(e){return new Uint8Array(c.keccak256.arrayBuffer(e))},t.compressPublicKey=function(e){return 64===e.length&&(e=(0,d.concat)([[4],e],65)),u.Point.fromHex(e).toRawBytes(!0)},t.verifySignature=function(e,t,r){try{const o=u.Signature.fromCompact(e.slice(0,64));return u.verify(o,t,r)}catch{return!1}}},4134:function(e,t,r){"use strict";var o=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.Bootstrap=void 0;const i=o(r(1227)),s=r(6584),n=r(6216),a=r(8994),u=(0,i.default)("waku:discovery:bootstrap");class c{constructor(e){const t=e.maxPeers??c.DefaultMaxPeers;if(e.default)u("Use hosted list of peers."),this.getBootstrapPeers=()=>Promise.resolve((0,a.getPredefinedBootstrapNodes)(void 0,t));else if(void 0!==e.peers&&e.peers.length>0){const r=e.peers.map((e=>"string"==typeof e?new s.Multiaddr(e):e)),o=(0,a.getPseudoRandomSubset)(r,t);u("Use provided list of peers (reduced to maxPeers)",r.map((e=>e.toString()))),this.getBootstrapPeers=()=>Promise.resolve(o)}else if("function"==typeof e.getPeers){u("Bootstrap: Use provided getPeers function.");const r=e.getPeers;this.getBootstrapPeers=async()=>{const e=await r();return(0,a.getPseudoRandomSubset)(e,t).map((e=>new s.Multiaddr(e)))}}else if(e.enrUrl){const t=e.wantedNodeCapabilityCount;if(!t)throw"`wantedNodeCapabilityCount` must be defined when using `enrUrl`";const r=e.enrUrl;u("Use provided EIP-1459 ENR Tree URL.");const o=n.DnsNodeDiscovery.dnsOverHttp();this.getBootstrapPeers=async()=>{const e=await o.getPeers([r],t);return u(`Found ${e.length} peers`),e.map((e=>e.getFullMultiaddrs())).flat()}}else u("No bootstrap method specified, no peer will be returned"),this.getBootstrapPeers=void 0}}t.Bootstrap=c,c.DefaultMaxPeers=1},6216:function(e,t,r){"use strict";var o=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.DnsNodeDiscovery=void 0;const i=r(1227),s=r(9460),n=r(1613),a=r(8395),u=o(r(8407)),c=(0,i.debug)("waku:discovery:dns");class d{constructor(e){this._errorTolerance=10,this._DNSTreeCache={},this.dns=e}static dnsOverHttp(e){const t=new n.DnsOverHttps(e);return new d(t)}async getPeers(e,t){const r=Math.floor(Math.random()*e.length),{publicKey:o,domain:i}=a.ENRTree.parseTree(e[r]),s={domain:i,publicKey:o,visits:{}},n=await(0,u.default)(t,this._errorTolerance,(()=>this._search(i,s)));return c("retrieved peers: ",n),n}async _search(e,t){try{const r=await this._getTXTRecord(e,t);let o,i;t.visits[e]=!0;const n=function(e){return e.startsWith(a.ENRTree.ROOT_PREFIX)?a.ENRTree.ROOT_PREFIX:e.startsWith(a.ENRTree.BRANCH_PREFIX)?a.ENRTree.BRANCH_PREFIX:e.startsWith(a.ENRTree.RECORD_PREFIX)?a.ENRTree.RECORD_PREFIX:""}(r);try{switch(n){case a.ENRTree.ROOT_PREFIX:return o=a.ENRTree.parseAndVerifyRoot(r,t.publicKey),await this._search(o,t);case a.ENRTree.BRANCH_PREFIX:return i=a.ENRTree.parseBranch(r),o=function(e,t){const r={};for(const[o,i]of e.entries())t.visits[i]&&(r[o]=!0);if(Object.keys(r).length===e.length)throw new Error("Unresolvable circular path detected");let o;do{o=Math.floor(Math.random()*e.length)}while(r[o]);return e[o]}(i,t),await this._search(o,t);case a.ENRTree.RECORD_PREFIX:return s.ENR.decodeTxt(r);default:return null}}catch(t){return c(`Failed to search DNS tree ${n} at subdomain ${e}: ${t}`),null}}catch(t){return c(`Failed to retrieve TXT record at subdomain ${e}: ${t}`),null}}async _getTXTRecord(e,t){if(this._DNSTreeCache[e])return this._DNSTreeCache[e];const r=e!==t.domain?`${e}.${t.domain}`:t.domain,o=await this.dns.resolveTXT(r);if(!o.length)throw new Error("Received empty result array while fetching TXT record");if(!o[0].length)throw new Error("Received empty TXT record");const i=o.join("");return this._DNSTreeCache[e]=i,i}}t.DnsNodeDiscovery=d},1613:(e,t,r)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.DnsOverHttps=void 0;const o=r(6176),i=r(1721),{cloudflare:s,google:n,opendns:a}=o.endpoints;t.DnsOverHttps=class{constructor(e=[s,n,a]){this.endpoints=e}async resolveTXT(e){const t=(await(0,o.query)({questions:[{type:"TXT",name:e}]})).answers.map((e=>e.data)),r=[];return t.forEach((e=>{"string"==typeof e?r.push(e):Array.isArray(e)?e.forEach((e=>{"string"==typeof e?r.push(e):r.push((0,i.bytesToUtf8)(e))})):r.push((0,i.bytesToUtf8)(e))})),r}}},8395:function(e,t,r){"use strict";var o=this&&this.__createBinding||(Object.create?function(e,t,r,o){void 0===o&&(o=r),Object.defineProperty(e,o,{enumerable:!0,get:function(){return t[r]}})}:function(e,t,r,o){void 0===o&&(o=r),e[o]=t[r]}),i=this&&this.__setModuleDefault||(Object.create?function(e,t){Object.defineProperty(e,"default",{enumerable:!0,value:t})}:function(e,t){e.default=t}),s=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var r in e)"default"!==r&&Object.prototype.hasOwnProperty.call(e,r)&&o(t,e,r);return i(t,e),t};Object.defineProperty(t,"__esModule",{value:!0}),t.ENRTree=void 0;const n=s(r(9090)),a=r(2217),u=r(5474),c=r(9460),d=r(1721);class l{static parseAndVerifyRoot(e,t){if(!e.startsWith(this.ROOT_PREFIX))throw new Error(`ENRTree root entry must start with '${this.ROOT_PREFIX}'`);const r=l.parseRootValues(e),o=n.decode.asBytes(t),i=e.split(" sig")[0],s=(0,d.utf8ToBytes)(i),c=(0,a.fromString)(r.signature,"base64url").slice(0,64);if(!(0,u.verifySignature)(c,(0,u.keccak256)(s),new Uint8Array(o)))throw new Error("Unable to verify ENRTree root signature");return r.eRoot}static parseRootValues(e){const t=e.match(/^enrtree-root:v1 e=([^ ]+) l=([^ ]+) seq=(\d+) sig=([^ ]+)$/);if(!Array.isArray(t))throw new Error("Could not parse ENRTree root entry");t.shift();const[r,o,i,s]=t;if(!r)throw new Error("Could not parse 'e' value from ENRTree root entry");if(!o)throw new Error("Could not parse 'l' value from ENRTree root entry");if(!i)throw new Error("Could not parse 'seq' value from ENRTree root entry");if(!s)throw new Error("Could not parse 'sig' value from ENRTree root entry");return{eRoot:r,lRoot:o,seq:Number(i),signature:s}}static parseTree(e){if(!e.startsWith(this.TREE_PREFIX))throw new Error(`ENRTree tree entry must start with '${this.TREE_PREFIX}'`);const t=e.match(/^enrtree:\/\/([^@]+)@(.+)$/);if(!Array.isArray(t))throw new Error("Could not parse ENRTree tree entry");t.shift();const[r,o]=t;if(!r)throw new Error("Could not parse public key from ENRTree tree entry");if(!o)throw new Error("Could not parse domain from ENRTree tree entry");return{publicKey:r,domain:o}}static parseBranch(e){if(!e.startsWith(this.BRANCH_PREFIX))throw new Error(`ENRTree branch entry must start with '${this.BRANCH_PREFIX}'`);return e.split(this.BRANCH_PREFIX)[1].split(",")}}t.ENRTree=l,l.RECORD_PREFIX=c.ENR.RECORD_PREFIX,l.TREE_PREFIX="enrtree:",l.BRANCH_PREFIX="enrtree-branch:",l.ROOT_PREFIX="enrtree-root:"},8407:(e,t,r)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0});const o=(0,r(1227).debug)("waku:discovery:fetch_nodes");function i(e,t){return t.relay>=e.relay&&t.store>=e.store&&t.filter>=e.filter&&t.lightPush>=e.lightPush}function s(e,t){if(!e.nodeId)return!1;for(const r of t)if(e.nodeId===r.nodeId)return!1;return!0}function n(e,t,r){if(i(t,r))throw"Internal Error: Waku2 wanted capabilities are already fulfilled";const o=function(e,t){return{relay:t.relay<e.relay,store:t.store<e.store,filter:t.filter<e.filter,lightPush:t.lightPush<e.lightPush}}(t,r);return o.relay&&e.relay||o.store&&e.store||o.filter&&e.filter||o.lightPush&&e.lightPush}t.default=async function(e,t,r){const a={relay:e.relay??0,store:e.store??0,filter:e.filter??0,lightPush:e.lightPush??0},u=a.relay+a.store+a.filter+a.lightPush,c={relay:0,store:0,filter:0,lightPush:0};let d=0;const l=[];for(;!i(a,c)&&d<u+t;){const e=await r();e&&s(e,l)&&(e.waku2&&n(e.waku2,a,c)&&(p=e.waku2,f=c,p.relay&&(f.relay+=1),p.store&&(f.store+=1),p.filter&&(f.filter+=1),p.lightPush&&(f.lightPush+=1),l.push(e)),o(`got new peer candidate from DNS address=${e.nodeId}@${e.ip}`)),d++}var p,f;return l}},8994:function(e,t,r){"use strict";var o=this&&this.__createBinding||(Object.create?function(e,t,r,o){void 0===o&&(o=r),Object.defineProperty(e,o,{enumerable:!0,get:function(){return t[r]}})}:function(e,t,r,o){void 0===o&&(o=r),e[o]=t[r]}),i=this&&this.__setModuleDefault||(Object.create?function(e,t){Object.defineProperty(e,"default",{enumerable:!0,value:t})}:function(e,t){e.default=t}),s=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var r in e)"default"!==r&&Object.prototype.hasOwnProperty.call(e,r)&&o(t,e,r);return i(t,e),t};Object.defineProperty(t,"__esModule",{value:!0}),t.getPseudoRandomSubset=t.ENRTree=t.DnsOverHttps=t.dns=t.Bootstrap=t.predefined=t.getPredefinedBootstrapNodes=void 0;const n=r(663);var a=r(5417);Object.defineProperty(t,"getPredefinedBootstrapNodes",{enumerable:!0,get:function(){return a.getPredefinedBootstrapNodes}}),t.predefined=s(r(5417));var u=r(4134);Object.defineProperty(t,"Bootstrap",{enumerable:!0,get:function(){return u.Bootstrap}}),t.dns=s(r(6216));var c=r(1613);Object.defineProperty(t,"DnsOverHttps",{enumerable:!0,get:function(){return c.DnsOverHttps}});var d=r(8395);Object.defineProperty(t,"ENRTree",{enumerable:!0,get:function(){return d.ENRTree}}),t.getPseudoRandomSubset=function(e,t){return e.length<=t?e:(0,n.shuffle)(e).slice(0,t)}},5417:(e,t,r)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.fleets=t.getPredefinedBootstrapNodes=t.Fleet=t.DefaultWantedNumber=void 0;const o=r(6584),i=r(8994);var s;t.DefaultWantedNumber=1,function(e){e.Prod="prod",e.Test="test"}(s=t.Fleet||(t.Fleet={})),t.getPredefinedBootstrapNodes=function(e=s.Prod,r=t.DefaultWantedNumber){if(r<=0)return[];let n;switch(e){case s.Prod:n=t.fleets.fleets["wakuv2.prod"]["waku-websocket"];break;case s.Test:n=t.fleets.fleets["wakuv2.test"]["waku-websocket"];break;default:n=t.fleets.fleets["wakuv2.prod"]["waku-websocket"]}return n=Object.values(n),n=n.map((e=>new o.Multiaddr(e))),(0,i.getPseudoRandomSubset)(n,r)},t.fleets={fleets:{"wakuv2.prod":{"waku-websocket":{"node-01.ac-cn-hongkong-c.wakuv2.prod":"/dns4/node-01.ac-cn-hongkong-c.wakuv2.prod.statusim.net/tcp/443/wss/p2p/16Uiu2HAm4v86W3bmT1BiH6oSPzcsSr24iDQpSN5Qa992BCjjwgrD","node-01.do-ams3.wakuv2.prod":"/dns4/node-01.do-ams3.wakuv2.prod.statusim.net/tcp/443/wss/p2p/16Uiu2HAmL5okWopX7NqZWBUKVqW8iUxCEmd5GMHLVPwCgzYzQv3e","node-01.gc-us-central1-a.wakuv2.prod":"/dns4/node-01.gc-us-central1-a.wakuv2.prod.statusim.net/tcp/443/wss/p2p/16Uiu2HAmVkKntsECaYfefR1V2yCR79CegLATuTPE6B9TxgxBiiiA"}},"wakuv2.test":{"waku-websocket":{"node-01.ac-cn-hongkong-c.wakuv2.test":"/dns4/node-01.ac-cn-hongkong-c.wakuv2.test.statusim.net/tcp/443/wss/p2p/16Uiu2HAkvWiyFsgRhuJEb9JfjYxEkoHLgnUQmr1N5mKWnYjxYRVm","node-01.do-ams3.wakuv2.test":"/dns4/node-01.do-ams3.wakuv2.test.statusim.net/tcp/443/wss/p2p/16Uiu2HAmPLe7Mzm8TsYUubgCAW1aJoeFScxrLj8ppHFivPo97bUZ","node-01.gc-us-central1-a.wakuv2.test":"/dns4/node-01.gc-us-central1-a.wakuv2.test.statusim.net/tcp/443/wss/p2p/16Uiu2HAmJb2e28qLXxT5kZxVUUoJt72EMzNGXB47Rxx5hw3q4YjS"}}}}},2611:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.MULTIADDR_LENGTH_SIZE=t.ERR_NO_SIGNATURE=t.ERR_INVALID_ID=t.MAX_RECORD_SIZE=void 0,t.MAX_RECORD_SIZE=300,t.ERR_INVALID_ID="Invalid record id",t.ERR_NO_SIGNATURE="No valid signature found",t.MULTIADDR_LENGTH_SIZE=2},6995:function(e,t,r){"use strict";var o=this&&this.__createBinding||(Object.create?function(e,t,r,o){void 0===o&&(o=r),Object.defineProperty(e,o,{enumerable:!0,get:function(){return t[r]}})}:function(e,t,r,o){void 0===o&&(o=r),e[o]=t[r]}),i=this&&this.__setModuleDefault||(Object.create?function(e,t){Object.defineProperty(e,"default",{enumerable:!0,value:t})}:function(e,t){e.default=t}),s=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var r in e)"default"!==r&&Object.prototype.hasOwnProperty.call(e,r)&&o(t,e,r);return i(t,e),t},n=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.ENR=void 0;const a=s(r(1719)),u=n(r(1227)),c=r(6584),d=n(r(9918)),l=r(2217),p=r(2263),f=r(4676),h=r(5474),g=r(1721),y=r(2611),b=r(2569),m=r(4751),v=s(r(4670)),R=r(7024),P=(0,u.default)("waku:enr");class _ extends Map{constructor(e={},t=BigInt(1),r=null){super(Object.entries(e)),this.seq=t,this.signature=r}static async create(e={},t=BigInt(1),r=null){const o=new _(e,t,r);try{const e=o.publicKey;if(e){const t=(0,b.createKeypair)(o.keypairType,void 0,e);o.peerId=await(0,b.createPeerIdFromKeypair)(t)}}catch(e){P("Could not calculate peer id for ENR",e)}return o}static createV4(e,t={}){return 33!==e.length&&(e=(0,h.compressPublicKey)(e)),_.create({...t,id:(0,g.utf8ToBytes)("v4"),secp256k1:e})}static createFromPeerId(e,t={}){const r=(0,b.createKeypairFromPeerId)(e);if(r.type===b.KeypairType.secp256k1)return _.createV4(r.publicKey,t);throw new Error}static async decodeFromValues(e){if(!Array.isArray(e))throw new Error("Decoded ENR must be an array");if(e.length%2!=0)throw new Error("Decoded ENR must have an even number of elements");const[t,r,...o]=e;if(!t||Array.isArray(t))throw new Error("Decoded ENR invalid signature: must be a byte array");if(!r||Array.isArray(r))throw new Error("Decoded ENR invalid sequence number: must be a byte array");const i={};for(let e=0;e<o.length;e+=2)try{i[(0,g.bytesToUtf8)(o[e])]=o[e+1]}catch(t){P("Failed to decode ENR key to UTF-8, skipping it",o[e],t)}const s="0x"+(r.length?(0,g.bytesToHex)(r):"00"),n=await _.create(i,BigInt(s),t),u=(0,g.hexToBytes)(a.encode([r,...o]));if(!n.verify(u,t))throw new Error("Unable to verify ENR signature");return n}static decode(e){const t=a.decode(e).map(g.hexToBytes);return _.decodeFromValues(t)}static decodeTxt(e){if(!e.startsWith(this.RECORD_PREFIX))throw new Error(`"string encoded ENR must start with '${this.RECORD_PREFIX}'`);return _.decode((0,l.fromString)(e.slice(4),"base64url"))}set(e,t){return this.signature=null,this.seq++,super.set(e,t)}get id(){const e=this.get("id");if(!e)throw new Error("id not found.");return(0,g.bytesToUtf8)(e)}get keypairType(){if("v4"===this.id)return b.KeypairType.secp256k1;throw new Error(y.ERR_INVALID_ID)}get publicKey(){if("v4"===this.id)return this.get("secp256k1");throw new Error(y.ERR_INVALID_ID)}get keypair(){if(this.publicKey){const e=this.publicKey;return(0,b.createKeypair)(this.keypairType,void 0,e)}}get nodeId(){if("v4"===this.id)return this.publicKey?v.nodeId(this.publicKey):void 0;throw new Error(y.ERR_INVALID_ID)}get ip(){const e=this.get("ip");return e?d.default.toString(c.protocols.names.ip4.code,e):void 0}set ip(e){e?this.set("ip",d.default.toBytes(c.protocols.names.ip4.code,e)):this.delete("ip")}get tcp(){const e=this.get("tcp");return e?Number(d.default.toString(c.protocols.names.tcp.code,e)):void 0}set tcp(e){void 0===e?this.delete("tcp"):this.set("tcp",d.default.toBytes(c.protocols.names.tcp.code,e))}get udp(){const e=this.get("udp");return e?Number(d.default.toString(c.protocols.names.udp.code,e)):void 0}set udp(e){void 0===e?this.delete("udp"):this.set("udp",d.default.toBytes(c.protocols.names.udp.code,e))}get ip6(){const e=this.get("ip6");return e?d.default.toString(c.protocols.names.ip6.code,e):void 0}set ip6(e){e?this.set("ip6",d.default.toBytes(c.protocols.names.ip6.code,e)):this.delete("ip6")}get tcp6(){const e=this.get("tcp6");return e?Number(d.default.toString(c.protocols.names.tcp.code,e)):void 0}set tcp6(e){void 0===e?this.delete("tcp6"):this.set("tcp6",d.default.toBytes(c.protocols.names.tcp.code,e))}get udp6(){const e=this.get("udp6");return e?Number(d.default.toString(c.protocols.names.udp.code,e)):void 0}set udp6(e){void 0===e?this.delete("udp6"):this.set("udp6",d.default.toBytes(c.protocols.names.udp.code,e))}get multiaddrs(){const e=this.get("multiaddrs");if(e)return(0,m.decodeMultiaddrs)(e)}set multiaddrs(e){if(void 0===e)this.delete("multiaddrs");else{const t=(0,m.encodeMultiaddrs)(e);this.set("multiaddrs",t)}}getLocationMultiaddr(e){if("udp"===e)return this.getLocationMultiaddr("udp4")||this.getLocationMultiaddr("udp6");if("tcp"===e)return this.getLocationMultiaddr("tcp4")||this.getLocationMultiaddr("tcp6");const t=e.endsWith("6"),r=this.get(t?"ip6":"ip");if(!r)return;const o=e.startsWith("udp"),i=e.startsWith("tcp");let s,n;if(o)s="udp",n=t?this.get("udp6"):this.get("udp");else{if(!i)return;s="tcp",n=t?this.get("tcp6"):this.get("tcp")}if(!n)return;const a=c.protocols.names[t?"ip6":"ip4"],u=a.size/8,d=c.protocols.names[s],l=(0,f.encode)(d.code),p=new Uint8Array(3+u+l.length);return p[0]=a.code,p.set(r,1),p.set(l,1+u),p.set(n,1+u+l.length),new c.Multiaddr(p)}setLocationMultiaddr(e){const t=e.protoNames();if(2!==t.length&&"udp"!==t[1]&&"tcp"!==t[1])throw new Error("Invalid multiaddr");const r=e.tuples();if(!r[0][1]||!r[1][1])throw new Error("Invalid multiaddr");4===r[0][0]?(this.set("ip",r[0][1]),this.set(t[1],r[1][1])):(this.set("ip6",r[0][1]),this.set(t[1]+"6",r[1][1]))}getFullMultiaddr(e){if(this.peerId){const t=this.getLocationMultiaddr(e);if(t)return t.encapsulate(`/p2p/${this.peerId.toB58String()}`)}}getFullMultiaddrs(){if(this.peerId&&this.multiaddrs){const e=this.peerId;return this.multiaddrs.map((t=>t.encapsulate(`/p2p/${e.toB58String()}`)))}return[]}get waku2(){const e=this.get("waku2");if(e)return(0,R.decodeWaku2)(e[0])}set waku2(e){if(void 0===e)this.delete("waku2");else{const t=(0,R.encodeWaku2)(e);this.set("waku2",new Uint8Array([t]))}}verify(e,t){if(!this.get("id")||"v4"!==this.id)throw new Error(y.ERR_INVALID_ID);if(!this.publicKey)throw new Error("Failed to verify ENR: No public key");return(0,h.verifySignature)(t,(0,h.keccak256)(e),this.publicKey)}async sign(e,t){if("v4"!==this.id)throw new Error(y.ERR_INVALID_ID);return this.signature=await v.sign(t,e),this.signature}async encodeToValues(e){const t=Array.from(this.keys()).sort(((e,t)=>e.localeCompare(t))).map((e=>[e,this.get(e)])).map((([e,t])=>[(0,g.utf8ToBytes)(e),t])).flat();if(t.unshift(new Uint8Array([Number(this.seq)])),e)t.unshift(await this.sign((0,g.hexToBytes)(a.encode(t)),e));else{if(!this.signature)throw new Error(y.ERR_NO_SIGNATURE);t.unshift(this.signature)}return t}async encode(e){const t=(0,g.hexToBytes)(a.encode(await this.encodeToValues(e)));if(t.length>=y.MAX_RECORD_SIZE)throw new Error("ENR must be less than 300 bytes");return t}async encodeTxt(e){return _.RECORD_PREFIX+(0,p.toString)(await this.encode(e),"base64url")}}t.ENR=_,_.RECORD_PREFIX="enr:"},9460:function(e,t,r){"use strict";var o=this&&this.__createBinding||(Object.create?function(e,t,r,o){void 0===o&&(o=r),Object.defineProperty(e,o,{enumerable:!0,get:function(){return t[r]}})}:function(e,t,r,o){void 0===o&&(o=r),e[o]=t[r]}),i=this&&this.__setModuleDefault||(Object.create?function(e,t){Object.defineProperty(e,"default",{enumerable:!0,value:t})}:function(e,t){e.default=t}),s=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var r in e)"default"!==r&&Object.prototype.hasOwnProperty.call(e,r)&&o(t,e,r);return i(t,e),t},n=this&&this.__exportStar||function(e,t){for(var r in e)"default"===r||Object.prototype.hasOwnProperty.call(t,r)||o(t,e,r)};Object.defineProperty(t,"__esModule",{value:!0}),t.v4=void 0;const a=s(r(4670));t.v4=a,n(r(2611),t),n(r(6995),t),n(r(6734),t),n(r(2569),t),n(r(7024),t)},2569:function(e,t,r){"use strict";var o=this&&this.__createBinding||(Object.create?function(e,t,r,o){void 0===o&&(o=r),Object.defineProperty(e,o,{enumerable:!0,get:function(){return t[r]}})}:function(e,t,r,o){void 0===o&&(o=r),e[o]=t[r]}),i=this&&this.__exportStar||function(e,t){for(var r in e)"default"===r||Object.prototype.hasOwnProperty.call(t,r)||o(t,e,r)},s=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.createKeypairFromPeerId=t.createPeerIdFromKeypair=t.createKeypair=t.generateKeypair=t.ERR_TYPE_NOT_IMPLEMENTED=void 0;const n=r(2204),a=r(8103),u=s(r(8785)),c=r(1175),d=r(7922),{keysPBM:l,supportedKeys:p}=n.keys;function f(e,r,o){if(e===d.KeypairType.secp256k1)return new c.Secp256k1Keypair(r,o);throw new Error(t.ERR_TYPE_NOT_IMPLEMENTED)}t.ERR_TYPE_NOT_IMPLEMENTED="Keypair type not implemented",i(r(7922),t),i(r(1175),t),t.generateKeypair=async function(e){if(e===d.KeypairType.secp256k1)return await c.Secp256k1Keypair.generate();throw new Error(t.ERR_TYPE_NOT_IMPLEMENTED)},t.createKeypair=f,t.createPeerIdFromKeypair=async function(e){if(e.type===d.KeypairType.secp256k1){const t=e.hasPrivateKey()?new p.secp256k1.Secp256k1PrivateKey(e.privateKey,e.publicKey):void 0,r=new p.secp256k1.Secp256k1PublicKey(e.publicKey),o=await a.identity.digest(r.bytes);return new u.default(o.bytes,t,r)}throw new Error(t.ERR_TYPE_NOT_IMPLEMENTED)},t.createKeypairFromPeerId=function(e){const t=l.PublicKey.decode(e.pubKey.bytes);return f(t.Type,e.privKey?e.privKey.marshal():void 0,t.Data)}},1175:function(e,t,r){"use strict";var o=this&&this.__createBinding||(Object.create?function(e,t,r,o){void 0===o&&(o=r),Object.defineProperty(e,o,{enumerable:!0,get:function(){return t[r]}})}:function(e,t,r,o){void 0===o&&(o=r),e[o]=t[r]}),i=this&&this.__setModuleDefault||(Object.create?function(e,t){Object.defineProperty(e,"default",{enumerable:!0,value:t})}:function(e,t){e.default=t}),s=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var r in e)"default"!==r&&Object.prototype.hasOwnProperty.call(e,r)&&o(t,e,r);return i(t,e),t};Object.defineProperty(t,"__esModule",{value:!0}),t.Secp256k1Keypair=void 0;const n=s(r(9656)),a=r(5474),u=r(7922);class c{constructor(e,t){let r=t;if(r&&(r=(0,a.compressPublicKey)(r)),(this._privateKey=e)&&!this.privateKeyVerify())throw new Error("Invalid private key");if((this._publicKey=r)&&!this.publicKeyVerify())throw new Error("Invalid public key");this.type=u.KeypairType.secp256k1}static async generate(){const e=(0,a.randomBytes)(32),t=n.getPublicKey(e);return new c(e,t)}privateKeyVerify(e=this._privateKey){return!e||n.utils.isValidPrivateKey(e)}publicKeyVerify(e=this._publicKey){if(e)try{return n.Point.fromHex(e),!0}catch{return!1}return!0}get privateKey(){if(!this._privateKey)throw new Error;return this._privateKey}get publicKey(){if(!this._publicKey)throw new Error;return this._publicKey}hasPrivateKey(){return!!this._privateKey}}t.Secp256k1Keypair=c},7922:(e,t)=>{"use strict";var r;Object.defineProperty(t,"__esModule",{value:!0}),t.KeypairType=void 0,(r=t.KeypairType||(t.KeypairType={}))[r.rsa=0]="rsa",r[r.ed25519=1]="ed25519",r[r.secp256k1=2]="secp256k1"},4751:(e,t,r)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.encodeMultiaddrs=t.decodeMultiaddrs=void 0;const o=r(6584),i=r(2611);t.decodeMultiaddrs=function(e){const t=[];let r=0;for(;r<e.length;){const s=new DataView(e.buffer,r,i.MULTIADDR_LENGTH_SIZE).getUint16(0);r+=i.MULTIADDR_LENGTH_SIZE;const n=e.slice(r,r+s);r+=s;const a=new o.Multiaddr(n);t.push(a)}return t},t.encodeMultiaddrs=function(e){const t=e.reduce(((e,t)=>e+i.MULTIADDR_LENGTH_SIZE+t.bytes.length),0),r=new Uint8Array(t),o=new DataView(r.buffer);let s=0;return e.forEach((e=>{if(e.getPeerId())throw new Error("`multiaddr` field MUST not contain peer id");o.setUint16(s,e.bytes.length),s+=i.MULTIADDR_LENGTH_SIZE,r.set(e.bytes,s),s+=e.bytes.length})),r}},6734:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0})},4670:function(e,t,r){"use strict";var o=this&&this.__createBinding||(Object.create?function(e,t,r,o){void 0===o&&(o=r),Object.defineProperty(e,o,{enumerable:!0,get:function(){return t[r]}})}:function(e,t,r,o){void 0===o&&(o=r),e[o]=t[r]}),i=this&&this.__setModuleDefault||(Object.create?function(e,t){Object.defineProperty(e,"default",{enumerable:!0,value:t})}:function(e,t){e.default=t}),s=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var r in e)"default"!==r&&Object.prototype.hasOwnProperty.call(e,r)&&o(t,e,r);return i(t,e),t};Object.defineProperty(t,"__esModule",{value:!0}),t.nodeId=t.sign=void 0;const n=s(r(9656)),a=r(5474),u=r(1721);t.sign=async function(e,t){return n.sign((0,a.keccak256)(t),e,{der:!1})},t.nodeId=function(e){const t=n.Point.fromHex(e).toRawBytes(!1);return(0,u.bytesToHex)((0,a.keccak256)(t.slice(1)))}},7024:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.decodeWaku2=t.encodeWaku2=void 0,t.encodeWaku2=function(e){let t=0;return e.lightPush&&(t+=1),t<<=1,e.filter&&(t+=1),t<<=1,e.store&&(t+=1),t<<=1,e.relay&&(t+=1),t},t.decodeWaku2=function(e){const t={relay:!1,store:!1,filter:!1,lightPush:!1};return e%2&&(t.relay=!0),(e>>=1)%2&&(t.store=!0),(e>>=1)%2&&(t.filter=!0),(e>>=1)%2&&(t.lightPush=!0),t}},5187:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.getPeersForProtocol=t.selectRandomPeer=void 0,t.selectRandomPeer=async function(e){const t=[];for await(const r of e)t.push(r);if(0!==t.length)return t[Math.round(Math.random()*(t.length-1))]},t.getPeersForProtocol=async function*(e,t){for await(const r of e.peerStore.getPeers()){let e=!1;for(let o=0;o<t.length;o++)if(r.protocols.includes(t[o])){e=!0;break}e&&(yield r)}}},1721:(e,t,r)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.utf8ToBytes=t.bytesToUtf8=t.bytesToHex=t.hexToBytes=void 0;const o=r(2217),i=r(2263);t.hexToBytes=function(e){if("string"==typeof e){const t=e.replace(/^0x/i,"");return(0,o.fromString)(t,"base16")}return e},t.bytesToHex=e=>(0,i.toString)(e,"base16"),t.bytesToUtf8=e=>(0,i.toString)(e,"utf8"),t.utf8ToBytes=e=>(0,o.fromString)(e,"utf8")},607:function(e,t,r){"use strict";var o=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.Waku=t.Protocols=t.DefaultPubSubTopic=t.DefaultRelayKeepAliveValueSecs=t.DefaultPingKeepAliveValueSecs=void 0;const i=r(2641),s=o(r(1227)),n=o(r(6384)),a=o(r(3100)),u=o(r(1267)),c=o(r(9846)),d=o(r(40)),l=o(r(5466)),p=r(6584),f=o(r(8785)),h=r(8994),g=r(9243),y=r(7087),b=r(2560),m=r(2979),v=r(6559),R=r(5960),P=c.default.prototype[Symbol.toStringTag];t.DefaultPingKeepAliveValueSecs=0,t.DefaultRelayKeepAliveValueSecs=300,t.DefaultPubSubTopic="/waku/2/default-waku/proto";const _=(0,s.default)("waku:waku");var T;!function(e){e.Relay="relay",e.Store="store",e.LightPush="lightpush",e.Filter="filter"}(T=t.Protocols||(t.Protocols={}));class w{constructor(e,r,o,i,s){this.libp2p=r,this.relay=r.pubsub,this.store=o,this.filter=s,this.lightPush=i,this.pingKeepAliveTimers={},this.relayKeepAliveTimers={};const n=e.pingKeepAlive||t.DefaultPingKeepAliveValueSecs,a=e.relayKeepAlive||t.DefaultRelayKeepAliveValueSecs;r.connectionManager.on("peer:connect",(e=>{this.startKeepAlive(e.remotePeer,n,a)})),r.connectionManager.on("peer:disconnect",(e=>{this.stopKeepAlive(e.remotePeer)})),e?.decryptionKeys?.forEach((e=>{this.addDecryptionKey(e)}))}static async create(e){const t=Object.assign({},e?.libp2p);if(t.config=Object.assign({transport:{[P]:{filter:d.default.all}}},e?.libp2p?.config),e?.pubSubTopic&&(t.config.pubsub=Object.assign({pubSubTopic:e.pubSubTopic},t.config.pubsub)),t.modules=Object.assign({},e?.libp2p?.modules),t.modules=Object.assign({transport:[c.default]},e?.libp2p?.modules),t.modules=Object.assign(t.modules,{streamMuxer:[u.default],connEncryption:[new i.Noise(e?.staticNoiseKey)],pubsub:m.WakuRelay}),e?.bootstrap){const r=new h.Bootstrap(e?.bootstrap);if(void 0!==r.getBootstrapPeers)try{const e=await r.getBootstrapPeers();t.modules=Object.assign(t.modules,{peerDiscovery:[a.default]}),t.config.peerDiscovery={[a.default.tag]:{list:e,enabled:!0}}}catch(e){_("Failed to retrieve bootstrap nodes",e)}}const r=await n.default.create(t),o=new R.WakuStore(r,{pubSubTopic:e?.pubSubTopic}),s=new y.WakuLightPush(r),l=new g.WakuFilter(r);return await r.start(),new w(e||{},r,o,s,l)}async dial(e,t){const r=t??[T.Relay],o=[];if(r.includes(T.Relay)&&m.RelayCodecs.forEach((e=>o.push(e))),r.includes(T.Store))for(const e of Object.values(R.StoreCodecs))o.push(e);return r.includes(T.LightPush)&&o.push(y.LightPushCodec),r.includes(T.Filter)&&o.push(g.FilterCodec),this.libp2p.dialProtocol(e,o)}addPeerToAddressBook(e,t){let r;r="string"==typeof e?f.default.createFromB58String(e):e;const o=t.map((e=>"string"==typeof e?(0,p.multiaddr)(e):e));this.libp2p.peerStore.addressBook.set(r,o)}async stop(){return this.libp2p.stop()}addDecryptionKey(e,t){this.relay.addDecryptionKey(e,t),this.store.addDecryptionKey(e,t),this.filter.addDecryptionKey(e,t)}deleteDecryptionKey(e){this.relay.deleteDecryptionKey(e),this.store.deleteDecryptionKey(e),this.filter.deleteDecryptionKey(e)}getLocalMultiaddrWithID(){const e=this.libp2p.multiaddrs.find((e=>e.toString().match(/127\.0\.0\.1/)));if(!e||""===e.toString())throw"Not listening on localhost";return e+"/p2p/"+this.libp2p.peerId.toB58String()}async waitForRemotePeer(e,t){const r=[];if((e=e??[T.Relay]).includes(T.Relay)&&0==this.relay.getPeers().size){const e=new Promise((e=>{this.libp2p.pubsub.once("pubsub:subscription-change",(()=>{this.libp2p.pubsub.once("gossipsub:heartbeat",e)}))}));r.push(e)}if(e.includes(T.Store)){const e=(async()=>{for await(const e of this.store.peers){_("Store peer found",e.id.toB58String());break}})();r.push(e)}if(e.includes(T.LightPush)){const e=(async()=>{for await(const e of this.lightPush.peers){_("Light Push peer found",e.id.toB58String());break}})();r.push(e)}if(e.includes(T.Filter)){const e=(async()=>{for await(const e of this.filter.peers){_("Filter peer found",e.id.toB58String());break}})();r.push(e)}t?await I(Promise.all(r),t,"Timed out waiting for a remote peer."):await Promise.all(r)}startKeepAlive(e,t,r){this.stopKeepAlive(e);const o=e.toB58String();if(0!==t){const r=new l.default(this.libp2p);this.pingKeepAliveTimers[o]=setInterval((()=>{r.ping(e).catch((e=>{_(`Ping failed (${o})`,e)}))}),1e3*t)}0!==r&&(this.relayKeepAliveTimers[o]=setInterval((()=>{b.WakuMessage.fromBytes(new Uint8Array,v.RelayPingContentTopic).then((e=>this.relay.send(e)))}),1e3*r))}stopKeepAlive(e){const t=e.toB58String();this.pingKeepAliveTimers[t]&&(clearInterval(this.pingKeepAliveTimers[t]),delete this.pingKeepAliveTimers[t]),this.relayKeepAliveTimers[t]&&(clearInterval(this.relayKeepAliveTimers[t]),delete this.relayKeepAliveTimers[t])}}t.Waku=w;const S=(e,t)=>new Promise(((r,o)=>setTimeout((()=>o(t)),e))),I=(e,t,r)=>Promise.race([e,S(t,r)])},1972:function(e,t,r){"use strict";var o=this&&this.__createBinding||(Object.create?function(e,t,r,o){void 0===o&&(o=r),Object.defineProperty(e,o,{enumerable:!0,get:function(){return t[r]}})}:function(e,t,r,o){void 0===o&&(o=r),e[o]=t[r]}),i=this&&this.__setModuleDefault||(Object.create?function(e,t){Object.defineProperty(e,"default",{enumerable:!0,value:t})}:function(e,t){e.default=t}),s=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var r in e)"default"!==r&&Object.prototype.hasOwnProperty.call(e,r)&&o(t,e,r);return i(t,e),t};Object.defineProperty(t,"__esModule",{value:!0}),t.FilterRPC=void 0;const n=r(2100),a=r(1614),u=s(r(42));class c{constructor(e){this.proto=e}static createRequest(e,t,r,o=!0){return new c({requestId:r||(0,a.v4)(),request:{subscribe:o,topic:e,contentFilters:t},push:void 0})}static decode(e){const t=u.FilterRPC.decode(n.Reader.create(e));return new c(t)}encode(){return u.FilterRPC.encode(this.proto).finish()}get push(){return this.proto.push}get requestId(){return this.proto.requestId}}t.FilterRPC=c},9243:function(e,t,r){"use strict";var o=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.WakuFilter=t.FilterCodec=void 0;const i=o(r(1227)),s=o(r(8963)),n=r(618),a=r(5187),u=r(1721),c=r(607),d=r(2560),l=r(1972);t.FilterCodec="/vac/waku/filter/2.0.0-beta1";const p=(0,i.default)("waku:filter");t.WakuFilter=class{constructor(e){this.libp2p=e,this.subscriptions=new Map,this.decryptionKeys=new Map,this.libp2p.handle(t.FilterCodec,this.onRequest.bind(this))}async subscribe(e,t,r){const o=r?.pubsubTopic||c.DefaultPubSubTopic,i=t.map((e=>({contentTopic:e}))),a=l.FilterRPC.createRequest(o,i,void 0,!0),u=await this.getPeer(r?.peerId),d=await this.newStream(u);try{await(0,n.pipe)([a.encode()],s.default.encode(),d)}catch(e){throw p("Error subscribing to peer ",u.id.toB58String(),"for content topics",t,": ",e),e}return this.addCallback(a.requestId,e),async()=>{await this.unsubscribe(o,i,a.requestId,u),this.removeCallback(a.requestId)}}async onRequest({stream:e}){p("Receiving message push");try{await(0,n.pipe)(e.source,s.default.decode(),(async e=>{for await(const t of e){const e=l.FilterRPC.decode(t.slice());e.push?.messages?.length&&await this.pushMessages(e.requestId,e.push.messages)}}))}catch(e){p("Error decoding message",e)}}async pushMessages(e,t){const r=this.subscriptions.get(e);if(!r)return void p(`No callback registered for request ID ${e}`);const o=Array.from(this.decryptionKeys).map((([e,{method:t,contentTopics:r}])=>({key:e,method:t,contentTopics:r})));for(const e of t){const t=await d.WakuMessage.decodeProto(e,o);t?r(t):p("Not able to decode message")}}addCallback(e,t){this.subscriptions.set(e,t)}removeCallback(e){this.subscriptions.delete(e)}async unsubscribe(e,t,r,o){const i=l.FilterRPC.createRequest(e,t,r,!1),a=await this.newStream(o);try{await(0,n.pipe)([i.encode()],s.default.encode(),a.sink)}catch(e){throw p("Error unsubscribing",e),e}}async newStream(e){const r=this.libp2p.connectionManager.get(e.id);if(!r)throw new Error("Failed to get a connection to the peer");const{stream:o}=await r.newStream(t.FilterCodec);return o}async getPeer(e){let t;if(e){if(t=await this.libp2p.peerStore.get(e),!t)throw new Error(`Failed to retrieve connection details for provided peer in peer store: ${e.toB58String()}`)}else if(t=await this.randomPeer,!t)throw new Error("Failed to find known peer that registers waku filter protocol");return t}addDecryptionKey(e,t){this.decryptionKeys.set((0,u.hexToBytes)(e),t??{})}deleteDecryptionKey(e){this.decryptionKeys.delete((0,u.hexToBytes)(e))}get peers(){return(0,a.getPeersForProtocol)(this.libp2p,[t.FilterCodec])}get randomPeer(){return(0,a.selectRandomPeer)(this.peers)}}},7087:function(e,t,r){"use strict";var o=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.WakuLightPush=t.PushResponse=t.LightPushCodec=void 0;const i=o(r(8342)),s=o(r(8963)),n=r(618),a=r(7405);Object.defineProperty(t,"PushResponse",{enumerable:!0,get:function(){return a.PushResponse}});const u=r(5187),c=r(607),d=r(7140);t.LightPushCodec="/vac/waku/lightpush/2.0.0-beta1",t.WakuLightPush=class{constructor(e,t){this.libp2p=e,this.pubSubTopic=t?.pubSubTopic?t.pubSubTopic:c.DefaultPubSubTopic}async push(e,r){let o;if(r?.peerId){if(o=await this.libp2p.peerStore.get(r.peerId),!o)throw"Peer is unknown"}else o=await this.randomPeer;if(!o)throw"No peer available";if(!o.protocols.includes(t.LightPushCodec))throw"Peer does not register waku light push protocol";const a=this.libp2p.connectionManager.get(o.id);if(!a)throw"Failed to get a connection to the peer";const{stream:u}=await a.newStream(t.LightPushCodec);try{const t=r?.pubSubTopic?r.pubSubTopic:this.pubSubTopic,o=d.PushRPC.createRequest(e,t),a=await(0,n.pipe)([o.encode()],s.default.encode(),u,s.default.decode(),i.default);try{return d.PushRPC.decode(a.slice()).response||(console.log("No response in PushRPC"),null)}catch(e){console.log("Failed to decode push reply",e)}}catch(e){console.log("Failed to send waku light push request",e)}return null}get peers(){return(0,u.getPeersForProtocol)(this.libp2p,[t.LightPushCodec])}get randomPeer(){return(0,u.selectRandomPeer)(this.peers)}}},7140:function(e,t,r){"use strict";var o=this&&this.__createBinding||(Object.create?function(e,t,r,o){void 0===o&&(o=r),Object.defineProperty(e,o,{enumerable:!0,get:function(){return t[r]}})}:function(e,t,r,o){void 0===o&&(o=r),e[o]=t[r]}),i=this&&this.__setModuleDefault||(Object.create?function(e,t){Object.defineProperty(e,"default",{enumerable:!0,value:t})}:function(e,t){e.default=t}),s=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var r in e)"default"!==r&&Object.prototype.hasOwnProperty.call(e,r)&&o(t,e,r);return i(t,e),t};Object.defineProperty(t,"__esModule",{value:!0}),t.PushRPC=void 0;const n=r(2100),a=r(1614),u=s(r(7405));class c{constructor(e){this.proto=e}static createRequest(e,t){return new c({requestId:(0,a.v4)(),request:{message:e.proto,pubSubTopic:t},response:void 0})}static decode(e){const t=u.PushRPC.decode(n.Reader.create(e));return new c(t)}encode(){return u.PushRPC.encode(this.proto).finish()}get query(){return this.proto.request}get response(){return this.proto.response}}t.PushRPC=c},7993:function(e,t,r){"use strict";var o=this&&this.__createBinding||(Object.create?function(e,t,r,o){void 0===o&&(o=r),Object.defineProperty(e,o,{enumerable:!0,get:function(){return t[r]}})}:function(e,t,r,o){void 0===o&&(o=r),e[o]=t[r]}),i=this&&this.__setModuleDefault||(Object.create?function(e,t){Object.defineProperty(e,"default",{enumerable:!0,value:t})}:function(e,t){e.default=t}),s=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var r in e)"default"!==r&&Object.prototype.hasOwnProperty.call(e,r)&&o(t,e,r);return i(t,e),t};Object.defineProperty(t,"__esModule",{value:!0}),t.decrypt=t.encrypt=void 0;const n=s(r(9656)),a=r(605),u=r(5474),c=r(1721);function d(e,t){let r=1,o=0,i=Promise.resolve(new Uint8Array);for(;o<t;){const t=new Uint8Array([r>>24,r>>16,r>>8,r]),s=(0,a.concat)([t,e],t.length+e.length),n=(0,u.sha256)(s);i=i.then((e=>n.then((t=>{const r=new Uint8Array(t);return(0,a.concat)([e,r],e.length+r.length)})))),o+=32,r+=1}return i}function l(e,t){if(32!==e.length)throw new Error(`Bad private key, it should be 32 bytes but it's actually ${e.length} bytes long`);if(65!==t.length)throw new Error(`Bad public key, it should be 65 bytes but it's actually ${t.length} bytes long`);if(4!==t[0])throw new Error("Bad public key, a valid public key would begin with 4");{const r=n.getSharedSecret(e,t,!0);return new Uint8Array((0,c.hexToBytes)(r).slice(1))}}t.encrypt=async function(e,t){const r=(0,u.randomBytes)(32),o=await l(r,e),i=await d(o,32),s=(0,u.randomBytes)(16),c=i.slice(0,16),p=await(f=s,h=c,g=t,(0,u.getSubtle)().importKey("raw",h,"AES-CTR",!1,["encrypt"]).then((e=>(0,u.getSubtle)().encrypt({name:"AES-CTR",counter:f,length:128},e,g))).then((e=>new Uint8Array(e))));var f,h,g;const y=(0,a.concat)([s,p],s.length+p.length),b=await(0,u.sha256)(i.slice(16)),m=await function(e,t){const r={name:"HMAC",hash:{name:"SHA-256"}};return(0,u.getSubtle)().importKey("raw",e,r,!1,["sign"]).then((e=>(0,u.getSubtle)().sign(r,e,t))).then((e=>new Uint8Array(e)))}(b,y),v=n.getPublicKey(r,!1);return(0,a.concat)([v,y,m],v.length+y.length+m.length)},t.decrypt=async function(e,t){if(t.length<=113)throw new Error("Invalid Ciphertext. Data is too small. It should ba at least 113 bytes");if(4!==t[0])throw new Error(`Not a valid ciphertext. It should begin with 4 but actually begin with ${t[0]}`);{const s=t.slice(0,65),n=t.length-113,a=t.slice(65,81),c=t.slice(65,81+n),p=c.slice(16),f=t.slice(81+n),h=l(e,s),g=await d(h,32),[y,b]=await(0,u.sha256)(g.slice(16)).then((e=>[g.slice(0,16),e]));if(!await function(e,t,r){const o={name:"HMAC",hash:{name:"SHA-256"}};return(0,u.getSubtle)().importKey("raw",e,o,!1,["verify"]).then((e=>(0,u.getSubtle)().verify(o,e,r,t)))}(b,c,f))throw new Error("Incorrect MAC");return r=a,o=y,i=p,(0,u.getSubtle)().importKey("raw",o,"AES-CTR",!1,["decrypt"]).then((e=>(0,u.getSubtle)().decrypt({name:"AES-CTR",counter:r,length:128},e,i))).then((e=>new Uint8Array(e)))}var r,o,i}},2560:function(e,t,r){"use strict";var o=this&&this.__createBinding||(Object.create?function(e,t,r,o){void 0===o&&(o=r),Object.defineProperty(e,o,{enumerable:!0,get:function(){return t[r]}})}:function(e,t,r,o){void 0===o&&(o=r),e[o]=t[r]}),i=this&&this.__setModuleDefault||(Object.create?function(e,t){Object.defineProperty(e,"default",{enumerable:!0,value:t})}:function(e,t){e.default=t}),s=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var r in e)"default"!==r&&Object.prototype.hasOwnProperty.call(e,r)&&o(t,e,r);return i(t,e),t},n=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.WakuMessage=t.DecryptionMethod=void 0;const a=n(r(1227)),u=n(r(3720)),c=r(2100),d=s(r(6561)),l=r(1721),p=s(r(8340)),f=(0,a.default)("waku:message");var h;!function(e){e.Asymmetric="asymmetric",e.Symmetric="symmetric"}(h=t.DecryptionMethod||(t.DecryptionMethod={}));class g{constructor(e,t,r){this.proto=e,this._signaturePublicKey=t,this._signature=r}static async fromUtf8String(e,t,r){const o=(0,l.utf8ToBytes)(e);return g.fromBytes(o,t,r)}static async fromBytes(e,t,r){const{timestamp:o,encPublicKey:i,symKey:s,sigPrivKey:n}=Object.assign({timestamp:new Date},r||{});let a,c=e,d=0;if(i&&s)throw"Pass either `encPublicKey` or `symKey`, not both.";if(i){const e=await p.clearEncode(c,n);c=await p.encryptAsymmetric(e.payload,i),a=e.sig,d=1}else if(s){const e=await p.clearEncode(c,n);c=await p.encryptSymmetric(e.payload,s),a=e.sig,d=1}return new g({payload:c,timestampDeprecated:o.valueOf()/1e3,timestamp:u.default.fromNumber(o.valueOf()).mul(1e6),version:d,contentTopic:t},a?.publicKey,a?.signature)}static async decode(e,t){const r=d.WakuMessage.decode(c.Reader.create(e));return g.decodeProto(r,t)}static async decodeProto(e,t){if(void 0===e.payload)return void f("Payload is undefined");const r=e.payload;let o,i;if(1===e.version&&e.payload){if(void 0===t)return void f("Payload is encrypted but no private keys have been provided.");const s=e=>!!e,n=(await Promise.all(t.map((async({key:t,method:o,contentTopics:i})=>{if(!i||e.contentTopic&&i.includes(e.contentTopic))switch(o){case h.Asymmetric:try{return await p.decryptAsymmetric(r,t)}catch(e){return void f("Failed to decrypt message using asymmetric encryption despite decryption method being specified",e)}case h.Symmetric:try{return await p.decryptSymmetric(r,t)}catch(e){return void f("Failed to decrypt message using asymmetric encryption despite decryption method being specified",e)}default:try{return await p.decryptSymmetric(r,t)}catch(e){f("Failed to decrypt message using symmetric encryption",e);try{return await p.decryptAsymmetric(r,t)}catch(e){return void f("Failed to decrypt message using asymmetric encryption",e)}}}})))).filter(s);if(0===n.length)return void f("Failed to decrypt payload.");const a=n[0],u=await p.clearDecode(a);if(!u)return void f("Failed to decode payload.");Object.assign(e,{payload:u.payload}),o=u.sig?.publicKey,i=u.sig?.signature}return new g(e,o,i)}encode(){return d.WakuMessage.encode(this.proto).finish()}get payloadAsUtf8(){if(!this.payload)return"";try{return(0,l.bytesToUtf8)(this.payload)}catch(e){return f("Could not decode byte as UTF-8",e),""}}get payload(){if(this.proto.payload)return new Uint8Array(this.proto.payload)}get contentTopic(){return this.proto.contentTopic}get version(){return this.proto.version}get timestamp(){try{if(this.proto.timestamp){const e=this.proto.timestamp.div(1e6).toNumber();return new Date(e)}if(this.proto.timestampDeprecated)return new Date(1e3*this.proto.timestampDeprecated)}catch(e){return}}get signaturePublicKey(){return this._signaturePublicKey}get signature(){return this._signature}}t.WakuMessage=g},4231:(e,t,r)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.generateIv=t.decrypt=t.encrypt=t.TagSize=t.IvSize=t.KeySize=void 0;const o=r(5474);t.KeySize=32,t.IvSize=12,t.TagSize=16;const i={name:"AES-GCM",length:128};t.encrypt=async function(e,t,r){return(0,o.getSubtle)().importKey("raw",t,i,!1,["encrypt"]).then((t=>(0,o.getSubtle)().encrypt({iv:e,...i},t,r))).then((e=>new Uint8Array(e)))},t.decrypt=async function(e,t,r){return(0,o.getSubtle)().importKey("raw",t,i,!1,["decrypt"]).then((t=>(0,o.getSubtle)().decrypt({iv:e,...i},t,r))).then((e=>new Uint8Array(e)))},t.generateIv=function(){return(0,o.randomBytes)(t.IvSize)}},8340:function(e,t,r){"use strict";var o=this&&this.__createBinding||(Object.create?function(e,t,r,o){void 0===o&&(o=r),Object.defineProperty(e,o,{enumerable:!0,get:function(){return t[r]}})}:function(e,t,r,o){void 0===o&&(o=r),e[o]=t[r]}),i=this&&this.__setModuleDefault||(Object.create?function(e,t){Object.defineProperty(e,"default",{enumerable:!0,value:t})}:function(e,t){e.default=t}),s=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var r in e)"default"!==r&&Object.prototype.hasOwnProperty.call(e,r)&&o(t,e,r);return i(t,e),t};Object.defineProperty(t,"__esModule",{value:!0}),t.decryptSymmetric=t.encryptSymmetric=t.decryptAsymmetric=t.encryptAsymmetric=t.clearDecode=t.clearEncode=t.PrivateKeySize=void 0;const n=s(r(9656)),a=r(605),u=r(5474),c=r(1721),d=s(r(7993)),l=s(r(4231));function p(e){let t=1;for(let r=e.length;r>=256;r/=256)t++;return t}t.PrivateKeySize=32,t.clearEncode=async function(e,t){let r=new Uint8Array([0]);r=function(e,t){const r=p(t);let o=new Uint8Array(4);return new DataView(o.buffer).setUint32(0,t.length,!0),o=o.slice(0,r),(e=(0,a.concat)([e,o]))[0]|=r,e}(r,e),r=(0,a.concat)([r,e]);let o=1+p(e)+e.length;t&&(o+=65);const i=256-o%256,s=(0,u.randomBytes)(i);if(d=i,(c=s).length!==d||!(d<=3||-1!==c.findIndex((e=>0!==e))))throw new Error("failed to generate random padding of size "+i);var c,d;let l;if(r=(0,a.concat)([r,s]),t){r[0]|=4;const e=(0,u.keccak256)(r),o=await(0,u.sign)(e,t);r=(0,a.concat)([r,o]),l={signature:o,publicKey:n.getPublicKey(t,!1)}}return{payload:r,sig:l}},t.clearDecode=function(e){const t=function(e){return 3&new DataView(e.buffer).getUint8(0)}(e);if(0===t)return;const r=function(e,t){let r=e.slice(1,1+t);return t<4&&(r=(0,a.concat)([r,new Uint8Array(4-t)],4)),new DataView(r.buffer).getInt32(0,!0)}(e,t),o=1+t,i=e.slice(o,o+r),s=function(e){return 4==(4&new DataView(e.buffer).getUint8(0))}(e);let c;if(s){const t=function(e){return e.slice(e.length-65,e.length)}(e),r=function(e,t){return t?(0,u.keccak256)(e.slice(0,e.length-65)):(0,u.keccak256)(e)}(e,s),o=function(e,t){const r=new DataView(t.slice(64).buffer).getUint8(0),o=n.Signature.fromCompact(t.slice(0,64));return n.recoverPublicKey(e,o,r,!1)}(r,t);c={signature:t,publicKey:o}}return{payload:i,sig:c}},t.encryptAsymmetric=async function(e,t){return d.encrypt((0,c.hexToBytes)(t),e)},t.decryptAsymmetric=async function(e,t){return d.decrypt(t,e)},t.encryptSymmetric=async function(e,t){const r=l.generateIv(),o=await l.encrypt(r,(0,c.hexToBytes)(t),e);return(0,a.concat)([o,r])},t.decryptSymmetric=async function(e,t){const r=e.length-l.IvSize,o=e.slice(0,r),i=e.slice(r);return l.decrypt(i,(0,c.hexToBytes)(t),o)}},6559:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.RelayMaxIHaveLength=t.RelayOpportunisticGraftPeers=t.RelayOpportunisticGraftTicks=t.RelayFanoutTTL=t.RelayPruneBackoff=t.RelayPrunePeers=t.RelayHeartbeatInterval=t.RelayHeartbeatInitialDelay=t.RelayGossipFactor=t.RelayPingContentTopic=t.RelayCodecs=t.minute=t.second=void 0,t.second=1e3,t.minute=60*t.second,t.RelayCodecs=["/vac/waku/relay/2.0.0-beta2","/vac/waku/relay/2.0.0"],t.RelayPingContentTopic="/relay-ping/1/ping/null",t.RelayGossipFactor=.25,t.RelayHeartbeatInitialDelay=100,t.RelayHeartbeatInterval=t.second,t.RelayPrunePeers=16,t.RelayPruneBackoff=t.minute,t.RelayFanoutTTL=t.minute,t.RelayOpportunisticGraftTicks=60,t.RelayOpportunisticGraftPeers=2,t.RelayMaxIHaveLength=5e3},6624:(e,t,r)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.getRelayPeers=void 0;const o=r(663),i=r(2979);t.getRelayPeers=function(e,t,r,s=(()=>!0)){const n=e.topics.get(t);if(!n)return new Set;let a=[];return n.forEach((t=>{const r=e.peers.get(t);r&&i.RelayCodecs.includes(r.protocol)&&s(t)&&a.push(t)})),a=(0,o.shuffle)(a),r>0&&a.length>r&&(a=a.slice(0,r)),new Set(a)}},2979:function(e,t,r){"use strict";var o=this&&this.__createBinding||(Object.create?function(e,t,r,o){void 0===o&&(o=r),Object.defineProperty(e,o,{enumerable:!0,get:function(){return t[r]}})}:function(e,t,r,o){void 0===o&&(o=r),e[o]=t[r]}),i=this&&this.__setModuleDefault||(Object.create?function(e,t){Object.defineProperty(e,"default",{enumerable:!0,value:t})}:function(e,t){e.default=t}),s=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var r in e)"default"!==r&&Object.prototype.hasOwnProperty.call(e,r)&&o(t,e,r);return i(t,e),t},n=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.WakuRelay=t.RelayCodecs=void 0;const a=n(r(1227)),u=n(r(5391)),c=r(663),d=r(2185),l=n(r(8785)),p=r(1721),f=r(607),h=r(2560),g=s(r(6559)),y=r(6559);Object.defineProperty(t,"RelayCodecs",{enumerable:!0,get:function(){return y.RelayCodecs}});const b=r(6624),m=r(5714),v=(0,a.default)("waku:relay");class R extends u.default{constructor(e,t){super(e,Object.assign(t,{globalSignaturePolicy:d.SignaturePolicy.StrictNoSign})),this.heartbeat=new m.RelayHeartbeat(this),this.observers={},this.decryptionKeys=new Map;const r=g.RelayCodecs;Object.assign(this,{multicodecs:r}),this.pubSubTopic=t?.pubSubTopic||f.DefaultPubSubTopic,t?.decryptionKeys?.forEach((e=>{this.addDecryptionKey(e)}))}async start(){await super.start(),this.subscribe(this.pubSubTopic)}async send(e){const t=e.encode();await super.publish(this.pubSubTopic,t)}addDecryptionKey(e,t){this.decryptionKeys.set((0,p.hexToBytes)(e),t??{})}deleteDecryptionKey(e){this.decryptionKeys.delete((0,p.hexToBytes)(e))}addObserver(e,t=[]){0===t.length?(this.observers[""]||(this.observers[""]=new Set),this.observers[""].add(e)):t.forEach((t=>{this.observers[t]||(this.observers[t]=new Set),this.observers[t].add(e)}))}deleteObserver(e,t=[]){0===t.length?this.observers[""]&&this.observers[""].delete(e):t.forEach((t=>{this.observers[t]&&this.observers[t].delete(e)}))}getPeers(){return(0,b.getRelayPeers)(this,this.pubSubTopic,this._options.D,(e=>this.score.score(e)>=this._options.scoreThresholds.publishThreshold))}subscribe(e){this.on(e,(t=>{const r=Array.from(this.decryptionKeys).map((([e,{method:t,contentTopics:r}])=>({key:e,method:t,contentTopics:r})));v(`Message received on ${e}`),h.WakuMessage.decode(t.data,r).then((e=>{e?(this.observers[""]&&this.observers[""].forEach((t=>{t(e)})),e.contentTopic&&this.observers[e.contentTopic]&&this.observers[e.contentTopic].forEach((t=>{t(e)}))):v("Failed to decode Waku Message")})).catch((e=>{v("Failed to decode Waku Message",e)}))})),super.subscribe(e)}join(e){if(!this.started)throw new Error("WakuRelayPubSub has not started");const t=this.fanout.get(e);if(t)t.forEach((e=>{this.score.score(e)<0&&t.delete(e)})),t.size<this._options.D&&(0,b.getRelayPeers)(this,e,this._options.D-t.size,(e=>!t.has(e)&&!this.direct.has(e)&&this.score.score(e)>=0)).forEach((e=>t.add(e))),this.mesh.set(e,t),this.fanout.delete(e),this.lastpub.delete(e);else{const t=(0,b.getRelayPeers)(this,e,this._options.D,(e=>!this.direct.has(e)&&this.score.score(e)>=0));this.mesh.set(e,t)}this.mesh.get(e)?.forEach((t=>{this.log("JOIN: Add mesh link to %s in %s",t,e),this._sendGraft(t,e)}))}async _publish(e){const t=await this.getCanonicalMsgIdStr(e);e.receivedFrom!==this.peerId.toB58String()&&(this.score.deliverMessage(e,t),this.gossipTracer.deliverMessage(t)),this.seenCache.put(t),this.messageCache.put(e,t);const r=new Set;e.topicIDs.forEach((e=>{if(!this.topics.get(e))return;this.direct.forEach((e=>{r.add(e)}));let t=this.mesh.get(e);if(!t||!t.size){if(t=this.fanout.get(e),!t){const r=(0,b.getRelayPeers)(this,e,this._options.D,(e=>this.score.score(e)>=this._options.scoreThresholds.publishThreshold));r.size>0?(t=r,this.fanout.set(e,r)):t=new Set}this.lastpub.set(e,this._now())}t?.forEach((e=>{r.add(e)}))}));const o=(0,c.createGossipRpc)([u.default.utils.normalizeOutRpcMessage(e)]);v(`Relay message to ${r.size} peers`),r.forEach((t=>{t!==e.from&&(v("Relay message to",t),this._sendRpc(t,o))}))}_emitGossip(e,t){const r=this.messageCache.getGossipIDs(e);if(!r.length)return;(0,c.shuffle)(r),r.length>g.RelayMaxIHaveLength&&this.log("too many messages for gossip; will truncate IHAVE list (%d messages)",r.length);const o=[],i=this.topics.get(e);if(!i)return;i.forEach((e=>{const r=this.peers.get(e);r&&!t.has(e)&&!this.direct.has(e)&&g.RelayCodecs.includes(r.protocol)&&this.score.score(e)>=this._options.scoreThresholds.gossipThreshold&&o.push(e)}));let s=this._options.Dlazy;const n=g.RelayGossipFactor*o.length;n>s&&(s=n),s>o.length?s=o.length:(0,c.shuffle)(o),o.slice(0,s).forEach((t=>{let o=r;r.length>g.RelayMaxIHaveLength&&(o=(0,c.shuffle)(o.slice()).slice(0,g.RelayMaxIHaveLength)),this._pushGossip(t,{topicID:e,messageIDs:o})}))}async _makePrune(e,t,r){const o=g.RelayPruneBackoff/1e3;if(!r)return{topicID:t,peers:[],backoff:o};const i=(0,b.getRelayPeers)(this,t,g.RelayPrunePeers,(t=>t!==e&&this.score.score(t)>=0));return{topicID:t,peers:await Promise.all(Array.from(i).map((async e=>{const t=l.default.createFromB58String(e);return{peerID:t.toBytes(),signedPeerRecord:await this._libp2p.peerStore.addressBook.getRawEnvelope(t)}}))),backoff:o}}}t.WakuRelay=R},5714:function(e,t,r){"use strict";var o=this&&this.__createBinding||(Object.create?function(e,t,r,o){void 0===o&&(o=r),Object.defineProperty(e,o,{enumerable:!0,get:function(){return t[r]}})}:function(e,t,r,o){void 0===o&&(o=r),e[o]=t[r]}),i=this&&this.__setModuleDefault||(Object.create?function(e,t){Object.defineProperty(e,"default",{enumerable:!0,value:t})}:function(e,t){e.default=t}),s=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var r in e)"default"!==r&&Object.prototype.hasOwnProperty.call(e,r)&&o(t,e,r);return i(t,e),t};Object.defineProperty(t,"__esModule",{value:!0}),t.RelayHeartbeat=void 0;const n=r(1259),a=r(663),u=s(r(6559)),c=r(6624);class d extends n.Heartbeat{constructor(e){super(e)}start(){if(this._heartbeatTimer)return;const e=this._heartbeat.bind(this),t=setTimeout((()=>{e(),this._heartbeatTimer?.runPeriodically(e,u.RelayHeartbeatInterval)}),u.RelayHeartbeatInitialDelay);this._heartbeatTimer={_intervalId:void 0,runPeriodically:(e,t)=>{this._heartbeatTimer._intervalId=setInterval(e,t)},cancel:()=>{clearTimeout(t),clearInterval(this._heartbeatTimer?._intervalId)}}}stop(){this._heartbeatTimer&&(this._heartbeatTimer.cancel(),this._heartbeatTimer=null)}_heartbeat(){const{D:e,Dlo:t,Dhi:r,Dscore:o,Dout:i}=this.gossipsub._options;this.gossipsub.heartbeatTicks++;const s=new Map,n=e=>{let t=s.get(e);return void 0===t&&(t=this.gossipsub.score.score(e),s.set(e,t)),t},d=new Map,l=new Map,p=new Map;this.gossipsub._clearBackoff(),this.gossipsub.peerhave.clear(),this.gossipsub.iasked.clear(),this.gossipsub._applyIwantPenalties(),this.gossipsub._directConnect(),this.gossipsub.mesh.forEach(((s,f)=>{const h=e=>{this.gossipsub.log("HEARTBEAT: Remove mesh link to %s in %s",e,f),this.gossipsub.score.prune(e,f),this.gossipsub._addBackoff(e,f),s.delete(e);const t=l.get(e);t?t.push(f):l.set(e,[f])},g=e=>{this.gossipsub.log("HEARTBEAT: Add mesh link to %s in %s",e,f),this.gossipsub.score.graft(e,f),s.add(e);const t=d.get(e);t?t.push(f):d.set(e,[f])};if(s.forEach((e=>{const t=n(e);t<0&&(this.gossipsub.log("HEARTBEAT: Prune peer %s with negative score: score=%d, topic=%s",e,t,f),h(e),p.set(e,!0))})),s.size<t){const t=this.gossipsub.backoff.get(f),r=e-s.size;(0,c.getRelayPeers)(this.gossipsub,f,r,(e=>!s.has(e)&&!this.gossipsub.direct.has(e)&&(!t||!t.has(e))&&n(e)>=0)).forEach(g)}if(s.size>r){let t=Array.from(s);t.sort(((e,t)=>n(t)-n(e))),t=t.slice(0,o).concat((0,a.shuffle)(t.slice(o)));let r=0;if(t.slice(0,e).forEach((e=>{this.gossipsub.outbound.get(e)&&r++})),r<i){const o=e=>{const r=t[e];for(let r=e;r>0;r--)t[r]=t[r-1];t[0]=r};if(r>0){let i=r;for(let r=1;r<e&&i>0;r++)this.gossipsub.outbound.get(t[r])&&(o(r),i--)}let i=e-r;for(let r=e;r<t.length&&i>0;r++)this.gossipsub.outbound.get(t[r])&&(o(r),i--)}t.slice(e).forEach(h)}if(s.size>=t){let e=0;if(s.forEach((t=>{this.gossipsub.outbound.get(t)&&e++})),e<i){const t=i-e,r=this.gossipsub.backoff.get(f);(0,c.getRelayPeers)(this.gossipsub,f,t,(e=>!s.has(e)&&!this.gossipsub.direct.has(e)&&(!r||!r.has(e))&&n(e)>=0)).forEach(g)}}if(this.gossipsub.heartbeatTicks%u.RelayOpportunisticGraftTicks==0&&s.size>1){const e=Array.from(s).sort(((e,t)=>n(e)-n(t))),t=Math.floor(s.size/2),r=n(e[t]);if(r<this.gossipsub._options.scoreThresholds.opportunisticGraftThreshold){const e=this.gossipsub.backoff.get(f);(0,c.getRelayPeers)(this.gossipsub,f,u.RelayOpportunisticGraftPeers,(t=>s.has(t)&&!this.gossipsub.direct.has(t)&&(!e||!e.has(t))&&n(t)>r)).forEach((e=>{this.gossipsub.log("HEARTBEAT: Opportunistically graft peer %s on topic %s",e,f),g(e)}))}}this.gossipsub._emitGossip(f,s)}));const f=this.gossipsub._now();this.gossipsub.lastpub.forEach(((e,t)=>{e+u.RelayFanoutTTL<f&&(this.gossipsub.fanout.delete(t),this.gossipsub.lastpub.delete(t))})),this.gossipsub.fanout.forEach(((t,r)=>{const o=this.gossipsub.topics.get(r);if(t.forEach((e=>{(!o?.has(e)||n(e)<this.gossipsub._options.scoreThresholds.publishThreshold)&&t.delete(e)})),t.size<e){const o=e-t.size;(0,c.getRelayPeers)(this.gossipsub,r,o,(e=>!t.has(e)&&!this.gossipsub.direct.has(e)&&n(e)>=this.gossipsub._options.scoreThresholds.publishThreshold)).forEach((e=>{t.add(e)}))}this.gossipsub._emitGossip(r,t)})),this.gossipsub._sendGraftPrune(d,l,p),this.gossipsub._flush(),this.gossipsub.messageCache.shift(),this.gossipsub.emit("gossipsub:heartbeat")}}t.RelayHeartbeat=d},7545:function(e,t,r){"use strict";var o=this&&this.__createBinding||(Object.create?function(e,t,r,o){void 0===o&&(o=r),Object.defineProperty(e,o,{enumerable:!0,get:function(){return t[r]}})}:function(e,t,r,o){void 0===o&&(o=r),e[o]=t[r]}),i=this&&this.__setModuleDefault||(Object.create?function(e,t){Object.defineProperty(e,"default",{enumerable:!0,value:t})}:function(e,t){e.default=t}),s=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var r in e)"default"!==r&&Object.prototype.hasOwnProperty.call(e,r)&&o(t,e,r);return i(t,e),t},n=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.HistoryRPC=t.PageDirection=void 0;const a=n(r(3720)),u=r(2100),c=r(1614),d=s(r(6180)),l=s(r(5214)),p=r(5960);var f;!function(e){e.BACKWARD="backward",e.FORWARD="forward"}(f=t.PageDirection||(t.PageDirection={}));class h{constructor(e,t){switch(this.proto=e,this.storeCodec=t,t){case p.StoreCodecs.V2Beta3:this.protoCodec=d;break;case p.StoreCodecs.V2Beta4:this.protoCodec=l;break;default:throw`Internal Error: Unexpected store codec value received in constructor: ${t}`}}get query(){return this.proto.query}get response(){return this.proto.response}static createQuery(e){const t=e.storeCodec??p.StoreCodecs.V2Beta4,r=e.contentTopics.map((e=>({contentTopic:e}))),o=function(e){switch(e){case f.BACKWARD:return l.PagingInfo_Direction.DIRECTION_BACKWARD_UNSPECIFIED;case f.FORWARD:return l.PagingInfo_Direction.DIRECTION_FORWARD;default:return l.PagingInfo_Direction.DIRECTION_BACKWARD_UNSPECIFIED}}(e.pageDirection);switch(t){case p.StoreCodecs.V2Beta3:return(()=>{const i={pageSize:a.default.fromNumber(e.pageSize),cursor:e.cursor,direction:o};let s,n;return e.startTime&&(s=e.startTime.valueOf()/1e3),e.endTime&&(n=e.endTime.valueOf()/1e3),new h({requestId:(0,c.v4)(),query:{pubSubTopic:e.pubSubTopic,contentFilters:r,pagingInfo:i,startTime:s,endTime:n},response:void 0},t)})();case p.StoreCodecs.V2Beta4:return(()=>{const i={pageSize:a.default.fromNumber(e.pageSize),cursor:e.cursor,direction:o};let s,n;return e.startTime&&(s=a.default.fromNumber(e.startTime.valueOf()).mul(1e6)),e.endTime&&(n=a.default.fromNumber(e.endTime.valueOf()).mul(1e6)),new h({requestId:(0,c.v4)(),query:{pubSubTopic:e.pubSubTopic,contentFilters:r,pagingInfo:i,startTime:s,endTime:n},response:void 0},t)})();default:throw`Internal Error: Unexpected store codec value received in createQuery: ${t}`}}decode(e){const t=this.protoCodec.HistoryRPC.decode(u.Reader.create(e));return new h(t,this.storeCodec)}encode(){return this.protoCodec.HistoryRPC.encode(this.proto).finish()}}t.HistoryRPC=h},5960:function(e,t,r){"use strict";var o=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.WakuStore=t.PageDirection=t.DefaultPageSize=t.StoreCodecs=void 0;const i=o(r(1227)),s=o(r(8342)),n=o(r(8963)),a=r(618),u=r(5187),c=r(1721),d=r(607),l=r(2560),p=r(7545);Object.defineProperty(t,"PageDirection",{enumerable:!0,get:function(){return p.PageDirection}});const f=(0,i.default)("waku:store");var h;!function(e){e.V2Beta3="/vac/waku/store/2.0.0-beta3",e.V2Beta4="/vac/waku/store/2.0.0-beta4"}(h=t.StoreCodecs||(t.StoreCodecs={})),t.DefaultPageSize=10,t.WakuStore=class{constructor(e,t){this.libp2p=e,this.pubSubTopic=t?.pubSubTopic?t.pubSubTopic:d.DefaultPubSubTopic,this.decryptionKeys=new Map}async queryHistory(e,r){let o,i;r?.timeFilter&&(o=r.timeFilter.startTime,i=r.timeFilter.endTime);const u=Object.assign({pubSubTopic:this.pubSubTopic,pageDirection:p.PageDirection.BACKWARD,pageSize:t.DefaultPageSize},r,{contentTopics:e,startTime:o,endTime:i});let d;if(f("Querying history with the following options",{peerId:r?.peerId?.toB58String(),...r}),u.peerId){if(d=await this.libp2p.peerStore.get(u.peerId),!d)throw`Failed to retrieve connection details for provided peer in peer store: ${u.peerId.toB58String()}`}else if(d=await this.randomPeer,!d)throw"Failed to find known peer that registers waku store protocol";let g="";for(const e of Object.values(h))d.protocols.includes(e)&&(g=e);if(f(`Use store codec ${g}`),!g)throw`Peer does not register waku store protocol: ${d.id.toB58String()}`;Object.assign(u,{storeCodec:g});const y=this.libp2p.connectionManager.get(d.id);if(!y)throw"Failed to get a connection to the peer";const b=Array.from(this.decryptionKeys).map((([e,{method:t,contentTopics:r}])=>({key:e,method:t,contentTopics:r})));u.decryptionKeys&&u.decryptionKeys.forEach((t=>{b.push({key:(0,c.hexToBytes)(t),contentTopics:e.length?e:void 0,method:void 0})}));const m=[];let v;for(;;){const{stream:e}=await y.newStream(g),t=Object.assign(u,{cursor:v}),r=p.HistoryRPC.createQuery(t);f("Querying store peer",y.remoteAddr.toString());const o=await(0,a.pipe)([r.encode()],n.default.encode(),e,n.default.decode(),s.default),i=r.decode(o.slice()).response;if(!i)throw"History response misses response field";if(i.error)throw"History response contains an Error"+i.error;if(!i.messages||!i.messages.length)return console.log("No messages present in HistoryRPC response"),m;f(`${i.messages.length} messages retrieved for pubsub topic ${u.pubSubTopic}`);const c=[];await Promise.all(i.messages.map((async e=>{const t=await l.WakuMessage.decodeProto(e,b);t&&(m.push(t),c.push(t))})));let d=!1;u.callback&&(d=Boolean(u.callback(c)));const h=i.pagingInfo?.pageSize,R=r.query?.pagingInfo?.pageSize;if(d||h&&R&&h<R)return m;if(v=i.pagingInfo?.cursor,void 0===v)return console.log("No cursor returned by peer."),m}}addDecryptionKey(e,t){this.decryptionKeys.set((0,c.hexToBytes)(e),t??{})}deleteDecryptionKey(e){this.decryptionKeys.delete((0,c.hexToBytes)(e))}get peers(){const e=[];for(const t of Object.values(h))e.push(t);return(0,u.getPeersForProtocol)(this.libp2p,e)}get randomPeer(){return(0,u.selectRandomPeer)(this.peers)}}},42:function(e,t,r){"use strict";var o=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.FilterRPC=t.MessagePush=t.FilterRequest_ContentFilter=t.FilterRequest=t.protobufPackage=void 0;const i=o(r(3720)),s=o(r(2100)),n=r(6561);function a(e){return null!=e}t.protobufPackage="waku.v2",t.FilterRequest={encode(e,r=s.default.Writer.create()){!0===e.subscribe&&r.uint32(8).bool(e.subscribe),""!==e.topic&&r.uint32(18).string(e.topic);for(const o of e.contentFilters)t.FilterRequest_ContentFilter.encode(o,r.uint32(26).fork()).ldelim();return r},decode(e,r){const o=e instanceof s.default.Reader?e:new s.default.Reader(e);let i=void 0===r?o.len:o.pos+r;const n={subscribe:!1,topic:"",contentFilters:[]};for(;o.pos<i;){const e=o.uint32();switch(e>>>3){case 1:n.subscribe=o.bool();break;case 2:n.topic=o.string();break;case 3:n.contentFilters.push(t.FilterRequest_ContentFilter.decode(o,o.uint32()));break;default:o.skipType(7&e)}}return n},fromJSON:e=>({subscribe:!!a(e.subscribe)&&Boolean(e.subscribe),topic:a(e.topic)?String(e.topic):"",contentFilters:Array.isArray(e?.contentFilters)?e.contentFilters.map((e=>t.FilterRequest_ContentFilter.fromJSON(e))):[]}),toJSON(e){const r={};return void 0!==e.subscribe&&(r.subscribe=e.subscribe),void 0!==e.topic&&(r.topic=e.topic),e.contentFilters?r.contentFilters=e.contentFilters.map((e=>e?t.FilterRequest_ContentFilter.toJSON(e):void 0)):r.contentFilters=[],r},fromPartial(e){const r={subscribe:!1,topic:"",contentFilters:[]};return r.subscribe=e.subscribe??!1,r.topic=e.topic??"",r.contentFilters=e.contentFilters?.map((e=>t.FilterRequest_ContentFilter.fromPartial(e)))||[],r}},t.FilterRequest_ContentFilter={encode:(e,t=s.default.Writer.create())=>(""!==e.contentTopic&&t.uint32(10).string(e.contentTopic),t),decode(e,t){const r=e instanceof s.default.Reader?e:new s.default.Reader(e);let o=void 0===t?r.len:r.pos+t;const i={contentTopic:""};for(;r.pos<o;){const e=r.uint32();e>>>3==1?i.contentTopic=r.string():r.skipType(7&e)}return i},fromJSON:e=>({contentTopic:a(e.contentTopic)?String(e.contentTopic):""}),toJSON(e){const t={};return void 0!==e.contentTopic&&(t.contentTopic=e.contentTopic),t},fromPartial(e){const t={contentTopic:""};return t.contentTopic=e.contentTopic??"",t}},t.MessagePush={encode(e,t=s.default.Writer.create()){for(const r of e.messages)n.WakuMessage.encode(r,t.uint32(10).fork()).ldelim();return t},decode(e,t){const r=e instanceof s.default.Reader?e:new s.default.Reader(e);let o=void 0===t?r.len:r.pos+t;const i={messages:[]};for(;r.pos<o;){const e=r.uint32();e>>>3==1?i.messages.push(n.WakuMessage.decode(r,r.uint32())):r.skipType(7&e)}return i},fromJSON:e=>({messages:Array.isArray(e?.messages)?e.messages.map((e=>n.WakuMessage.fromJSON(e))):[]}),toJSON(e){const t={};return e.messages?t.messages=e.messages.map((e=>e?n.WakuMessage.toJSON(e):void 0)):t.messages=[],t},fromPartial(e){const t={messages:[]};return t.messages=e.messages?.map((e=>n.WakuMessage.fromPartial(e)))||[],t}},t.FilterRPC={encode:(e,r=s.default.Writer.create())=>(""!==e.requestId&&r.uint32(10).string(e.requestId),void 0!==e.request&&t.FilterRequest.encode(e.request,r.uint32(18).fork()).ldelim(),void 0!==e.push&&t.MessagePush.encode(e.push,r.uint32(26).fork()).ldelim(),r),decode(e,r){const o=e instanceof s.default.Reader?e:new s.default.Reader(e);let i=void 0===r?o.len:o.pos+r;const n={requestId:"",request:void 0,push:void 0};for(;o.pos<i;){const e=o.uint32();switch(e>>>3){case 1:n.requestId=o.string();break;case 2:n.request=t.FilterRequest.decode(o,o.uint32());break;case 3:n.push=t.MessagePush.decode(o,o.uint32());break;default:o.skipType(7&e)}}return n},fromJSON:e=>({requestId:a(e.requestId)?String(e.requestId):"",request:a(e.request)?t.FilterRequest.fromJSON(e.request):void 0,push:a(e.push)?t.MessagePush.fromJSON(e.push):void 0}),toJSON(e){const r={};return void 0!==e.requestId&&(r.requestId=e.requestId),void 0!==e.request&&(r.request=e.request?t.FilterRequest.toJSON(e.request):void 0),void 0!==e.push&&(r.push=e.push?t.MessagePush.toJSON(e.push):void 0),r},fromPartial(e){const r={requestId:"",request:void 0,push:void 0};return r.requestId=e.requestId??"",r.request=void 0!==e.request&&null!==e.request?t.FilterRequest.fromPartial(e.request):void 0,r.push=void 0!==e.push&&null!==e.push?t.MessagePush.fromPartial(e.push):void 0,r}},s.default.util.Long!==i.default&&(s.default.util.Long=i.default,s.default.configure())},7405:function(e,t,r){"use strict";var o=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.PushRPC=t.PushResponse=t.PushRequest=t.protobufPackage=void 0;const i=o(r(3720)),s=o(r(2100)),n=r(6561);function a(e){return null!=e}t.protobufPackage="waku.v2",t.PushRequest={encode:(e,t=s.default.Writer.create())=>(""!==e.pubSubTopic&&t.uint32(10).string(e.pubSubTopic),void 0!==e.message&&n.WakuMessage.encode(e.message,t.uint32(18).fork()).ldelim(),t),decode(e,t){const r=e instanceof s.default.Reader?e:new s.default.Reader(e);let o=void 0===t?r.len:r.pos+t;const i={pubSubTopic:"",message:void 0};for(;r.pos<o;){const e=r.uint32();switch(e>>>3){case 1:i.pubSubTopic=r.string();break;case 2:i.message=n.WakuMessage.decode(r,r.uint32());break;default:r.skipType(7&e)}}return i},fromJSON:e=>({pubSubTopic:a(e.pubSubTopic)?String(e.pubSubTopic):"",message:a(e.message)?n.WakuMessage.fromJSON(e.message):void 0}),toJSON(e){const t={};return void 0!==e.pubSubTopic&&(t.pubSubTopic=e.pubSubTopic),void 0!==e.message&&(t.message=e.message?n.WakuMessage.toJSON(e.message):void 0),t},fromPartial(e){const t={pubSubTopic:"",message:void 0};return t.pubSubTopic=e.pubSubTopic??"",t.message=void 0!==e.message&&null!==e.message?n.WakuMessage.fromPartial(e.message):void 0,t}},t.PushResponse={encode:(e,t=s.default.Writer.create())=>(!0===e.isSuccess&&t.uint32(8).bool(e.isSuccess),""!==e.info&&t.uint32(18).string(e.info),t),decode(e,t){const r=e instanceof s.default.Reader?e:new s.default.Reader(e);let o=void 0===t?r.len:r.pos+t;const i={isSuccess:!1,info:""};for(;r.pos<o;){const e=r.uint32();switch(e>>>3){case 1:i.isSuccess=r.bool();break;case 2:i.info=r.string();break;default:r.skipType(7&e)}}return i},fromJSON:e=>({isSuccess:!!a(e.isSuccess)&&Boolean(e.isSuccess),info:a(e.info)?String(e.info):""}),toJSON(e){const t={};return void 0!==e.isSuccess&&(t.isSuccess=e.isSuccess),void 0!==e.info&&(t.info=e.info),t},fromPartial(e){const t={isSuccess:!1,info:""};return t.isSuccess=e.isSuccess??!1,t.info=e.info??"",t}},t.PushRPC={encode:(e,r=s.default.Writer.create())=>(""!==e.requestId&&r.uint32(10).string(e.requestId),void 0!==e.request&&t.PushRequest.encode(e.request,r.uint32(18).fork()).ldelim(),void 0!==e.response&&t.PushResponse.encode(e.response,r.uint32(26).fork()).ldelim(),r),decode(e,r){const o=e instanceof s.default.Reader?e:new s.default.Reader(e);let i=void 0===r?o.len:o.pos+r;const n={requestId:"",request:void 0,response:void 0};for(;o.pos<i;){const e=o.uint32();switch(e>>>3){case 1:n.requestId=o.string();break;case 2:n.request=t.PushRequest.decode(o,o.uint32());break;case 3:n.response=t.PushResponse.decode(o,o.uint32());break;default:o.skipType(7&e)}}return n},fromJSON:e=>({requestId:a(e.requestId)?String(e.requestId):"",request:a(e.request)?t.PushRequest.fromJSON(e.request):void 0,response:a(e.response)?t.PushResponse.fromJSON(e.response):void 0}),toJSON(e){const r={};return void 0!==e.requestId&&(r.requestId=e.requestId),void 0!==e.request&&(r.request=e.request?t.PushRequest.toJSON(e.request):void 0),void 0!==e.response&&(r.response=e.response?t.PushResponse.toJSON(e.response):void 0),r},fromPartial(e){const r={requestId:"",request:void 0,response:void 0};return r.requestId=e.requestId??"",r.request=void 0!==e.request&&null!==e.request?t.PushRequest.fromPartial(e.request):void 0,r.response=void 0!==e.response&&null!==e.response?t.PushResponse.fromPartial(e.response):void 0,r}},s.default.util.Long!==i.default&&(s.default.util.Long=i.default,s.default.configure())},6561:function(e,t,r){"use strict";var o=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.WakuMessage=t.protobufPackage=void 0;const i=o(r(3720)),s=o(r(2100));t.protobufPackage="waku.v2",t.WakuMessage={encode:(e,t=s.default.Writer.create())=>(void 0!==e.payload&&t.uint32(10).bytes(e.payload),void 0!==e.contentTopic&&t.uint32(18).string(e.contentTopic),void 0!==e.version&&t.uint32(24).uint32(e.version),void 0!==e.timestampDeprecated&&t.uint32(33).double(e.timestampDeprecated),void 0!==e.timestamp&&t.uint32(80).sint64(e.timestamp),t),decode(e,t){const r=e instanceof s.default.Reader?e:new s.default.Reader(e);let o=void 0===t?r.len:r.pos+t;const i={payload:void 0,contentTopic:void 0,version:void 0,timestampDeprecated:void 0,timestamp:void 0};for(;r.pos<o;){const e=r.uint32();switch(e>>>3){case 1:i.payload=r.bytes();break;case 2:i.contentTopic=r.string();break;case 3:i.version=r.uint32();break;case 4:i.timestampDeprecated=r.double();break;case 10:i.timestamp=r.sint64();break;default:r.skipType(7&e)}}return i},fromJSON:e=>({payload:d(e.payload)?u(e.payload):void 0,contentTopic:d(e.contentTopic)?String(e.contentTopic):void 0,version:d(e.version)?Number(e.version):void 0,timestampDeprecated:d(e.timestampDeprecated)?Number(e.timestampDeprecated):void 0,timestamp:d(e.timestamp)?i.default.fromString(e.timestamp):void 0}),toJSON(e){const t={};return void 0!==e.payload&&(t.payload=void 0!==e.payload?function(e){const t=[];for(const r of e)t.push(String.fromCharCode(r));return c(t.join(""))}(e.payload):void 0),void 0!==e.contentTopic&&(t.contentTopic=e.contentTopic),void 0!==e.version&&(t.version=Math.round(e.version)),void 0!==e.timestampDeprecated&&(t.timestampDeprecated=e.timestampDeprecated),void 0!==e.timestamp&&(t.timestamp=(e.timestamp||void 0).toString()),t},fromPartial(e){const t={payload:void 0,contentTopic:void 0,version:void 0,timestampDeprecated:void 0,timestamp:void 0};return t.payload=e.payload??void 0,t.contentTopic=e.contentTopic??void 0,t.version=e.version??void 0,t.timestampDeprecated=e.timestampDeprecated??void 0,t.timestamp=void 0!==e.timestamp&&null!==e.timestamp?i.default.fromValue(e.timestamp):void 0,t}};var n=(()=>{if(void 0!==n)return n;if("undefined"!=typeof self)return self;if("undefined"!=typeof window)return window;if(void 0!==r.g)return r.g;throw"Unable to locate global object"})();const a=n.atob||(e=>n.Buffer.from(e,"base64").toString("binary"));function u(e){const t=a(e),r=new Uint8Array(t.length);for(let e=0;e<t.length;++e)r[e]=t.charCodeAt(e);return r}const c=n.btoa||(e=>n.Buffer.from(e,"binary").toString("base64"));function d(e){return null!=e}s.default.util.Long!==i.default&&(s.default.util.Long=i.default,s.default.configure())},6180:function(e,t,r){"use strict";var o=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.HistoryRPC=t.HistoryResponse=t.HistoryQuery=t.ContentFilter=t.PagingInfo=t.Index=t.historyResponse_ErrorToJSON=t.historyResponse_ErrorFromJSON=t.HistoryResponse_Error=t.pagingInfo_DirectionToJSON=t.pagingInfo_DirectionFromJSON=t.PagingInfo_Direction=t.protobufPackage=void 0;const i=o(r(3720)),s=o(r(2100)),n=r(6561);var a,u;function c(e){switch(e){case 0:case"DIRECTION_BACKWARD_UNSPECIFIED":return a.DIRECTION_BACKWARD_UNSPECIFIED;case 1:case"DIRECTION_FORWARD":return a.DIRECTION_FORWARD;default:return a.UNRECOGNIZED}}function d(e){switch(e){case a.DIRECTION_BACKWARD_UNSPECIFIED:return"DIRECTION_BACKWARD_UNSPECIFIED";case a.DIRECTION_FORWARD:return"DIRECTION_FORWARD";default:return"UNKNOWN"}}function l(e){switch(e){case 0:case"ERROR_NONE_UNSPECIFIED":return u.ERROR_NONE_UNSPECIFIED;case 1:case"ERROR_INVALID_CURSOR":return u.ERROR_INVALID_CURSOR;default:return u.UNRECOGNIZED}}function p(e){switch(e){case u.ERROR_NONE_UNSPECIFIED:return"ERROR_NONE_UNSPECIFIED";case u.ERROR_INVALID_CURSOR:return"ERROR_INVALID_CURSOR";default:return"UNKNOWN"}}function f(){return{digest:new Uint8Array,receivedTime:0,senderTime:0}}function h(){return{pageSize:i.default.UZERO,cursor:void 0,direction:0}}t.protobufPackage="waku.v2.store.v2beta3",function(e){e[e.DIRECTION_BACKWARD_UNSPECIFIED=0]="DIRECTION_BACKWARD_UNSPECIFIED",e[e.DIRECTION_FORWARD=1]="DIRECTION_FORWARD",e[e.UNRECOGNIZED=-1]="UNRECOGNIZED"}(a=t.PagingInfo_Direction||(t.PagingInfo_Direction={})),t.pagingInfo_DirectionFromJSON=c,t.pagingInfo_DirectionToJSON=d,function(e){e[e.ERROR_NONE_UNSPECIFIED=0]="ERROR_NONE_UNSPECIFIED",e[e.ERROR_INVALID_CURSOR=1]="ERROR_INVALID_CURSOR",e[e.UNRECOGNIZED=-1]="UNRECOGNIZED"}(u=t.HistoryResponse_Error||(t.HistoryResponse_Error={})),t.historyResponse_ErrorFromJSON=l,t.historyResponse_ErrorToJSON=p,t.Index={encode:(e,t=s.default.Writer.create())=>(0!==e.digest.length&&t.uint32(10).bytes(e.digest),0!==e.receivedTime&&t.uint32(17).double(e.receivedTime),0!==e.senderTime&&t.uint32(25).double(e.senderTime),t),decode(e,t){const r=e instanceof s.default.Reader?e:new s.default.Reader(e);let o=void 0===t?r.len:r.pos+t;const i=f();for(;r.pos<o;){const e=r.uint32();switch(e>>>3){case 1:i.digest=r.bytes();break;case 2:i.receivedTime=r.double();break;case 3:i.senderTime=r.double();break;default:r.skipType(7&e)}}return i},fromJSON:e=>({digest:v(e.digest)?b(e.digest):new Uint8Array,receivedTime:v(e.receivedTime)?Number(e.receivedTime):0,senderTime:v(e.senderTime)?Number(e.senderTime):0}),toJSON(e){const t={};return void 0!==e.digest&&(t.digest=function(e){const t=[];for(const r of e)t.push(String.fromCharCode(r));return m(t.join(""))}(void 0!==e.digest?e.digest:new Uint8Array)),void 0!==e.receivedTime&&(t.receivedTime=e.receivedTime),void 0!==e.senderTime&&(t.senderTime=e.senderTime),t},fromPartial(e){const t=f();return t.digest=e.digest??new Uint8Array,t.receivedTime=e.receivedTime??0,t.senderTime=e.senderTime??0,t}},t.PagingInfo={encode:(e,r=s.default.Writer.create())=>(e.pageSize.isZero()||r.uint32(8).uint64(e.pageSize),void 0!==e.cursor&&t.Index.encode(e.cursor,r.uint32(18).fork()).ldelim(),0!==e.direction&&r.uint32(24).int32(e.direction),r),decode(e,r){const o=e instanceof s.default.Reader?e:new s.default.Reader(e);let i=void 0===r?o.len:o.pos+r;const n=h();for(;o.pos<i;){const e=o.uint32();switch(e>>>3){case 1:n.pageSize=o.uint64();break;case 2:n.cursor=t.Index.decode(o,o.uint32());break;case 3:n.direction=o.int32();break;default:o.skipType(7&e)}}return n},fromJSON:e=>({pageSize:v(e.pageSize)?i.default.fromString(e.pageSize):i.default.UZERO,cursor:v(e.cursor)?t.Index.fromJSON(e.cursor):void 0,direction:v(e.direction)?c(e.direction):0}),toJSON(e){const r={};return void 0!==e.pageSize&&(r.pageSize=(e.pageSize||i.default.UZERO).toString()),void 0!==e.cursor&&(r.cursor=e.cursor?t.Index.toJSON(e.cursor):void 0),void 0!==e.direction&&(r.direction=d(e.direction)),r},fromPartial(e){const r=h();return r.pageSize=void 0!==e.pageSize&&null!==e.pageSize?i.default.fromValue(e.pageSize):i.default.UZERO,r.cursor=void 0!==e.cursor&&null!==e.cursor?t.Index.fromPartial(e.cursor):void 0,r.direction=e.direction??0,r}},t.ContentFilter={encode:(e,t=s.default.Writer.create())=>(""!==e.contentTopic&&t.uint32(10).string(e.contentTopic),t),decode(e,t){const r=e instanceof s.default.Reader?e:new s.default.Reader(e);let o=void 0===t?r.len:r.pos+t;const i={contentTopic:""};for(;r.pos<o;){const e=r.uint32();e>>>3==1?i.contentTopic=r.string():r.skipType(7&e)}return i},fromJSON:e=>({contentTopic:v(e.contentTopic)?String(e.contentTopic):""}),toJSON(e){const t={};return void 0!==e.contentTopic&&(t.contentTopic=e.contentTopic),t},fromPartial(e){const t={contentTopic:""};return t.contentTopic=e.contentTopic??"",t}},t.HistoryQuery={encode(e,r=s.default.Writer.create()){void 0!==e.pubSubTopic&&r.uint32(18).string(e.pubSubTopic);for(const o of e.contentFilters)t.ContentFilter.encode(o,r.uint32(26).fork()).ldelim();return void 0!==e.pagingInfo&&t.PagingInfo.encode(e.pagingInfo,r.uint32(34).fork()).ldelim(),void 0!==e.startTime&&r.uint32(41).double(e.startTime),void 0!==e.endTime&&r.uint32(49).double(e.endTime),r},decode(e,r){const o=e instanceof s.default.Reader?e:new s.default.Reader(e);let i=void 0===r?o.len:o.pos+r;const n={pubSubTopic:void 0,contentFilters:[],pagingInfo:void 0,startTime:void 0,endTime:void 0};for(;o.pos<i;){const e=o.uint32();switch(e>>>3){case 2:n.pubSubTopic=o.string();break;case 3:n.contentFilters.push(t.ContentFilter.decode(o,o.uint32()));break;case 4:n.pagingInfo=t.PagingInfo.decode(o,o.uint32());break;case 5:n.startTime=o.double();break;case 6:n.endTime=o.double();break;default:o.skipType(7&e)}}return n},fromJSON:e=>({pubSubTopic:v(e.pubSubTopic)?String(e.pubSubTopic):void 0,contentFilters:Array.isArray(e?.contentFilters)?e.contentFilters.map((e=>t.ContentFilter.fromJSON(e))):[],pagingInfo:v(e.pagingInfo)?t.PagingInfo.fromJSON(e.pagingInfo):void 0,startTime:v(e.startTime)?Number(e.startTime):void 0,endTime:v(e.endTime)?Number(e.endTime):void 0}),toJSON(e){const r={};return void 0!==e.pubSubTopic&&(r.pubSubTopic=e.pubSubTopic),e.contentFilters?r.contentFilters=e.contentFilters.map((e=>e?t.ContentFilter.toJSON(e):void 0)):r.contentFilters=[],void 0!==e.pagingInfo&&(r.pagingInfo=e.pagingInfo?t.PagingInfo.toJSON(e.pagingInfo):void 0),void 0!==e.startTime&&(r.startTime=e.startTime),void 0!==e.endTime&&(r.endTime=e.endTime),r},fromPartial(e){const r={pubSubTopic:void 0,contentFilters:[],pagingInfo:void 0,startTime:void 0,endTime:void 0};return r.pubSubTopic=e.pubSubTopic??void 0,r.contentFilters=e.contentFilters?.map((e=>t.ContentFilter.fromPartial(e)))||[],r.pagingInfo=void 0!==e.pagingInfo&&null!==e.pagingInfo?t.PagingInfo.fromPartial(e.pagingInfo):void 0,r.startTime=e.startTime??void 0,r.endTime=e.endTime??void 0,r}},t.HistoryResponse={encode(e,r=s.default.Writer.create()){for(const t of e.messages)n.WakuMessage.encode(t,r.uint32(18).fork()).ldelim();return void 0!==e.pagingInfo&&t.PagingInfo.encode(e.pagingInfo,r.uint32(26).fork()).ldelim(),0!==e.error&&r.uint32(32).int32(e.error),r},decode(e,r){const o=e instanceof s.default.Reader?e:new s.default.Reader(e);let i=void 0===r?o.len:o.pos+r;const a={messages:[],pagingInfo:void 0,error:0};for(;o.pos<i;){const e=o.uint32();switch(e>>>3){case 2:a.messages.push(n.WakuMessage.decode(o,o.uint32()));break;case 3:a.pagingInfo=t.PagingInfo.decode(o,o.uint32());break;case 4:a.error=o.int32();break;default:o.skipType(7&e)}}return a},fromJSON:e=>({messages:Array.isArray(e?.messages)?e.messages.map((e=>n.WakuMessage.fromJSON(e))):[],pagingInfo:v(e.pagingInfo)?t.PagingInfo.fromJSON(e.pagingInfo):void 0,error:v(e.error)?l(e.error):0}),toJSON(e){const r={};return e.messages?r.messages=e.messages.map((e=>e?n.WakuMessage.toJSON(e):void 0)):r.messages=[],void 0!==e.pagingInfo&&(r.pagingInfo=e.pagingInfo?t.PagingInfo.toJSON(e.pagingInfo):void 0),void 0!==e.error&&(r.error=p(e.error)),r},fromPartial(e){const r={messages:[],pagingInfo:void 0,error:0};return r.messages=e.messages?.map((e=>n.WakuMessage.fromPartial(e)))||[],r.pagingInfo=void 0!==e.pagingInfo&&null!==e.pagingInfo?t.PagingInfo.fromPartial(e.pagingInfo):void 0,r.error=e.error??0,r}},t.HistoryRPC={encode:(e,r=s.default.Writer.create())=>(""!==e.requestId&&r.uint32(10).string(e.requestId),void 0!==e.query&&t.HistoryQuery.encode(e.query,r.uint32(18).fork()).ldelim(),void 0!==e.response&&t.HistoryResponse.encode(e.response,r.uint32(26).fork()).ldelim(),r),decode(e,r){const o=e instanceof s.default.Reader?e:new s.default.Reader(e);let i=void 0===r?o.len:o.pos+r;const n={requestId:"",query:void 0,response:void 0};for(;o.pos<i;){const e=o.uint32();switch(e>>>3){case 1:n.requestId=o.string();break;case 2:n.query=t.HistoryQuery.decode(o,o.uint32());break;case 3:n.response=t.HistoryResponse.decode(o,o.uint32());break;default:o.skipType(7&e)}}return n},fromJSON:e=>({requestId:v(e.requestId)?String(e.requestId):"",query:v(e.query)?t.HistoryQuery.fromJSON(e.query):void 0,response:v(e.response)?t.HistoryResponse.fromJSON(e.response):void 0}),toJSON(e){const r={};return void 0!==e.requestId&&(r.requestId=e.requestId),void 0!==e.query&&(r.query=e.query?t.HistoryQuery.toJSON(e.query):void 0),void 0!==e.response&&(r.response=e.response?t.HistoryResponse.toJSON(e.response):void 0),r},fromPartial(e){const r={requestId:"",query:void 0,response:void 0};return r.requestId=e.requestId??"",r.query=void 0!==e.query&&null!==e.query?t.HistoryQuery.fromPartial(e.query):void 0,r.response=void 0!==e.response&&null!==e.response?t.HistoryResponse.fromPartial(e.response):void 0,r}};var g=(()=>{if(void 0!==g)return g;if("undefined"!=typeof self)return self;if("undefined"!=typeof window)return window;if(void 0!==r.g)return r.g;throw"Unable to locate global object"})();const y=g.atob||(e=>g.Buffer.from(e,"base64").toString("binary"));function b(e){const t=y(e),r=new Uint8Array(t.length);for(let e=0;e<t.length;++e)r[e]=t.charCodeAt(e);return r}const m=g.btoa||(e=>g.Buffer.from(e,"binary").toString("base64"));function v(e){return null!=e}s.default.util.Long!==i.default&&(s.default.util.Long=i.default,s.default.configure())},5214:function(e,t,r){"use strict";var o=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.HistoryRPC=t.HistoryResponse=t.HistoryQuery=t.ContentFilter=t.PagingInfo=t.Index=t.historyResponse_ErrorToJSON=t.historyResponse_ErrorFromJSON=t.HistoryResponse_Error=t.pagingInfo_DirectionToJSON=t.pagingInfo_DirectionFromJSON=t.PagingInfo_Direction=t.protobufPackage=void 0;const i=o(r(3720)),s=o(r(2100)),n=r(6561);var a,u;function c(e){switch(e){case 0:case"DIRECTION_BACKWARD_UNSPECIFIED":return a.DIRECTION_BACKWARD_UNSPECIFIED;case 1:case"DIRECTION_FORWARD":return a.DIRECTION_FORWARD;default:return a.UNRECOGNIZED}}function d(e){switch(e){case a.DIRECTION_BACKWARD_UNSPECIFIED:return"DIRECTION_BACKWARD_UNSPECIFIED";case a.DIRECTION_FORWARD:return"DIRECTION_FORWARD";default:return"UNKNOWN"}}function l(e){switch(e){case 0:case"ERROR_NONE_UNSPECIFIED":return u.ERROR_NONE_UNSPECIFIED;case 1:case"ERROR_INVALID_CURSOR":return u.ERROR_INVALID_CURSOR;default:return u.UNRECOGNIZED}}function p(e){switch(e){case u.ERROR_NONE_UNSPECIFIED:return"ERROR_NONE_UNSPECIFIED";case u.ERROR_INVALID_CURSOR:return"ERROR_INVALID_CURSOR";default:return"UNKNOWN"}}function f(){return{digest:new Uint8Array,receivedTime:i.default.ZERO,senderTime:i.default.ZERO,pubsubTopic:""}}function h(){return{pageSize:i.default.UZERO,cursor:void 0,direction:0}}t.protobufPackage="waku.v2.store.v2beta4",function(e){e[e.DIRECTION_BACKWARD_UNSPECIFIED=0]="DIRECTION_BACKWARD_UNSPECIFIED",e[e.DIRECTION_FORWARD=1]="DIRECTION_FORWARD",e[e.UNRECOGNIZED=-1]="UNRECOGNIZED"}(a=t.PagingInfo_Direction||(t.PagingInfo_Direction={})),t.pagingInfo_DirectionFromJSON=c,t.pagingInfo_DirectionToJSON=d,function(e){e[e.ERROR_NONE_UNSPECIFIED=0]="ERROR_NONE_UNSPECIFIED",e[e.ERROR_INVALID_CURSOR=1]="ERROR_INVALID_CURSOR",e[e.UNRECOGNIZED=-1]="UNRECOGNIZED"}(u=t.HistoryResponse_Error||(t.HistoryResponse_Error={})),t.historyResponse_ErrorFromJSON=l,t.historyResponse_ErrorToJSON=p,t.Index={encode:(e,t=s.default.Writer.create())=>(0!==e.digest.length&&t.uint32(10).bytes(e.digest),e.receivedTime.isZero()||t.uint32(16).sint64(e.receivedTime),e.senderTime.isZero()||t.uint32(24).sint64(e.senderTime),""!==e.pubsubTopic&&t.uint32(34).string(e.pubsubTopic),t),decode(e,t){const r=e instanceof s.default.Reader?e:new s.default.Reader(e);let o=void 0===t?r.len:r.pos+t;const i=f();for(;r.pos<o;){const e=r.uint32();switch(e>>>3){case 1:i.digest=r.bytes();break;case 2:i.receivedTime=r.sint64();break;case 3:i.senderTime=r.sint64();break;case 4:i.pubsubTopic=r.string();break;default:r.skipType(7&e)}}return i},fromJSON:e=>({digest:v(e.digest)?b(e.digest):new Uint8Array,receivedTime:v(e.receivedTime)?i.default.fromString(e.receivedTime):i.default.ZERO,senderTime:v(e.senderTime)?i.default.fromString(e.senderTime):i.default.ZERO,pubsubTopic:v(e.pubsubTopic)?String(e.pubsubTopic):""}),toJSON(e){const t={};return void 0!==e.digest&&(t.digest=function(e){const t=[];for(const r of e)t.push(String.fromCharCode(r));return m(t.join(""))}(void 0!==e.digest?e.digest:new Uint8Array)),void 0!==e.receivedTime&&(t.receivedTime=(e.receivedTime||i.default.ZERO).toString()),void 0!==e.senderTime&&(t.senderTime=(e.senderTime||i.default.ZERO).toString()),void 0!==e.pubsubTopic&&(t.pubsubTopic=e.pubsubTopic),t},fromPartial(e){const t=f();return t.digest=e.digest??new Uint8Array,t.receivedTime=void 0!==e.receivedTime&&null!==e.receivedTime?i.default.fromValue(e.receivedTime):i.default.ZERO,t.senderTime=void 0!==e.senderTime&&null!==e.senderTime?i.default.fromValue(e.senderTime):i.default.ZERO,t.pubsubTopic=e.pubsubTopic??"",t}},t.PagingInfo={encode:(e,r=s.default.Writer.create())=>(e.pageSize.isZero()||r.uint32(8).uint64(e.pageSize),void 0!==e.cursor&&t.Index.encode(e.cursor,r.uint32(18).fork()).ldelim(),0!==e.direction&&r.uint32(24).int32(e.direction),r),decode(e,r){const o=e instanceof s.default.Reader?e:new s.default.Reader(e);let i=void 0===r?o.len:o.pos+r;const n=h();for(;o.pos<i;){const e=o.uint32();switch(e>>>3){case 1:n.pageSize=o.uint64();break;case 2:n.cursor=t.Index.decode(o,o.uint32());break;case 3:n.direction=o.int32();break;default:o.skipType(7&e)}}return n},fromJSON:e=>({pageSize:v(e.pageSize)?i.default.fromString(e.pageSize):i.default.UZERO,cursor:v(e.cursor)?t.Index.fromJSON(e.cursor):void 0,direction:v(e.direction)?c(e.direction):0}),toJSON(e){const r={};return void 0!==e.pageSize&&(r.pageSize=(e.pageSize||i.default.UZERO).toString()),void 0!==e.cursor&&(r.cursor=e.cursor?t.Index.toJSON(e.cursor):void 0),void 0!==e.direction&&(r.direction=d(e.direction)),r},fromPartial(e){const r=h();return r.pageSize=void 0!==e.pageSize&&null!==e.pageSize?i.default.fromValue(e.pageSize):i.default.UZERO,r.cursor=void 0!==e.cursor&&null!==e.cursor?t.Index.fromPartial(e.cursor):void 0,r.direction=e.direction??0,r}},t.ContentFilter={encode:(e,t=s.default.Writer.create())=>(""!==e.contentTopic&&t.uint32(10).string(e.contentTopic),t),decode(e,t){const r=e instanceof s.default.Reader?e:new s.default.Reader(e);let o=void 0===t?r.len:r.pos+t;const i={contentTopic:""};for(;r.pos<o;){const e=r.uint32();e>>>3==1?i.contentTopic=r.string():r.skipType(7&e)}return i},fromJSON:e=>({contentTopic:v(e.contentTopic)?String(e.contentTopic):""}),toJSON(e){const t={};return void 0!==e.contentTopic&&(t.contentTopic=e.contentTopic),t},fromPartial(e){const t={contentTopic:""};return t.contentTopic=e.contentTopic??"",t}},t.HistoryQuery={encode(e,r=s.default.Writer.create()){void 0!==e.pubSubTopic&&r.uint32(18).string(e.pubSubTopic);for(const o of e.contentFilters)t.ContentFilter.encode(o,r.uint32(26).fork()).ldelim();return void 0!==e.pagingInfo&&t.PagingInfo.encode(e.pagingInfo,r.uint32(34).fork()).ldelim(),void 0!==e.startTime&&r.uint32(40).sint64(e.startTime),void 0!==e.endTime&&r.uint32(48).sint64(e.endTime),r},decode(e,r){const o=e instanceof s.default.Reader?e:new s.default.Reader(e);let i=void 0===r?o.len:o.pos+r;const n={pubSubTopic:void 0,contentFilters:[],pagingInfo:void 0,startTime:void 0,endTime:void 0};for(;o.pos<i;){const e=o.uint32();switch(e>>>3){case 2:n.pubSubTopic=o.string();break;case 3:n.contentFilters.push(t.ContentFilter.decode(o,o.uint32()));break;case 4:n.pagingInfo=t.PagingInfo.decode(o,o.uint32());break;case 5:n.startTime=o.sint64();break;case 6:n.endTime=o.sint64();break;default:o.skipType(7&e)}}return n},fromJSON:e=>({pubSubTopic:v(e.pubSubTopic)?String(e.pubSubTopic):void 0,contentFilters:Array.isArray(e?.contentFilters)?e.contentFilters.map((e=>t.ContentFilter.fromJSON(e))):[],pagingInfo:v(e.pagingInfo)?t.PagingInfo.fromJSON(e.pagingInfo):void 0,startTime:v(e.startTime)?i.default.fromString(e.startTime):void 0,endTime:v(e.endTime)?i.default.fromString(e.endTime):void 0}),toJSON(e){const r={};return void 0!==e.pubSubTopic&&(r.pubSubTopic=e.pubSubTopic),e.contentFilters?r.contentFilters=e.contentFilters.map((e=>e?t.ContentFilter.toJSON(e):void 0)):r.contentFilters=[],void 0!==e.pagingInfo&&(r.pagingInfo=e.pagingInfo?t.PagingInfo.toJSON(e.pagingInfo):void 0),void 0!==e.startTime&&(r.startTime=(e.startTime||void 0).toString()),void 0!==e.endTime&&(r.endTime=(e.endTime||void 0).toString()),r},fromPartial(e){const r={pubSubTopic:void 0,contentFilters:[],pagingInfo:void 0,startTime:void 0,endTime:void 0};return r.pubSubTopic=e.pubSubTopic??void 0,r.contentFilters=e.contentFilters?.map((e=>t.ContentFilter.fromPartial(e)))||[],r.pagingInfo=void 0!==e.pagingInfo&&null!==e.pagingInfo?t.PagingInfo.fromPartial(e.pagingInfo):void 0,r.startTime=void 0!==e.startTime&&null!==e.startTime?i.default.fromValue(e.startTime):void 0,r.endTime=void 0!==e.endTime&&null!==e.endTime?i.default.fromValue(e.endTime):void 0,r}},t.HistoryResponse={encode(e,r=s.default.Writer.create()){for(const t of e.messages)n.WakuMessage.encode(t,r.uint32(18).fork()).ldelim();return void 0!==e.pagingInfo&&t.PagingInfo.encode(e.pagingInfo,r.uint32(26).fork()).ldelim(),0!==e.error&&r.uint32(32).int32(e.error),r},decode(e,r){const o=e instanceof s.default.Reader?e:new s.default.Reader(e);let i=void 0===r?o.len:o.pos+r;const a={messages:[],pagingInfo:void 0,error:0};for(;o.pos<i;){const e=o.uint32();switch(e>>>3){case 2:a.messages.push(n.WakuMessage.decode(o,o.uint32()));break;case 3:a.pagingInfo=t.PagingInfo.decode(o,o.uint32());break;case 4:a.error=o.int32();break;default:o.skipType(7&e)}}return a},fromJSON:e=>({messages:Array.isArray(e?.messages)?e.messages.map((e=>n.WakuMessage.fromJSON(e))):[],pagingInfo:v(e.pagingInfo)?t.PagingInfo.fromJSON(e.pagingInfo):void 0,error:v(e.error)?l(e.error):0}),toJSON(e){const r={};return e.messages?r.messages=e.messages.map((e=>e?n.WakuMessage.toJSON(e):void 0)):r.messages=[],void 0!==e.pagingInfo&&(r.pagingInfo=e.pagingInfo?t.PagingInfo.toJSON(e.pagingInfo):void 0),void 0!==e.error&&(r.error=p(e.error)),r},fromPartial(e){const r={messages:[],pagingInfo:void 0,error:0};return r.messages=e.messages?.map((e=>n.WakuMessage.fromPartial(e)))||[],r.pagingInfo=void 0!==e.pagingInfo&&null!==e.pagingInfo?t.PagingInfo.fromPartial(e.pagingInfo):void 0,r.error=e.error??0,r}},t.HistoryRPC={encode:(e,r=s.default.Writer.create())=>(""!==e.requestId&&r.uint32(10).string(e.requestId),void 0!==e.query&&t.HistoryQuery.encode(e.query,r.uint32(18).fork()).ldelim(),void 0!==e.response&&t.HistoryResponse.encode(e.response,r.uint32(26).fork()).ldelim(),r),decode(e,r){const o=e instanceof s.default.Reader?e:new s.default.Reader(e);let i=void 0===r?o.len:o.pos+r;const n={requestId:"",query:void 0,response:void 0};for(;o.pos<i;){const e=o.uint32();switch(e>>>3){case 1:n.requestId=o.string();break;case 2:n.query=t.HistoryQuery.decode(o,o.uint32());break;case 3:n.response=t.HistoryResponse.decode(o,o.uint32());break;default:o.skipType(7&e)}}return n},fromJSON:e=>({requestId:v(e.requestId)?String(e.requestId):"",query:v(e.query)?t.HistoryQuery.fromJSON(e.query):void 0,response:v(e.response)?t.HistoryResponse.fromJSON(e.response):void 0}),toJSON(e){const r={};return void 0!==e.requestId&&(r.requestId=e.requestId),void 0!==e.query&&(r.query=e.query?t.HistoryQuery.toJSON(e.query):void 0),void 0!==e.response&&(r.response=e.response?t.HistoryResponse.toJSON(e.response):void 0),r},fromPartial(e){const r={requestId:"",query:void 0,response:void 0};return r.requestId=e.requestId??"",r.query=void 0!==e.query&&null!==e.query?t.HistoryQuery.fromPartial(e.query):void 0,r.response=void 0!==e.response&&null!==e.response?t.HistoryResponse.fromPartial(e.response):void 0,r}};var g=(()=>{if(void 0!==g)return g;if("undefined"!=typeof self)return self;if("undefined"!=typeof window)return window;if(void 0!==r.g)return r.g;throw"Unable to locate global object"})();const y=g.atob||(e=>g.Buffer.from(e,"base64").toString("binary"));function b(e){const t=y(e),r=new Uint8Array(t.length);for(let e=0;e<t.length;++e)r[e]=t.charCodeAt(e);return r}const m=g.btoa||(e=>g.Buffer.from(e,"binary").toString("base64"));function v(e){return null!=e}s.default.util.Long!==i.default&&(s.default.util.Long=i.default,s.default.configure())},3094:()=>{},9159:()=>{},5883:()=>{},5696:()=>{},9408:()=>{},7956:()=>{},1724:()=>{},2678:()=>{},5819:()=>{},4031:()=>{}},r={};function o(e){var i=r[e];if(void 0!==i)return i.exports;var s=r[e]={exports:{}};return t[e].call(s.exports,s,s.exports,o),s.exports}o.m=t,o.amdO={},e=[],o.O=(t,r,i,s)=>{if(!r){var n=1/0;for(d=0;d<e.length;d++){for(var[r,i,s]=e[d],a=!0,u=0;u<r.length;u++)(!1&s||n>=s)&&Object.keys(o.O).every((e=>o.O[e](r[u])))?r.splice(u--,1):(a=!1,s<n&&(n=s));if(a){e.splice(d--,1);var c=i();void 0!==c&&(t=c)}}return t}s=s||0;for(var d=e.length;d>0&&e[d-1][2]>s;d--)e[d]=e[d-1];e[d]=[r,i,s]},o.d=(e,t)=>{for(var r in t)o.o(t,r)&&!o.o(e,r)&&Object.defineProperty(e,r,{enumerable:!0,get:t[r]})},o.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"==typeof window)return window}}(),o.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),o.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},(()=>{var e={204:0};o.O.j=t=>0===e[t];var t=(t,r)=>{var i,s,[n,a,u]=r,c=0;if(n.some((t=>0!==e[t]))){for(i in a)o.o(a,i)&&(o.m[i]=a[i]);if(u)var d=u(o)}for(t&&t(r);c<n.length;c++)s=n[c],o.o(e,s)&&e[s]&&e[s][0](),e[s]=0;return o.O(d)},r=this.webpackChunkjswaku=this.webpackChunkjswaku||[];r.forEach(t.bind(null,0)),r.push=t.bind(null,r.push.bind(r))})();var i=o.O(void 0,[216],(()=>o(3607)));return o.O(i)})()}));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,